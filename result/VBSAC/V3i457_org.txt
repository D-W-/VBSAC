/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/java -ea -Didea.test.cyclic.buffer.size=1048576 -javaagent:/home/guzuxing/Downloads/idea-IU-171.4424.56/lib/idea_rt.jar=36460:/home/guzuxing/Downloads/idea-IU-171.4424.56/bin -Dfile.encoding=UTF-8 -classpath /home/guzuxing/Downloads/idea-IU-171.4424.56/lib/idea_rt.jar:/home/guzuxing/Downloads/idea-IU-171.4424.56/plugins/junit/lib/junit-rt.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/ext/cldrdata.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/ext/dnsns.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/ext/icedtea-sound.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/ext/jaccess.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/ext/localedata.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/ext/nashorn.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/ext/sunec.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/ext/sunjce_provider.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/ext/sunpkcs11.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/ext/zipfs.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/management-agent.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/rt.jar:/home/guzuxing/Documents/tsmart-v3/engine/out/test/classes:/home/guzuxing/Documents/tsmart-v3/engine/build/resources/test:/home/guzuxing/Documents/tsmart-v3/engine/out/production/classes:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/llvm-macosx-x86_64.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/guava.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/java-cup-runtime.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/llvm-linux-x86_64.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/org.osgi.core.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/com.microsoft.z3.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/jopt-simple.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/javasmt.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/javacpp.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/scala-library.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/princess-assertionless.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/org.osgi.compendium.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/smtinterpol.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/llvm-linux-x86.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/llvm.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/llvm-platform.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/smt-parser.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/common.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/javolution-core-java.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/runtime/jsr305.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/XMLReport.jar:/home/guzuxing/Documents/tsmart-v3/engine/libs/build-capture.jar:/home/guzuxing/Documents/tsmart-v3/mod-commons/out/production/classes:/home/guzuxing/.gradle/caches/modules-2/files-2.1/junit/junit/4.11/4e031bb61df09069aeb2bffb4019e7a5034a4ee0/junit-4.11.jar:/home/guzuxing/.gradle/caches/modules-2/files-2.1/com.google.guava/guava/19.0/6ce200f6b23222af3d8abb6b6459e6c44f4bb0e9/guava-19.0.jar:/home/guzuxing/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/3.0.0/5871fb60dc68d67da54a663c3fd636a10a532948/jsr305-3.0.0.jar:/home/guzuxing/.gradle/caches/modules-2/files-2.1/com.google.truth/truth/0.30/9d591b5a66eda81f0b88cf1c748ab8853d99b18b/truth-0.30.jar:/home/guzuxing/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar:/home/guzuxing/.gradle/caches/modules-2/files-2.1/com.google.errorprone/error_prone_annotations/2.0.8/54e2d56cb157df08cbf183149bcf50c9f5151ed4/error_prone_annotations-2.0.8.jar com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 cn.edu.thu.tsmart.integrated.ITC_457_Test
<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_memory_access_1.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
3 SCCs to deal with
SCC(1): [uninit_memory_access_001_good]
 +uninit_memory_access_001_good
SCC(1): [uninit_memory_access_001_bad]
 +uninit_memory_access_001_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [main, uninit_memory_access_001_bad, uninit_memory_access_001_good]
Loops     []
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_memory_access_001_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_001_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.221s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N1): +oo]
> [1/1] entry: main ()
N1 -{%retval = alloca i32, align 4}-> N3
N3 -{store i32 0, i32* %retval, align 4}-> N4
N4 -{call uninit_memory_access_001_good}-> N18
N18 -{%a = alloca i64, align 8}-> N20
N20 -{%ret = alloca i64*, align 8}-> N22
N22 -{store i64 10, i64* %a, align 8}-> N24
N24 -{store i64* %a, i64** %ret, align 8}-> N25
N25 -{ret void}-> N17
N17 -{Return edge from uninit_memory_access_001_good to main}-> N5
N5 -{call uninit_memory_access_001_bad}-> N9
N9 -{%a = alloca i64, align 8}-> N11
N11 -{%ret = alloca i64*, align 8}-> N14
N14 -{store i64* %a, i64** %ret, align 8}-> N15
N15 -{ret void}-> N8
N8 -{Return edge from uninit_memory_access_001_bad to main}-> N6
N6 -{ret i32 0}-> N0
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N14
On edge  : N14 -{store i64* %a, i64** %ret, align 8}-> N15
Message  : use of uninitialized variable
> Start from entry function: main, At N1 of Function main
> Entering function: uninit_memory_access_001_good, On N4 -> N18 (call uninit_memory_access_001_good)
> Leaving function: uninit_memory_access_001_good, On N17 -> N5 (Return edge from uninit_memory_access_001_good to main)
> Entering function: uninit_memory_access_001_bad, On N5 -> N9 (call uninit_memory_access_001_bad)
<Defect> : N14 -> N15: [store i64* %a, i64** %ret, align 8]
N14 -> N15: [store i64* %a, i64** %ret, align 8] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_memory_access_1.c 9] uninit_memory_access_001_bad 		[N14 -{store i64* %a, i64** %ret, align 8}-> N15]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_memory_access_2.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
3 SCCs to deal with
SCC(1): [uninit_memory_access_003_good]
 +uninit_memory_access_003_good
SCC(1): [uninit_memory_access_003_bad]
 +uninit_memory_access_003_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [uninit_memory_access_003_bad, uninit_memory_access_003_good, main]
Loops     []
----
function: main
P+ = [] 
P- = [H(uninit_memory_access_003_bad::call), H(uninit_memory_access_003_good::call)] 
Point-To:

Ret-Value: R
----
function: uninit_memory_access_003_bad
P+ = [] 
P- = [H(uninit_memory_access_003_bad::call)] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_003_good
P+ = [] 
P- = [H(uninit_memory_access_003_good::call)] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.037s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N28): +oo]
> [1/1] entry: main ()
N28 -{global: .str}-> N78
N78 -{%retval = alloca i32, align 4}-> N30
N30 -{store i32 0, i32* %retval, align 4}-> N31
N31 -{call uninit_memory_access_003_good}-> N57
N57 -{%str1 = alloca i8*, align 8}-> N59
N59 -{%str2 = alloca i8*, align 8}-> N61
N61 -{%call = call i8* @calloc(i64 25, i64 1, i64 @calloc)}-> N62
N61 -{%call = call i8* @calloc(i64 25, i64 1, i64 @calloc)}-> N62
N62 -{store i8* %call, i8** %str1, align 8}-> N64
N62 -{store i8* %call, i8** %str1, align 8}-> N64
N64 -{store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0), i8** %str2, align 8}-> N65
N64 -{store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0), i8** %str2, align 8}-> N65
N65 -{%0 = load i8*, i8** %str1, align 8}-> N66
N65 -{%0 = load i8*, i8** %str1, align 8}-> N66
N66 -{%cmp = icmp ne i8* %0, null}-> N67
N66 -{%cmp = icmp ne i8* %0, null}-> N67
N67 -{[%cmp = icmp ne i8* %0, null]}-> N76
N67 -{[!(%cmp = icmp ne i8* %0, null)]}-> N74
N67 -{[%cmp = icmp ne i8* %0, null]}-> N76
N67 -{[!(%cmp = icmp ne i8* %0, null)]}-> N74
N76 -{%1 = load i8*, i8** %str1, align 8}-> N69
N69 -{%2 = load i8*, i8** %str2, align 8}-> N70
N70 -{%call1 = call i8* @strcpy(i8* %1, i8* %2, i8* @strcpy)}-> N71
N71 -{%3 = load i8*, i8** %str1, align 8}-> N72
N72 -{call void @free(i8* %3, i8* @free)}-> N74
N74 -{ret void}-> N56
N56 -{Return edge from uninit_memory_access_003_good to main}-> N32
N32 -{call uninit_memory_access_003_bad}-> N36
N36 -{%str1 = alloca i8*, align 8}-> N38
N38 -{%str2 = alloca i8*, align 8}-> N40
N40 -{%call = call i8* @calloc(i64 25, i64 1, i64 @calloc)}-> N41
N40 -{%call = call i8* @calloc(i64 25, i64 1, i64 @calloc)}-> N41
N41 -{store i8* %call, i8** %str1, align 8}-> N43
N41 -{store i8* %call, i8** %str1, align 8}-> N43
N43 -{%0 = load i8*, i8** %str1, align 8}-> N44
N43 -{%0 = load i8*, i8** %str1, align 8}-> N44
N44 -{%cmp = icmp ne i8* %0, null}-> N45
N44 -{%cmp = icmp ne i8* %0, null}-> N45
N45 -{[%cmp = icmp ne i8* %0, null]}-> N54
N45 -{[!(%cmp = icmp ne i8* %0, null)]}-> N52
N45 -{[%cmp = icmp ne i8* %0, null]}-> N54
N45 -{[!(%cmp = icmp ne i8* %0, null)]}-> N52
N54 -{%1 = load i8*, i8** %str1, align 8}-> N47
N47 -{%2 = load i8*, i8** %str2, align 8}-> N48
N48 -{%call1 = call i8* @strcpy(i8* %1, i8* %2, i8* @strcpy)}-> N49
N49 -{%3 = load i8*, i8** %str1, align 8}-> N50
N50 -{call void @free(i8* %3, i8* @free)}-> N52
N52 -{ret void}-> N35
N35 -{Return edge from uninit_memory_access_003_bad to main}-> N33
N33 -{ret i32 0}-> N27
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N47
On edge  : N47 -{%2 = load i8*, i8** %str2, align 8}-> N48
Message  : use of uninitialized variable
> Start from entry function: main, At N28 of Function main
> Entering function: uninit_memory_access_003_good, On N31 -> N57 (call uninit_memory_access_003_good)
> takes the false branch, At N67 of Function uninit_memory_access_003_good
> Leaving function: uninit_memory_access_003_good, On N56 -> N32 (Return edge from uninit_memory_access_003_good to main)
> Entering function: uninit_memory_access_003_bad, On N32 -> N36 (call uninit_memory_access_003_bad)
> takes the true branch, At N45 of Function uninit_memory_access_003_bad
<Defect> : N47 -> N48: [%2 = load i8*, i8** %str2, align 8]
N47 -> N48: [%2 = load i8*, i8** %str2, align 8] <--
-- end of trace --
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N48
On edge  : N48 -{%call1 = call i8* @strcpy(i8* %1, i8* %2, i8* @strcpy)}-> N49
Message  : use of uninitialized variable
> Start from entry function: main, At N28 of Function main
> Entering function: uninit_memory_access_003_good, On N31 -> N57 (call uninit_memory_access_003_good)
> takes the false branch, At N67 of Function uninit_memory_access_003_good
> Leaving function: uninit_memory_access_003_good, On N56 -> N32 (Return edge from uninit_memory_access_003_good to main)
> Entering function: uninit_memory_access_003_bad, On N32 -> N36 (call uninit_memory_access_003_bad)
> takes the true branch, At N45 of Function uninit_memory_access_003_bad
<Defect> : N48 -> N49: [%call1 = call i8* @strcpy(i8* %1, i8* %2, i8* @strcpy)]
N48 -> N49: [%call1 = call i8* @strcpy(i8* %1, i8* %2, i8* @strcpy)] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 2
	[./457_uninit_memory_access_2.c 14] uninit_memory_access_003_bad 		[N47 -{%2 = load i8*, i8** %str2, align 8}-> N48]	(use of uninitialized variable)
	[./457_uninit_memory_access_2.c 14] uninit_memory_access_003_bad 		[N48 -{%call1 = call i8* @strcpy(i8* %1, i8* %2, i8* @strcpy)}-> N49]	(use of uninitialized variable)

Found 2 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS


java.lang.AssertionError: unexpected number of reports 
Expected :2
Actual   :1
 <Click to see difference>


	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:743)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at cn.edu.thu.tsmart.helper.assertion.NumberAssert.is(NumberAssert.java:48)
	at cn.edu.thu.tsmart.helper.assertion.NumberAssert.is(NumberAssert.java:44)
	at cn.edu.thu.tsmart.integrated.ITC_457_Test.lambda$itc_457_memory_2$15(ITC_457_Test.java:226)
	at cn.edu.thu.tsmart.helper.assertion.ReportSetAssert.satisfy(ReportSetAssert.java:79)
	at cn.edu.thu.tsmart.integrated.ITC_457_Test.itc_457_memory_2(ITC_457_Test.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_memory_access_3.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
5 SCCs to deal with
SCC(1): [_001_bad]
 +_001_bad
SCC(1): [_001_good]
 +_001_good
SCC(1): [bad]
 +bad
SCC(1): [good]
 +good
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [bad, good, main, _001_bad, _001_good]
Loops     []
----
function: _001_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: _001_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.061s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N123): +oo]
> [1/1] entry: main ()
N123 -{global: .str}-> N130
N130 -{%retval = alloca i32, align 4}-> N125
N125 -{store i32 0, i32* %retval, align 4}-> N126
N126 -{call good}-> N114
N114 -{%str = alloca i8*, align 8}-> N117
N117 -{store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i8** %str, align 8}-> N118
N118 -{%0 = load i8*, i8** %str, align 8}-> N119
N119 -{call _001_good}-> N93
N93 -{%msg.addr = alloca i8*, align 8}-> N95
N95 -{%error_log = alloca i8*, align 8}-> N96
N96 -{%buffer = alloca [24 x i8], align 16}-> N97
N97 -{store i8* %msg, i8** %msg.addr, align 8}-> N100
N100 -{%0 = load i8*, i8** %msg.addr, align 8}-> N101
N101 -{store i8* %0, i8** %error_log, align 8}-> N103
N103 -{ret void}-> N92
N92 -{Return edge from _001_good to good}-> N120
N120 -{ret void}-> N113
N113 -{Return edge from good to main}-> N127
N127 -{call bad}-> N106
N106 -{%str = alloca i8*, align 8}-> N109
N109 -{%0 = load i8*, i8** %str, align 8}-> N110
N110 -{call _001_bad}-> N80
N80 -{%msg.addr = alloca i8*, align 8}-> N82
N82 -{%error_log = alloca i8*, align 8}-> N83
N83 -{%buffer = alloca [24 x i8], align 16}-> N84
N84 -{store i8* %msg, i8** %msg.addr, align 8}-> N87
N87 -{%0 = load i8*, i8** %msg.addr, align 8}-> N88
N88 -{store i8* %0, i8** %error_log, align 8}-> N90
N90 -{ret void}-> N79
N79 -{Return edge from _001_bad to bad}-> N111
N111 -{ret void}-> N105
N105 -{Return edge from bad to main}-> N128
N128 -{ret i32 0}-> N122
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N109
On edge  : N109 -{%0 = load i8*, i8** %str, align 8}-> N110
Message  : use of uninitialized variable
> Start from entry function: main, At N123 of Function main
> Entering function: good, On N126 -> N114 (call good)
> Entering function: _001_good, On N119 -> N93 (call _001_good)
> Leaving function: _001_good, On N92 -> N120 (Return edge from _001_good to good)
> Leaving function: good, On N113 -> N127 (Return edge from good to main)
> Entering function: bad, On N127 -> N106 (call bad)
<Defect> : N109 -> N110: [%0 = load i8*, i8** %str, align 8]
N109 -> N110: [%0 = load i8*, i8** %str, align 8] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_memory_access_3.c 14] bad 		[N109 -{%0 = load i8*, i8** %str, align 8}-> N110]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_memory_access_4.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
3 SCCs to deal with
SCC(1): [uninit_memory_access_005_good]
 +uninit_memory_access_005_good
SCC(1): [uninit_memory_access_005_bad]
 +uninit_memory_access_005_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [main, uninit_memory_access_005_bad, uninit_memory_access_005_good]
Loops     [N155, N213]
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_memory_access_005_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_005_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
loop N155 in uninit_memory_access_005_bad: 
N155 -> P+ = [], P- = [] Point-To: 
N157 -> P+ = [], P- = [] Point-To: 
----
loop N213 in uninit_memory_access_005_good: 
N213 -> P+ = [], P- = [] Point-To: 
N215 -> P+ = [], P- = [] Point-To: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.109s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N132): +oo]
> [1/1] entry: main ()
N132 -{global: uninit_memory_access_005_bad.arr}-> N256
N256 -{global: uninit_memory_access_005_good.arr}-> N255
N255 -{%retval = alloca i32, align 4}-> N134
N134 -{store i32 0, i32* %retval, align 4}-> N135
N135 -{call uninit_memory_access_005_good}-> N198
N198 -{%i = alloca i32, align 4}-> N200
N200 -{%j = alloca i32, align 4}-> N201
N201 -{%k = alloca i32, align 4}-> N202
N202 -{%arr = alloca [2 x [2 x i32]], align 16}-> N203
N203 -{%arr1 = alloca [2 x [2 x i32]], align 16}-> N208
N208 -{%0 = bitcast [2 x [2 x i32]]* %arr to i8*}-> N209
N209 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([2 x [2 x i32]]* @uninit_memory_access_005_good.arr to i8*), i8* 16, i8* 16, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N211
N211 -{store i32 0, i32* %i, align 4}-> N213
N213 -{%1 = load i32, i32* %i, align 4}-> N214
N213 -{@}-> N213
N213 -{@}-> N215
N214 -{%cmp = icmp slt i32 %1, 2}-> N215
N215 -{[%cmp = icmp slt i32 %1, 2]}-> N251
N215 -{[!(%cmp = icmp slt i32 %1, 2)]}-> N252
N251 -{store i32 0, i32* %j, align 4}-> N218
N218 -{%2 = load i32, i32* %j, align 4}-> N219
N219 -{%cmp2 = icmp slt i32 %2, 2}-> N220
N220 -{[%cmp2 = icmp slt i32 %2, 2]}-> N253
N220 -{[!(%cmp2 = icmp slt i32 %2, 2)]}-> N254
N253 -{%3 = load i32, i32* %j, align 4}-> N222
N222 -{%idxprom = sext i32 %3 to i64}-> N223
N223 -{%4 = load i32, i32* %i, align 4}-> N224
N224 -{%idxprom4 = sext i32 %4 to i64}-> N225
N225 -{%arrayidx = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arr, i64 0, i64 %idxprom4}-> N226
N226 -{%arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N227
N227 -{%5 = load i32, i32* %arrayidx5, align 4}-> N228
N228 -{%6 = load i32, i32* %j, align 4}-> N229
N229 -{%idxprom6 = sext i32 %6 to i64}-> N230
N230 -{%7 = load i32, i32* %i, align 4}-> N231
N231 -{%idxprom7 = sext i32 %7 to i64}-> N232
N232 -{%arrayidx8 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arr1, i64 0, i64 %idxprom7}-> N233
N233 -{%arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N234
N234 -{store i32 %5, i32* %arrayidx9, align 4}-> N236
N236 -{%8 = load i32, i32* %j, align 4}-> N237
N237 -{%inc = add i32 %8, 1}-> N238
N238 -{store i32 %inc, i32* %j, align 4}-> N218
N218 -{%2 = load i32, i32* %j, align 4}-> N219
N219 -{%cmp2 = icmp slt i32 %2, 2}-> N220
N220 -{[%cmp2 = icmp slt i32 %2, 2]}-> N253
N220 -{[!(%cmp2 = icmp slt i32 %2, 2)]}-> N254
N253 -{%3 = load i32, i32* %j, align 4}-> N222
N222 -{%idxprom = sext i32 %3 to i64}-> N223
N223 -{%4 = load i32, i32* %i, align 4}-> N224
N224 -{%idxprom4 = sext i32 %4 to i64}-> N225
N225 -{%arrayidx = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arr, i64 0, i64 %idxprom4}-> N226
N226 -{%arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N227
N227 -{%5 = load i32, i32* %arrayidx5, align 4}-> N228
N228 -{%6 = load i32, i32* %j, align 4}-> N229
N229 -{%idxprom6 = sext i32 %6 to i64}-> N230
N230 -{%7 = load i32, i32* %i, align 4}-> N231
N231 -{%idxprom7 = sext i32 %7 to i64}-> N232
N232 -{%arrayidx8 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arr1, i64 0, i64 %idxprom7}-> N233
N233 -{%arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N234
N234 -{store i32 %5, i32* %arrayidx9, align 4}-> N236
N236 -{%8 = load i32, i32* %j, align 4}-> N237
N237 -{%inc = add i32 %8, 1}-> N238
N238 -{store i32 %inc, i32* %j, align 4}-> N218
N218 -{%2 = load i32, i32* %j, align 4}-> N219
N219 -{%cmp2 = icmp slt i32 %2, 2}-> N220
N220 -{[%cmp2 = icmp slt i32 %2, 2]}-> N253
N220 -{[!(%cmp2 = icmp slt i32 %2, 2)]}-> N254
N254 -{%9 = load i32, i32* %i, align 4}-> N242
N242 -{%inc11 = add i32 %9, 1}-> N243
N243 -{store i32 %inc11, i32* %i, align 4}-> N213
N213 -{%1 = load i32, i32* %i, align 4}-> N214
N214 -{%cmp = icmp slt i32 %1, 2}-> N215
N215 -{[%cmp = icmp slt i32 %1, 2]}-> N251
N215 -{[!(%cmp = icmp slt i32 %1, 2)]}-> N252
N251 -{store i32 0, i32* %j, align 4}-> N218
N218 -{%2 = load i32, i32* %j, align 4}-> N219
N219 -{%cmp2 = icmp slt i32 %2, 2}-> N220
N220 -{[%cmp2 = icmp slt i32 %2, 2]}-> N253
N220 -{[!(%cmp2 = icmp slt i32 %2, 2)]}-> N254
N253 -{%3 = load i32, i32* %j, align 4}-> N222
N222 -{%idxprom = sext i32 %3 to i64}-> N223
N223 -{%4 = load i32, i32* %i, align 4}-> N224
N224 -{%idxprom4 = sext i32 %4 to i64}-> N225
N225 -{%arrayidx = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arr, i64 0, i64 %idxprom4}-> N226
N226 -{%arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N227
N227 -{%5 = load i32, i32* %arrayidx5, align 4}-> N228
N228 -{%6 = load i32, i32* %j, align 4}-> N229
N229 -{%idxprom6 = sext i32 %6 to i64}-> N230
N230 -{%7 = load i32, i32* %i, align 4}-> N231
N231 -{%idxprom7 = sext i32 %7 to i64}-> N232
N232 -{%arrayidx8 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arr1, i64 0, i64 %idxprom7}-> N233
N233 -{%arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N234
N234 -{store i32 %5, i32* %arrayidx9, align 4}-> N236
N236 -{%8 = load i32, i32* %j, align 4}-> N237
N237 -{%inc = add i32 %8, 1}-> N238
N238 -{store i32 %inc, i32* %j, align 4}-> N218
N218 -{%2 = load i32, i32* %j, align 4}-> N219
N219 -{%cmp2 = icmp slt i32 %2, 2}-> N220
N220 -{[%cmp2 = icmp slt i32 %2, 2]}-> N253
N220 -{[!(%cmp2 = icmp slt i32 %2, 2)]}-> N254
N253 -{%3 = load i32, i32* %j, align 4}-> N222
N222 -{%idxprom = sext i32 %3 to i64}-> N223
N223 -{%4 = load i32, i32* %i, align 4}-> N224
N224 -{%idxprom4 = sext i32 %4 to i64}-> N225
N225 -{%arrayidx = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arr, i64 0, i64 %idxprom4}-> N226
N226 -{%arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N227
N227 -{%5 = load i32, i32* %arrayidx5, align 4}-> N228
N228 -{%6 = load i32, i32* %j, align 4}-> N229
N229 -{%idxprom6 = sext i32 %6 to i64}-> N230
N230 -{%7 = load i32, i32* %i, align 4}-> N231
N231 -{%idxprom7 = sext i32 %7 to i64}-> N232
N232 -{%arrayidx8 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arr1, i64 0, i64 %idxprom7}-> N233
N233 -{%arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N234
N234 -{store i32 %5, i32* %arrayidx9, align 4}-> N236
N236 -{%8 = load i32, i32* %j, align 4}-> N237
N237 -{%inc = add i32 %8, 1}-> N238
N238 -{store i32 %inc, i32* %j, align 4}-> N218
N218 -{%2 = load i32, i32* %j, align 4}-> N219
N219 -{%cmp2 = icmp slt i32 %2, 2}-> N220
N220 -{[%cmp2 = icmp slt i32 %2, 2]}-> N253
N220 -{[!(%cmp2 = icmp slt i32 %2, 2)]}-> N254
N254 -{%9 = load i32, i32* %i, align 4}-> N242
N242 -{%inc11 = add i32 %9, 1}-> N243
N243 -{store i32 %inc11, i32* %i, align 4}-> N213
N213 -{%1 = load i32, i32* %i, align 4}-> N214
N214 -{%cmp = icmp slt i32 %1, 2}-> N215
N215 -{[%cmp = icmp slt i32 %1, 2]}-> N251
N215 -{[!(%cmp = icmp slt i32 %1, 2)]}-> N252
N252 -{%arrayidx13 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arr1, i64 0, i64 1}-> N246
N246 -{%arrayidx14 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx13, i64 0, i64 1}-> N247
N247 -{%10 = load i32, i32* %arrayidx14, align 4}-> N248
N248 -{store i32 %10, i32* %k, align 4}-> N249
N249 -{ret void}-> N197
N197 -{Return edge from uninit_memory_access_005_good to main}-> N136
N136 -{call uninit_memory_access_005_bad}-> N140
N140 -{%i = alloca i32, align 4}-> N142
N142 -{%j = alloca i32, align 4}-> N143
N143 -{%k = alloca i32, align 4}-> N144
N144 -{%arr = alloca [2 x [2 x i32]], align 16}-> N145
N145 -{%arr1 = alloca [2 x [2 x i32]], align 16}-> N150
N150 -{%0 = bitcast [2 x [2 x i32]]* %arr to i8*}-> N151
N151 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([2 x [2 x i32]]* @uninit_memory_access_005_bad.arr to i8*), i8* 16, i8* 16, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N153
N153 -{store i32 0, i32* %i, align 4}-> N155
N155 -{%1 = load i32, i32* %i, align 4}-> N156
N155 -{@}-> N155
N155 -{@}-> N157
N156 -{%cmp = icmp slt i32 %1, 1}-> N157
N157 -{[%cmp = icmp slt i32 %1, 1]}-> N193
N157 -{[!(%cmp = icmp slt i32 %1, 1)]}-> N194
N193 -{store i32 0, i32* %j, align 4}-> N160
N160 -{%2 = load i32, i32* %j, align 4}-> N161
N161 -{%cmp2 = icmp slt i32 %2, 1}-> N162
N162 -{[%cmp2 = icmp slt i32 %2, 1]}-> N195
N162 -{[!(%cmp2 = icmp slt i32 %2, 1)]}-> N196
N195 -{%3 = load i32, i32* %j, align 4}-> N164
N164 -{%idxprom = sext i32 %3 to i64}-> N165
N165 -{%4 = load i32, i32* %i, align 4}-> N166
N166 -{%idxprom4 = sext i32 %4 to i64}-> N167
N167 -{%arrayidx = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arr, i64 0, i64 %idxprom4}-> N168
N168 -{%arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N169
N169 -{%5 = load i32, i32* %arrayidx5, align 4}-> N170
N170 -{%6 = load i32, i32* %j, align 4}-> N171
N171 -{%idxprom6 = sext i32 %6 to i64}-> N172
N172 -{%7 = load i32, i32* %i, align 4}-> N173
N173 -{%idxprom7 = sext i32 %7 to i64}-> N174
N174 -{%arrayidx8 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arr1, i64 0, i64 %idxprom7}-> N175
N175 -{%arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N176
N176 -{store i32 %5, i32* %arrayidx9, align 4}-> N178
N178 -{%8 = load i32, i32* %j, align 4}-> N179
N179 -{%inc = add i32 %8, 1}-> N180
N180 -{store i32 %inc, i32* %j, align 4}-> N160
N160 -{%2 = load i32, i32* %j, align 4}-> N161
N161 -{%cmp2 = icmp slt i32 %2, 1}-> N162
N162 -{[%cmp2 = icmp slt i32 %2, 1]}-> N195
N162 -{[!(%cmp2 = icmp slt i32 %2, 1)]}-> N196
N196 -{%9 = load i32, i32* %i, align 4}-> N184
N184 -{%inc11 = add i32 %9, 1}-> N185
N185 -{store i32 %inc11, i32* %i, align 4}-> N155
N155 -{%1 = load i32, i32* %i, align 4}-> N156
N156 -{%cmp = icmp slt i32 %1, 1}-> N157
N157 -{[%cmp = icmp slt i32 %1, 1]}-> N193
N157 -{[!(%cmp = icmp slt i32 %1, 1)]}-> N194
N194 -{%arrayidx13 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arr1, i64 0, i64 1}-> N188
N188 -{%arrayidx14 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx13, i64 0, i64 1}-> N189
N189 -{%10 = load i32, i32* %arrayidx14, align 4}-> N190
N190 -{store i32 %10, i32* %k, align 4}-> N191
N191 -{ret void}-> N139
N139 -{Return edge from uninit_memory_access_005_bad to main}-> N137
N137 -{ret i32 0}-> N131
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N189
On edge  : N189 -{%10 = load i32, i32* %arrayidx14, align 4}-> N190
Message  : use of uninitialized variable
> Start from entry function: main, At N132 of Function main
> Entering function: uninit_memory_access_005_good, On N135 -> N198 (call uninit_memory_access_005_good)
> takes the true branch, At N215 of Function uninit_memory_access_005_good
> takes the true branch, At N220 of Function uninit_memory_access_005_good
> takes the true branch, At N220 of Function uninit_memory_access_005_good
> takes the false branch, At N220 of Function uninit_memory_access_005_good
> takes the true branch, At N215 of Function uninit_memory_access_005_good
> takes the true branch, At N220 of Function uninit_memory_access_005_good
> takes the true branch, At N220 of Function uninit_memory_access_005_good
> takes the false branch, At N220 of Function uninit_memory_access_005_good
> takes the false branch, At N215 of Function uninit_memory_access_005_good
> Leaving function: uninit_memory_access_005_good, On N197 -> N136 (Return edge from uninit_memory_access_005_good to main)
> Entering function: uninit_memory_access_005_bad, On N136 -> N140 (call uninit_memory_access_005_bad)
> takes the true branch, At N157 of Function uninit_memory_access_005_bad
> takes the true branch, At N162 of Function uninit_memory_access_005_bad
> takes the false branch, At N162 of Function uninit_memory_access_005_bad
> takes the false branch, At N157 of Function uninit_memory_access_005_bad
<Defect> : N189 -> N190: [%10 = load i32, i32* %arrayidx14, align 4]
N189 -> N190: [%10 = load i32, i32* %arrayidx14, align 4] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[457_uninit_memory_access_4.c 21] uninit_memory_access_005_bad 		[N189 -{%10 = load i32, i32* %arrayidx14, align 4}-> N190]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_memory_access_5.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
5 SCCs to deal with
SCC(1): [uninit_memory_access_006_func_001_good]
 +uninit_memory_access_006_func_001_good
SCC(1): [uninit_memory_access_006_good]
 +uninit_memory_access_006_good
SCC(1): [uninit_memory_access_006_func_001_bad]
 +uninit_memory_access_006_func_001_bad
SCC(1): [uninit_memory_access_006_bad]
 +uninit_memory_access_006_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [uninit_memory_access_006_good, main, uninit_memory_access_006_bad, uninit_memory_access_006_func_001_bad, uninit_memory_access_006_func_001_good]
Loops     [N291, N329]
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_memory_access_006_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_006_func_001_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_006_func_001_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_006_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
loop N291 in uninit_memory_access_006_func_001_bad: 
N291 -> P+ = [], P- = [] Point-To: L(uninit_memory_access_006_func_001_bad::dst.addr) -> [P(uninit_memory_access_006_func_001_bad::dst)[1_1], P(uninit_memory_access_006_func_001_bad::dst)[??], P(uninit_memory_access_006_func_001_bad::dst)]; L(uninit_memory_access_006_func_001_bad::src.addr) -> [P(uninit_memory_access_006_func_001_bad::src)[??], P(uninit_memory_access_006_func_001_bad::src), P(uninit_memory_access_006_func_001_bad::src)[1_1]]
N295 -> P+ = [], P- = [] Point-To: L(uninit_memory_access_006_func_001_bad::dst.addr) -> [P(uninit_memory_access_006_func_001_bad::dst)[1_1], P(uninit_memory_access_006_func_001_bad::dst)[??], P(uninit_memory_access_006_func_001_bad::dst)]; L(uninit_memory_access_006_func_001_bad::src.addr) -> [P(uninit_memory_access_006_func_001_bad::src)[??], P(uninit_memory_access_006_func_001_bad::src), P(uninit_memory_access_006_func_001_bad::src)[1_1]]
----
loop N329 in uninit_memory_access_006_func_001_good: 
N329 -> P+ = [], P- = [] Point-To: L(uninit_memory_access_006_func_001_good::dst.addr) -> [P(uninit_memory_access_006_func_001_good::dst)[1_1], P(uninit_memory_access_006_func_001_good::dst)[??], P(uninit_memory_access_006_func_001_good::dst)]; L(uninit_memory_access_006_func_001_good::src.addr) -> [P(uninit_memory_access_006_func_001_good::src)[??], P(uninit_memory_access_006_func_001_good::src), P(uninit_memory_access_006_func_001_good::src)[1_1]]
N333 -> P+ = [], P- = [] Point-To: L(uninit_memory_access_006_func_001_good::dst.addr) -> [P(uninit_memory_access_006_func_001_good::dst)[1_1], P(uninit_memory_access_006_func_001_good::dst)[??], P(uninit_memory_access_006_func_001_good::dst)]; L(uninit_memory_access_006_func_001_good::src.addr) -> [P(uninit_memory_access_006_func_001_good::src)[??], P(uninit_memory_access_006_func_001_good::src), P(uninit_memory_access_006_func_001_good::src)[1_1]]
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.051s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N258): +oo]
> [1/1] entry: main ()
N258 -{global: .str}-> N368
N368 -{%retval = alloca i32, align 4}-> N260
N260 -{store i32 0, i32* %retval, align 4}-> N261
N261 -{call uninit_memory_access_006_good}-> N355
N355 -{%str1 = alloca i8*, align 8}-> N357
N357 -{%str2 = alloca i8*, align 8}-> N359
N359 -{%call = call i8* @calloc(i64 25, i64 1, i64 @calloc)}-> N360
N359 -{%call = call i8* @calloc(i64 25, i64 1, i64 @calloc)}-> N360
N360 -{store i8* %call, i8** %str1, align 8}-> N362
N360 -{store i8* %call, i8** %str1, align 8}-> N362
N362 -{store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i8** %str2, align 8}-> N363
N362 -{store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i8** %str2, align 8}-> N363
N363 -{%0 = load i8*, i8** %str1, align 8}-> N364
N363 -{%0 = load i8*, i8** %str1, align 8}-> N364
N364 -{%1 = load i8*, i8** %str2, align 8}-> N365
N364 -{%1 = load i8*, i8** %str2, align 8}-> N365
N365 -{call uninit_memory_access_006_func_001_good}-> N317
N317 -{%dst.addr = alloca i8*, align 8}-> N319
N319 -{%src.addr = alloca i8*, align 8}-> N320
N320 -{store i8* %dst, i8** %dst.addr, align 8}-> N322
N322 -{store i8* %src, i8** %src.addr, align 8}-> N324
N324 -{%0 = load i8*, i8** %src.addr, align 8}-> N325
N325 -{%cmp = icmp eq i8* %0, null}-> N326
N326 -{[%cmp = icmp eq i8* %0, null]}-> N348
N326 -{[!(%cmp = icmp eq i8* %0, null)]}-> N329
N329 -{%1 = load i8*, i8** %src.addr, align 8}-> N330
N329 -{@}-> N329
N329 -{@}-> N333
N330 -{%2 = load i8, i8* %1, align 1}-> N331
N331 -{%conv = sext i8 %2 to i32}-> N332
N332 -{%cmp1 = icmp ne i32 %conv, 0}-> N333
N333 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N352
N333 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N353
N352 -{%3 = load i8*, i8** %src.addr, align 8}-> N335
N335 -{%4 = load i8, i8* %3, align 1}-> N336
N336 -{%5 = load i8*, i8** %dst.addr, align 8}-> N337
N337 -{store i8 %4, i8* %5, align 1}-> N338
N338 -{%6 = load i8*, i8** %src.addr, align 8}-> N339
N339 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N340
N340 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N341
N341 -{%7 = load i8*, i8** %dst.addr, align 8}-> N342
N342 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N343
N343 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N329
N329 -{%1 = load i8*, i8** %src.addr, align 8}-> N330
N330 -{%2 = load i8, i8* %1, align 1}-> N331
N331 -{%conv = sext i8 %2 to i32}-> N332
N332 -{%cmp1 = icmp ne i32 %conv, 0}-> N333
N333 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N352
N333 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N353
N352 -{%3 = load i8*, i8** %src.addr, align 8}-> N335
N335 -{%4 = load i8, i8* %3, align 1}-> N336
N336 -{%5 = load i8*, i8** %dst.addr, align 8}-> N337
N337 -{store i8 %4, i8* %5, align 1}-> N338
N338 -{%6 = load i8*, i8** %src.addr, align 8}-> N339
N339 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N340
N340 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N341
N341 -{%7 = load i8*, i8** %dst.addr, align 8}-> N342
N342 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N343
N343 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N329
N329 -{%1 = load i8*, i8** %src.addr, align 8}-> N330
N330 -{%2 = load i8, i8* %1, align 1}-> N331
N331 -{%conv = sext i8 %2 to i32}-> N332
N332 -{%cmp1 = icmp ne i32 %conv, 0}-> N333
N333 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N352
N333 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N353
N352 -{%3 = load i8*, i8** %src.addr, align 8}-> N335
N335 -{%4 = load i8, i8* %3, align 1}-> N336
N336 -{%5 = load i8*, i8** %dst.addr, align 8}-> N337
N337 -{store i8 %4, i8* %5, align 1}-> N338
N338 -{%6 = load i8*, i8** %src.addr, align 8}-> N339
N339 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N340
N340 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N341
N341 -{%7 = load i8*, i8** %dst.addr, align 8}-> N342
N342 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N343
N343 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N329
N329 -{%1 = load i8*, i8** %src.addr, align 8}-> N330
N330 -{%2 = load i8, i8* %1, align 1}-> N331
N331 -{%conv = sext i8 %2 to i32}-> N332
N332 -{%cmp1 = icmp ne i32 %conv, 0}-> N333
N333 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N352
N333 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N353
N352 -{%3 = load i8*, i8** %src.addr, align 8}-> N335
N335 -{%4 = load i8, i8* %3, align 1}-> N336
N336 -{%5 = load i8*, i8** %dst.addr, align 8}-> N337
N337 -{store i8 %4, i8* %5, align 1}-> N338
N338 -{%6 = load i8*, i8** %src.addr, align 8}-> N339
N339 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N340
N340 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N341
N341 -{%7 = load i8*, i8** %dst.addr, align 8}-> N342
N342 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N343
N343 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N329
N329 -{%1 = load i8*, i8** %src.addr, align 8}-> N330
N330 -{%2 = load i8, i8* %1, align 1}-> N331
N331 -{%conv = sext i8 %2 to i32}-> N332
N332 -{%cmp1 = icmp ne i32 %conv, 0}-> N333
N333 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N352
N333 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N353
N352 -{%3 = load i8*, i8** %src.addr, align 8}-> N335
N335 -{%4 = load i8, i8* %3, align 1}-> N336
N336 -{%5 = load i8*, i8** %dst.addr, align 8}-> N337
N337 -{store i8 %4, i8* %5, align 1}-> N338
N338 -{%6 = load i8*, i8** %src.addr, align 8}-> N339
N339 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N340
N340 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N341
N341 -{%7 = load i8*, i8** %dst.addr, align 8}-> N342
N342 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N343
N343 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N329
N329 -{%1 = load i8*, i8** %src.addr, align 8}-> N330
N330 -{%2 = load i8, i8* %1, align 1}-> N331
N331 -{%conv = sext i8 %2 to i32}-> N332
N332 -{%cmp1 = icmp ne i32 %conv, 0}-> N333
N333 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N352
N333 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N353
N352 -{%3 = load i8*, i8** %src.addr, align 8}-> N335
N335 -{%4 = load i8, i8* %3, align 1}-> N336
N336 -{%5 = load i8*, i8** %dst.addr, align 8}-> N337
N337 -{store i8 %4, i8* %5, align 1}-> N338
N338 -{%6 = load i8*, i8** %src.addr, align 8}-> N339
N339 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N340
N340 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N341
N341 -{%7 = load i8*, i8** %dst.addr, align 8}-> N342
N342 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N343
N343 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N329
N329 -{%1 = load i8*, i8** %src.addr, align 8}-> N330
N330 -{%2 = load i8, i8* %1, align 1}-> N331
N331 -{%conv = sext i8 %2 to i32}-> N332
N332 -{%cmp1 = icmp ne i32 %conv, 0}-> N333
N333 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N352
N333 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N353
N353 -{%8 = load i8*, i8** %dst.addr, align 8}-> N346
N346 -{store i8 0, i8* %8, align 1}-> N348
N348 -{ret void}-> N316
N316 -{Return edge from uninit_memory_access_006_func_001_good to uninit_memory_access_006_good}-> N366
N365 -{call uninit_memory_access_006_func_001_good}-> N317
N317 -{%dst.addr = alloca i8*, align 8}-> N319
N319 -{%src.addr = alloca i8*, align 8}-> N320
N320 -{store i8* %dst, i8** %dst.addr, align 8}-> N322
N322 -{store i8* %src, i8** %src.addr, align 8}-> N324
N324 -{%0 = load i8*, i8** %src.addr, align 8}-> N325
N325 -{%cmp = icmp eq i8* %0, null}-> N326
N326 -{[%cmp = icmp eq i8* %0, null]}-> N348
N326 -{[!(%cmp = icmp eq i8* %0, null)]}-> N329
N329 -{%1 = load i8*, i8** %src.addr, align 8}-> N330
N329 -{@}-> N329
N329 -{@}-> N333
N330 -{%2 = load i8, i8* %1, align 1}-> N331
N331 -{%conv = sext i8 %2 to i32}-> N332
N332 -{%cmp1 = icmp ne i32 %conv, 0}-> N333
N333 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N352
N333 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N353
N352 -{%3 = load i8*, i8** %src.addr, align 8}-> N335
N335 -{%4 = load i8, i8* %3, align 1}-> N336
N336 -{%5 = load i8*, i8** %dst.addr, align 8}-> N337
N337 -{store i8 %4, i8* %5, align 1}-> N338
N366 -{ret void}-> N354
N354 -{Return edge from uninit_memory_access_006_good to main}-> N262
N262 -{call uninit_memory_access_006_bad}-> N266
N266 -{%str1 = alloca i8*, align 8}-> N268
N268 -{%str2 = alloca i8*, align 8}-> N270
N270 -{%call = call i8* @calloc(i64 25, i64 1, i64 @calloc)}-> N271
N270 -{%call = call i8* @calloc(i64 25, i64 1, i64 @calloc)}-> N271
N271 -{store i8* %call, i8** %str1, align 8}-> N273
N271 -{store i8* %call, i8** %str1, align 8}-> N273
N273 -{%0 = load i8*, i8** %str1, align 8}-> N274
N273 -{%0 = load i8*, i8** %str1, align 8}-> N274
N274 -{%1 = load i8*, i8** %str2, align 8}-> N275
N274 -{%1 = load i8*, i8** %str2, align 8}-> N275
N275 -{call uninit_memory_access_006_func_001_bad}-> N279
N279 -{%dst.addr = alloca i8*, align 8}-> N281
N281 -{%src.addr = alloca i8*, align 8}-> N282
N282 -{store i8* %dst, i8** %dst.addr, align 8}-> N284
N284 -{store i8* %src, i8** %src.addr, align 8}-> N286
N286 -{%0 = load i8*, i8** %src.addr, align 8}-> N287
N287 -{%cmp = icmp eq i8* %0, null}-> N288
N288 -{[%cmp = icmp eq i8* %0, null]}-> N310
N288 -{[!(%cmp = icmp eq i8* %0, null)]}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N291 -{@}-> N291
N291 -{@}-> N295
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N305 -{store i8* %incdec.ptr3, i8** %dst.addr, align 8}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
N300 -{%6 = load i8*, i8** %src.addr, align 8}-> N301
N301 -{%incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1}-> N302
N302 -{store i8* %incdec.ptr, i8** %src.addr, align 8}-> N303
N303 -{%7 = load i8*, i8** %dst.addr, align 8}-> N304
N304 -{%incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1}-> N305
N275 -{call uninit_memory_access_006_func_001_bad}-> N279
N279 -{%dst.addr = alloca i8*, align 8}-> N281
N281 -{%src.addr = alloca i8*, align 8}-> N282
N282 -{store i8* %dst, i8** %dst.addr, align 8}-> N284
N284 -{store i8* %src, i8** %src.addr, align 8}-> N286
N286 -{%0 = load i8*, i8** %src.addr, align 8}-> N287
N287 -{%cmp = icmp eq i8* %0, null}-> N288
N288 -{[%cmp = icmp eq i8* %0, null]}-> N310
N288 -{[!(%cmp = icmp eq i8* %0, null)]}-> N291
N291 -{%1 = load i8*, i8** %src.addr, align 8}-> N292
N291 -{@}-> N291
N291 -{@}-> N295
N292 -{%2 = load i8, i8* %1, align 1}-> N293
N293 -{%conv = sext i8 %2 to i32}-> N294
N294 -{%cmp1 = icmp ne i32 %conv, 0}-> N295
N295 -{[%cmp1 = icmp ne i32 %conv, 0]}-> N314
N295 -{[!(%cmp1 = icmp ne i32 %conv, 0)]}-> N315
N314 -{%3 = load i8*, i8** %src.addr, align 8}-> N297
N297 -{%4 = load i8, i8* %3, align 1}-> N298
N298 -{%5 = load i8*, i8** %dst.addr, align 8}-> N299
N299 -{store i8 %4, i8* %5, align 1}-> N300
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N274
On edge  : N274 -{%1 = load i8*, i8** %str2, align 8}-> N275
Message  : use of uninitialized variable
> Start from entry function: main, At N258 of Function main
> Entering function: uninit_memory_access_006_good, On N261 -> N355 (call uninit_memory_access_006_good)
> Entering function: uninit_memory_access_006_func_001_good, On N365 -> N317 (call uninit_memory_access_006_func_001_good)
> takes the false branch, At N326 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the false branch, At N333 of Function uninit_memory_access_006_func_001_good
> Leaving function: uninit_memory_access_006_func_001_good, On N316 -> N366 (Return edge from uninit_memory_access_006_func_001_good to uninit_memory_access_006_good)
> Leaving function: uninit_memory_access_006_good, On N354 -> N262 (Return edge from uninit_memory_access_006_good to main)
> Entering function: uninit_memory_access_006_bad, On N262 -> N266 (call uninit_memory_access_006_bad)
<Defect> : N274 -> N275: [%1 = load i8*, i8** %str2, align 8]
N274 -> N275: [%1 = load i8*, i8** %str2, align 8] <--
-- end of trace --
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N292
On edge  : N292 -{%2 = load i8, i8* %1, align 1}-> N293
Message  : use of uninitialized variable
> Start from entry function: main, At N258 of Function main
> Entering function: uninit_memory_access_006_good, On N261 -> N355 (call uninit_memory_access_006_good)
> Entering function: uninit_memory_access_006_func_001_good, On N365 -> N317 (call uninit_memory_access_006_func_001_good)
> takes the false branch, At N326 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the false branch, At N333 of Function uninit_memory_access_006_func_001_good
> Leaving function: uninit_memory_access_006_func_001_good, On N316 -> N366 (Return edge from uninit_memory_access_006_func_001_good to uninit_memory_access_006_good)
> Leaving function: uninit_memory_access_006_good, On N354 -> N262 (Return edge from uninit_memory_access_006_good to main)
> Entering function: uninit_memory_access_006_bad, On N262 -> N266 (call uninit_memory_access_006_bad)
> Entering function: uninit_memory_access_006_func_001_bad, On N275 -> N279 (call uninit_memory_access_006_func_001_bad)
> takes the false branch, At N288 of Function uninit_memory_access_006_func_001_bad
<Defect> : N292 -> N293: [%2 = load i8, i8* %1, align 1]
N292 -> N293: [%2 = load i8, i8* %1, align 1] <--
-- end of trace --
-- start of trace --
Weakness : Null Pointer Dereference
At node  : N337
On edge  : N337 -{store i8 %4, i8* %5, align 1}-> N338
Message  : null pointer dereference
> Start from entry function: main, At N258 of Function main
> Entering function: uninit_memory_access_006_good, On N261 -> N355 (call uninit_memory_access_006_good)
> Entering function: uninit_memory_access_006_func_001_good, On N365 -> N317 (call uninit_memory_access_006_func_001_good)
> takes the false branch, At N326 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
<Defect> : N337 -> N338: [store i8 %4, i8* %5, align 1]
N337 -> N338: [store i8 %4, i8* %5, align 1] <--
-- end of trace --
-- start of trace --
Weakness : Null Pointer Dereference
At node  : N299
On edge  : N299 -{store i8 %4, i8* %5, align 1}-> N300
Message  : null pointer dereference
> Start from entry function: main, At N258 of Function main
> Entering function: uninit_memory_access_006_good, On N261 -> N355 (call uninit_memory_access_006_good)
> Entering function: uninit_memory_access_006_func_001_good, On N365 -> N317 (call uninit_memory_access_006_func_001_good)
> takes the false branch, At N326 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the false branch, At N333 of Function uninit_memory_access_006_func_001_good
> Leaving function: uninit_memory_access_006_func_001_good, On N316 -> N366 (Return edge from uninit_memory_access_006_func_001_good to uninit_memory_access_006_good)
> Leaving function: uninit_memory_access_006_good, On N354 -> N262 (Return edge from uninit_memory_access_006_good to main)
> Entering function: uninit_memory_access_006_bad, On N262 -> N266 (call uninit_memory_access_006_bad)
> Entering function: uninit_memory_access_006_func_001_bad, On N275 -> N279 (call uninit_memory_access_006_func_001_bad)
> takes the false branch, At N288 of Function uninit_memory_access_006_func_001_bad
> takes the true branch, At N295 of Function uninit_memory_access_006_func_001_bad
<Defect> : N299 -> N300: [store i8 %4, i8* %5, align 1]
N299 -> N300: [store i8 %4, i8* %5, align 1] <--
-- end of trace --
-- start of trace --
Weakness : Memory Leak
At node  : N354
On edge  : N354 -{Return edge from uninit_memory_access_006_good to main}-> N262
Message  : the heap object @H(uninit_memory_access_006_good::call) is not referenced any more
> Start from entry function: main, At N258 of Function main
> Entering function: uninit_memory_access_006_good, On N261 -> N355 (call uninit_memory_access_006_good)
> Entering function: uninit_memory_access_006_func_001_good, On N365 -> N317 (call uninit_memory_access_006_func_001_good)
> takes the false branch, At N326 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the true branch, At N333 of Function uninit_memory_access_006_func_001_good
> takes the false branch, At N333 of Function uninit_memory_access_006_func_001_good
> Leaving function: uninit_memory_access_006_func_001_good, On N316 -> N366 (Return edge from uninit_memory_access_006_func_001_good to uninit_memory_access_006_good)
<Defect> : N354 -> N262: [Return edge from uninit_memory_access_006_good to main]
N354 -> N262: [Return edge from uninit_memory_access_006_good to main] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 2
	[./457_uninit_memory_access_5.c 28] uninit_memory_access_006_bad 		[N274 -{%1 = load i8*, i8** %str2, align 8}-> N275]	(use of uninitialized variable)
	[./457_uninit_memory_access_5.c 15] uninit_memory_access_006_func_001_bad 		[N292 -{%2 = load i8, i8* %1, align 1}-> N293]	(use of uninitialized variable)

CWE_476(Null Pointer Dereference): 2
	[./457_uninit_memory_access_5.c 45] uninit_memory_access_006_func_001_good 		[N337 -{store i8 %4, i8* %5, align 1}-> N338]	(null pointer dereference)
	[./457_uninit_memory_access_5.c 17] uninit_memory_access_006_func_001_bad 		[N299 -{store i8 %4, i8* %5, align 1}-> N300]	(null pointer dereference)

CWE_401(Memory Leak): 1
	[./457_uninit_memory_access_5.c 60] uninit_memory_access_006_good 		[N354 -{Return edge from uninit_memory_access_006_good to main}-> N262]	(the heap object @H(uninit_memory_access_006_good::call) is not referenced any more)

Found 5 defects in all (21 duplicates ignored).
=====================================================
Phase status: SUCCESS


java.lang.AssertionError: unexpected number of reports 
Expected :2
Actual   :1
 <Click to see difference>


	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:743)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at cn.edu.thu.tsmart.helper.assertion.NumberAssert.is(NumberAssert.java:48)
	at cn.edu.thu.tsmart.helper.assertion.NumberAssert.is(NumberAssert.java:44)
	at cn.edu.thu.tsmart.integrated.ITC_457_Test.lambda$itc_457_memory_5$18(ITC_457_Test.java:262)
	at cn.edu.thu.tsmart.helper.assertion.ReportSetAssert.satisfy(ReportSetAssert.java:79)
	at cn.edu.thu.tsmart.integrated.ITC_457_Test.itc_457_memory_5(ITC_457_Test.java:261)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_memory_access_6.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
11 SCCs to deal with
SCC(1): [uninit_memory_access_007_func_002_good]
 +uninit_memory_access_007_func_002_good
SCC(1): [uninit_memory_access_007_func_004_good]
 +uninit_memory_access_007_func_004_good
SCC(1): [uninit_memory_access_007_func_001_good]
 +uninit_memory_access_007_func_001_good
SCC(1): [uninit_memory_access_007_func_003_good]
 +uninit_memory_access_007_func_003_good
SCC(1): [uninit_memory_access_007_good]
 +uninit_memory_access_007_good
SCC(1): [uninit_memory_access_007_func_003_bad]
 +uninit_memory_access_007_func_003_bad
SCC(1): [uninit_memory_access_007_func_001_bad]
 +uninit_memory_access_007_func_001_bad
SCC(1): [uninit_memory_access_007_func_004_bad]
 +uninit_memory_access_007_func_004_bad
SCC(1): [uninit_memory_access_007_func_002_bad]
 +uninit_memory_access_007_func_002_bad
SCC(1): [uninit_memory_access_007_bad]
 +uninit_memory_access_007_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [uninit_memory_access_007_func_003_bad, uninit_memory_access_007_func_003_good, uninit_memory_access_007_func_004_bad, uninit_memory_access_007_func_004_good, uninit_memory_access_007_good, main, uninit_memory_access_007_bad, uninit_memory_access_007_func_001_bad, uninit_memory_access_007_func_001_good, uninit_memory_access_007_func_002_bad, uninit_memory_access_007_func_002_good]
Loops     [N429, N462]
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_memory_access_007_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_007_func_001_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_007_func_001_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_007_func_002_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_007_func_002_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_007_func_003_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_007_func_003_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_007_func_004_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_007_func_004_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_007_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
loop N429 in uninit_memory_access_007_func_002_bad: 
N429 -> P+ = [], P- = [] Point-To: L(uninit_memory_access_007_func_002_bad::st.addr) -> [P(uninit_memory_access_007_func_002_bad::st)]
N431 -> P+ = [], P- = [] Point-To: L(uninit_memory_access_007_func_002_bad::st.addr) -> [P(uninit_memory_access_007_func_002_bad::st)]
----
loop N462 in uninit_memory_access_007_func_002_good: 
N462 -> P+ = [], P- = [] Point-To: L(uninit_memory_access_007_func_002_good::st.addr) -> [P(uninit_memory_access_007_func_002_good::st)]
N464 -> P+ = [], P- = [] Point-To: L(uninit_memory_access_007_func_002_good::st.addr) -> [P(uninit_memory_access_007_func_002_good::st)]
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.046s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N370): +oo]
> [1/1] entry: main ()
N370 -{%retval = alloca i32, align 4}-> N372
N372 -{store i32 0, i32* %retval, align 4}-> N373
N373 -{call uninit_memory_access_007_good}-> N545
N545 -{%st = alloca %struct.uninit_memory_access_007_s_001, align 4}-> N548
N548 -{call uninit_memory_access_007_func_001_good}-> N405
N405 -{%st.addr = alloca %struct.uninit_memory_access_007_s_001*, align 8}-> N407
N407 -{store %struct.uninit_memory_access_007_s_001* %st, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N409
N409 -{%0 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N410
N410 -{%1 = bitcast %struct.uninit_memory_access_007_s_001* %0 to i8*}-> N411
N411 -{call void @llvm.memset.p0i8.i64(i8* %1, i8* 0, i8* 52, i8* 4, i8* false, i8* @llvm.memset.p0i8.i64)}-> N412
N412 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N413
N413 -{%a = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 1}-> N414
N414 -{store i32 1, i32* %a, align 4}-> N415
N415 -{ret void}-> N404
N404 -{Return edge from uninit_memory_access_007_func_001_good to uninit_memory_access_007_good}-> N549
N549 -{call uninit_memory_access_007_func_002_good}-> N451
N451 -{%st.addr = alloca %struct.uninit_memory_access_007_s_001*, align 8}-> N453
N453 -{%temp = alloca i32, align 4}-> N454
N454 -{%i = alloca i32, align 4}-> N455
N455 -{store %struct.uninit_memory_access_007_s_001* %st, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N458
N458 -{store i32 0, i32* %temp, align 4}-> N460
N460 -{store i32 0, i32* %i, align 4}-> N462
N462 -{%0 = load i32, i32* %i, align 4}-> N463
N462 -{@}-> N462
N462 -{@}-> N464
N463 -{%cmp = icmp slt i32 %0, 10}-> N464
N464 -{[%cmp = icmp slt i32 %0, 10]}-> N481
N464 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N482
N481 -{%1 = load i32, i32* %i, align 4}-> N466
N466 -{%idxprom = sext i32 %1 to i64}-> N467
N467 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N468
N468 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N469
N469 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N470
N470 -{%3 = load i32, i32* %arrayidx, align 4}-> N471
N471 -{%4 = load i32, i32* %temp, align 4}-> N472
N472 -{%add = add i32 %4, %3}-> N473
N473 -{store i32 %add, i32* %temp, align 4}-> N475
N475 -{%5 = load i32, i32* %i, align 4}-> N476
N476 -{%inc = add i32 %5, 1}-> N477
N477 -{store i32 %inc, i32* %i, align 4}-> N462
N462 -{%0 = load i32, i32* %i, align 4}-> N463
N463 -{%cmp = icmp slt i32 %0, 10}-> N464
N464 -{[%cmp = icmp slt i32 %0, 10]}-> N481
N464 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N482
N481 -{%1 = load i32, i32* %i, align 4}-> N466
N466 -{%idxprom = sext i32 %1 to i64}-> N467
N467 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N468
N468 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N469
N469 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N470
N470 -{%3 = load i32, i32* %arrayidx, align 4}-> N471
N471 -{%4 = load i32, i32* %temp, align 4}-> N472
N472 -{%add = add i32 %4, %3}-> N473
N473 -{store i32 %add, i32* %temp, align 4}-> N475
N475 -{%5 = load i32, i32* %i, align 4}-> N476
N476 -{%inc = add i32 %5, 1}-> N477
N477 -{store i32 %inc, i32* %i, align 4}-> N462
N462 -{%0 = load i32, i32* %i, align 4}-> N463
N463 -{%cmp = icmp slt i32 %0, 10}-> N464
N464 -{[%cmp = icmp slt i32 %0, 10]}-> N481
N464 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N482
N481 -{%1 = load i32, i32* %i, align 4}-> N466
N466 -{%idxprom = sext i32 %1 to i64}-> N467
N467 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N468
N468 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N469
N469 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N470
N470 -{%3 = load i32, i32* %arrayidx, align 4}-> N471
N471 -{%4 = load i32, i32* %temp, align 4}-> N472
N472 -{%add = add i32 %4, %3}-> N473
N473 -{store i32 %add, i32* %temp, align 4}-> N475
N475 -{%5 = load i32, i32* %i, align 4}-> N476
N476 -{%inc = add i32 %5, 1}-> N477
N477 -{store i32 %inc, i32* %i, align 4}-> N462
N462 -{%0 = load i32, i32* %i, align 4}-> N463
N463 -{%cmp = icmp slt i32 %0, 10}-> N464
N464 -{[%cmp = icmp slt i32 %0, 10]}-> N481
N464 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N482
N481 -{%1 = load i32, i32* %i, align 4}-> N466
N466 -{%idxprom = sext i32 %1 to i64}-> N467
N467 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N468
N468 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N469
N469 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N470
N470 -{%3 = load i32, i32* %arrayidx, align 4}-> N471
N471 -{%4 = load i32, i32* %temp, align 4}-> N472
N472 -{%add = add i32 %4, %3}-> N473
N473 -{store i32 %add, i32* %temp, align 4}-> N475
N475 -{%5 = load i32, i32* %i, align 4}-> N476
N476 -{%inc = add i32 %5, 1}-> N477
N477 -{store i32 %inc, i32* %i, align 4}-> N462
N462 -{%0 = load i32, i32* %i, align 4}-> N463
N463 -{%cmp = icmp slt i32 %0, 10}-> N464
N464 -{[%cmp = icmp slt i32 %0, 10]}-> N481
N464 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N482
N481 -{%1 = load i32, i32* %i, align 4}-> N466
N466 -{%idxprom = sext i32 %1 to i64}-> N467
N467 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N468
N468 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N469
N469 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N470
N470 -{%3 = load i32, i32* %arrayidx, align 4}-> N471
N471 -{%4 = load i32, i32* %temp, align 4}-> N472
N472 -{%add = add i32 %4, %3}-> N473
N473 -{store i32 %add, i32* %temp, align 4}-> N475
N475 -{%5 = load i32, i32* %i, align 4}-> N476
N476 -{%inc = add i32 %5, 1}-> N477
N477 -{store i32 %inc, i32* %i, align 4}-> N462
N462 -{%0 = load i32, i32* %i, align 4}-> N463
N463 -{%cmp = icmp slt i32 %0, 10}-> N464
N464 -{[%cmp = icmp slt i32 %0, 10]}-> N481
N464 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N482
N481 -{%1 = load i32, i32* %i, align 4}-> N466
N466 -{%idxprom = sext i32 %1 to i64}-> N467
N467 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N468
N468 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N469
N469 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N470
N470 -{%3 = load i32, i32* %arrayidx, align 4}-> N471
N471 -{%4 = load i32, i32* %temp, align 4}-> N472
N472 -{%add = add i32 %4, %3}-> N473
N473 -{store i32 %add, i32* %temp, align 4}-> N475
N475 -{%5 = load i32, i32* %i, align 4}-> N476
N476 -{%inc = add i32 %5, 1}-> N477
N477 -{store i32 %inc, i32* %i, align 4}-> N462
N462 -{%0 = load i32, i32* %i, align 4}-> N463
N463 -{%cmp = icmp slt i32 %0, 10}-> N464
N464 -{[%cmp = icmp slt i32 %0, 10]}-> N481
N464 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N482
N481 -{%1 = load i32, i32* %i, align 4}-> N466
N466 -{%idxprom = sext i32 %1 to i64}-> N467
N467 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N468
N468 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N469
N469 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N470
N470 -{%3 = load i32, i32* %arrayidx, align 4}-> N471
N471 -{%4 = load i32, i32* %temp, align 4}-> N472
N472 -{%add = add i32 %4, %3}-> N473
N473 -{store i32 %add, i32* %temp, align 4}-> N475
N475 -{%5 = load i32, i32* %i, align 4}-> N476
N476 -{%inc = add i32 %5, 1}-> N477
N477 -{store i32 %inc, i32* %i, align 4}-> N462
N462 -{%0 = load i32, i32* %i, align 4}-> N463
N463 -{%cmp = icmp slt i32 %0, 10}-> N464
N464 -{[%cmp = icmp slt i32 %0, 10]}-> N481
N464 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N482
N481 -{%1 = load i32, i32* %i, align 4}-> N466
N466 -{%idxprom = sext i32 %1 to i64}-> N467
N467 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N468
N468 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N469
N469 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N470
N470 -{%3 = load i32, i32* %arrayidx, align 4}-> N471
N471 -{%4 = load i32, i32* %temp, align 4}-> N472
N472 -{%add = add i32 %4, %3}-> N473
N473 -{store i32 %add, i32* %temp, align 4}-> N475
N475 -{%5 = load i32, i32* %i, align 4}-> N476
N476 -{%inc = add i32 %5, 1}-> N477
N477 -{store i32 %inc, i32* %i, align 4}-> N462
N462 -{%0 = load i32, i32* %i, align 4}-> N463
N463 -{%cmp = icmp slt i32 %0, 10}-> N464
N464 -{[%cmp = icmp slt i32 %0, 10]}-> N481
N464 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N482
N481 -{%1 = load i32, i32* %i, align 4}-> N466
N466 -{%idxprom = sext i32 %1 to i64}-> N467
N467 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N468
N468 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N469
N469 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N470
N470 -{%3 = load i32, i32* %arrayidx, align 4}-> N471
N471 -{%4 = load i32, i32* %temp, align 4}-> N472
N472 -{%add = add i32 %4, %3}-> N473
N473 -{store i32 %add, i32* %temp, align 4}-> N475
N475 -{%5 = load i32, i32* %i, align 4}-> N476
N476 -{%inc = add i32 %5, 1}-> N477
N477 -{store i32 %inc, i32* %i, align 4}-> N462
N462 -{%0 = load i32, i32* %i, align 4}-> N463
N463 -{%cmp = icmp slt i32 %0, 10}-> N464
N464 -{[%cmp = icmp slt i32 %0, 10]}-> N481
N464 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N482
N481 -{%1 = load i32, i32* %i, align 4}-> N466
N466 -{%idxprom = sext i32 %1 to i64}-> N467
N467 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N468
N468 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N469
N469 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N470
N470 -{%3 = load i32, i32* %arrayidx, align 4}-> N471
N471 -{%4 = load i32, i32* %temp, align 4}-> N472
N472 -{%add = add i32 %4, %3}-> N473
N473 -{store i32 %add, i32* %temp, align 4}-> N475
N475 -{%5 = load i32, i32* %i, align 4}-> N476
N476 -{%inc = add i32 %5, 1}-> N477
N477 -{store i32 %inc, i32* %i, align 4}-> N462
N462 -{%0 = load i32, i32* %i, align 4}-> N463
N463 -{%cmp = icmp slt i32 %0, 10}-> N464
N464 -{[%cmp = icmp slt i32 %0, 10]}-> N481
N464 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N482
N482 -{ret void}-> N450
N450 -{Return edge from uninit_memory_access_007_func_002_good to uninit_memory_access_007_good}-> N550
N550 -{call uninit_memory_access_007_func_003_good}-> N497
N497 -{%st.addr = alloca %struct.uninit_memory_access_007_s_001*, align 8}-> N499
N499 -{store %struct.uninit_memory_access_007_s_001* %st, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N501
N501 -{%0 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N502
N502 -{%b = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %0, i32 0, i32 2}-> N503
N503 -{store i32 10, i32* %b, align 4}-> N504
N504 -{%1 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N505
N505 -{%c = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %1, i32 0, i32 3}-> N506
N506 -{store i32 20, i32* %c, align 4}-> N507
N507 -{ret void}-> N496
N496 -{Return edge from uninit_memory_access_007_func_003_good to uninit_memory_access_007_good}-> N551
N551 -{%a = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %st, i32 0, i32 1}-> N552
N552 -{%0 = load i32, i32* %a, align 4}-> N553
N553 -{call uninit_memory_access_007_func_004_good}-> N527
N527 -{%num.addr = alloca i32, align 4}-> N529
N529 -{%temp = alloca i32, align 4}-> N530
N530 -{store i32 %num, i32* %num.addr, align 4}-> N533
N533 -{store i32 0, i32* %temp, align 4}-> N534
N534 -{%0 = load i32, i32* %num.addr, align 4}-> N535
N535 -{%cmp = icmp ne i32 %0, 0}-> N536
N536 -{[%cmp = icmp ne i32 %0, 0]}-> N542
N536 -{[!(%cmp = icmp ne i32 %0, 0)]}-> N540
N542 -{%1 = load i32, i32* %num.addr, align 4}-> N538
N538 -{store i32 %1, i32* %temp, align 4}-> N540
N540 -{ret void}-> N526
N526 -{Return edge from uninit_memory_access_007_func_004_good to uninit_memory_access_007_good}-> N554
N554 -{ret void}-> N544
N544 -{Return edge from uninit_memory_access_007_good to main}-> N374
N374 -{call uninit_memory_access_007_bad}-> N378
N378 -{%st = alloca %struct.uninit_memory_access_007_s_001, align 4}-> N381
N381 -{call uninit_memory_access_007_func_001_bad}-> N390
N390 -{%st.addr = alloca %struct.uninit_memory_access_007_s_001*, align 8}-> N392
N392 -{store %struct.uninit_memory_access_007_s_001* %st, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N394
N394 -{%0 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N395
N395 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %0, i32 0, i32 0}-> N396
N396 -{%arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i32 0, i32 0}-> N397
N397 -{%1 = bitcast i32* %arraydecay to i8*}-> N398
N398 -{call void @llvm.memset.p0i8.i64(i8* %1, i8* 0, i8* 1, i8* 4, i8* false, i8* @llvm.memset.p0i8.i64)}-> N399
N399 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N400
N400 -{%a = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 1}-> N401
N401 -{store i32 1, i32* %a, align 4}-> N402
N402 -{ret void}-> N389
N389 -{Return edge from uninit_memory_access_007_func_001_bad to uninit_memory_access_007_bad}-> N382
N382 -{call uninit_memory_access_007_func_002_bad}-> N418
N418 -{%st.addr = alloca %struct.uninit_memory_access_007_s_001*, align 8}-> N420
N420 -{%temp = alloca i32, align 4}-> N421
N421 -{%i = alloca i32, align 4}-> N422
N422 -{store %struct.uninit_memory_access_007_s_001* %st, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N425
N425 -{store i32 0, i32* %temp, align 4}-> N427
N427 -{store i32 0, i32* %i, align 4}-> N429
N429 -{%0 = load i32, i32* %i, align 4}-> N430
N429 -{@}-> N429
N429 -{@}-> N431
N430 -{%cmp = icmp slt i32 %0, 10}-> N431
N431 -{[%cmp = icmp slt i32 %0, 10]}-> N448
N431 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N449
N448 -{%1 = load i32, i32* %i, align 4}-> N433
N433 -{%idxprom = sext i32 %1 to i64}-> N434
N434 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N435
N435 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N436
N436 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N437
N437 -{%3 = load i32, i32* %arrayidx, align 4}-> N438
N438 -{%4 = load i32, i32* %temp, align 4}-> N439
N439 -{%add = add i32 %4, %3}-> N440
N440 -{store i32 %add, i32* %temp, align 4}-> N442
N442 -{%5 = load i32, i32* %i, align 4}-> N443
N443 -{%inc = add i32 %5, 1}-> N444
N444 -{store i32 %inc, i32* %i, align 4}-> N429
N429 -{%0 = load i32, i32* %i, align 4}-> N430
N430 -{%cmp = icmp slt i32 %0, 10}-> N431
N431 -{[%cmp = icmp slt i32 %0, 10]}-> N448
N431 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N449
N448 -{%1 = load i32, i32* %i, align 4}-> N433
N433 -{%idxprom = sext i32 %1 to i64}-> N434
N434 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N435
N435 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N436
N436 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N437
N437 -{%3 = load i32, i32* %arrayidx, align 4}-> N438
N438 -{%4 = load i32, i32* %temp, align 4}-> N439
N439 -{%add = add i32 %4, %3}-> N440
N440 -{store i32 %add, i32* %temp, align 4}-> N442
N442 -{%5 = load i32, i32* %i, align 4}-> N443
N443 -{%inc = add i32 %5, 1}-> N444
N444 -{store i32 %inc, i32* %i, align 4}-> N429
N429 -{%0 = load i32, i32* %i, align 4}-> N430
N430 -{%cmp = icmp slt i32 %0, 10}-> N431
N431 -{[%cmp = icmp slt i32 %0, 10]}-> N448
N431 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N449
N448 -{%1 = load i32, i32* %i, align 4}-> N433
N433 -{%idxprom = sext i32 %1 to i64}-> N434
N434 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N435
N435 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N436
N436 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N437
N437 -{%3 = load i32, i32* %arrayidx, align 4}-> N438
N438 -{%4 = load i32, i32* %temp, align 4}-> N439
N439 -{%add = add i32 %4, %3}-> N440
N440 -{store i32 %add, i32* %temp, align 4}-> N442
N442 -{%5 = load i32, i32* %i, align 4}-> N443
N443 -{%inc = add i32 %5, 1}-> N444
N444 -{store i32 %inc, i32* %i, align 4}-> N429
N429 -{%0 = load i32, i32* %i, align 4}-> N430
N430 -{%cmp = icmp slt i32 %0, 10}-> N431
N431 -{[%cmp = icmp slt i32 %0, 10]}-> N448
N431 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N449
N448 -{%1 = load i32, i32* %i, align 4}-> N433
N433 -{%idxprom = sext i32 %1 to i64}-> N434
N434 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N435
N435 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N436
N436 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N437
N437 -{%3 = load i32, i32* %arrayidx, align 4}-> N438
N438 -{%4 = load i32, i32* %temp, align 4}-> N439
N439 -{%add = add i32 %4, %3}-> N440
N440 -{store i32 %add, i32* %temp, align 4}-> N442
N442 -{%5 = load i32, i32* %i, align 4}-> N443
N443 -{%inc = add i32 %5, 1}-> N444
N444 -{store i32 %inc, i32* %i, align 4}-> N429
N429 -{%0 = load i32, i32* %i, align 4}-> N430
N430 -{%cmp = icmp slt i32 %0, 10}-> N431
N431 -{[%cmp = icmp slt i32 %0, 10]}-> N448
N431 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N449
N448 -{%1 = load i32, i32* %i, align 4}-> N433
N433 -{%idxprom = sext i32 %1 to i64}-> N434
N434 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N435
N435 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N436
N436 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N437
N437 -{%3 = load i32, i32* %arrayidx, align 4}-> N438
N438 -{%4 = load i32, i32* %temp, align 4}-> N439
N439 -{%add = add i32 %4, %3}-> N440
N440 -{store i32 %add, i32* %temp, align 4}-> N442
N442 -{%5 = load i32, i32* %i, align 4}-> N443
N443 -{%inc = add i32 %5, 1}-> N444
N444 -{store i32 %inc, i32* %i, align 4}-> N429
N429 -{%0 = load i32, i32* %i, align 4}-> N430
N430 -{%cmp = icmp slt i32 %0, 10}-> N431
N431 -{[%cmp = icmp slt i32 %0, 10]}-> N448
N431 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N449
N448 -{%1 = load i32, i32* %i, align 4}-> N433
N433 -{%idxprom = sext i32 %1 to i64}-> N434
N434 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N435
N435 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N436
N436 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N437
N437 -{%3 = load i32, i32* %arrayidx, align 4}-> N438
N438 -{%4 = load i32, i32* %temp, align 4}-> N439
N439 -{%add = add i32 %4, %3}-> N440
N440 -{store i32 %add, i32* %temp, align 4}-> N442
N442 -{%5 = load i32, i32* %i, align 4}-> N443
N443 -{%inc = add i32 %5, 1}-> N444
N444 -{store i32 %inc, i32* %i, align 4}-> N429
N429 -{%0 = load i32, i32* %i, align 4}-> N430
N430 -{%cmp = icmp slt i32 %0, 10}-> N431
N431 -{[%cmp = icmp slt i32 %0, 10]}-> N448
N431 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N449
N448 -{%1 = load i32, i32* %i, align 4}-> N433
N433 -{%idxprom = sext i32 %1 to i64}-> N434
N434 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N435
N435 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N436
N436 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N437
N437 -{%3 = load i32, i32* %arrayidx, align 4}-> N438
N438 -{%4 = load i32, i32* %temp, align 4}-> N439
N439 -{%add = add i32 %4, %3}-> N440
N440 -{store i32 %add, i32* %temp, align 4}-> N442
N442 -{%5 = load i32, i32* %i, align 4}-> N443
N443 -{%inc = add i32 %5, 1}-> N444
N444 -{store i32 %inc, i32* %i, align 4}-> N429
N429 -{%0 = load i32, i32* %i, align 4}-> N430
N430 -{%cmp = icmp slt i32 %0, 10}-> N431
N431 -{[%cmp = icmp slt i32 %0, 10]}-> N448
N431 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N449
N448 -{%1 = load i32, i32* %i, align 4}-> N433
N433 -{%idxprom = sext i32 %1 to i64}-> N434
N434 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N435
N435 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N436
N436 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N437
N437 -{%3 = load i32, i32* %arrayidx, align 4}-> N438
N438 -{%4 = load i32, i32* %temp, align 4}-> N439
N439 -{%add = add i32 %4, %3}-> N440
N440 -{store i32 %add, i32* %temp, align 4}-> N442
N442 -{%5 = load i32, i32* %i, align 4}-> N443
N443 -{%inc = add i32 %5, 1}-> N444
N444 -{store i32 %inc, i32* %i, align 4}-> N429
N429 -{%0 = load i32, i32* %i, align 4}-> N430
N430 -{%cmp = icmp slt i32 %0, 10}-> N431
N431 -{[%cmp = icmp slt i32 %0, 10]}-> N448
N431 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N449
N448 -{%1 = load i32, i32* %i, align 4}-> N433
N433 -{%idxprom = sext i32 %1 to i64}-> N434
N434 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N435
N435 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N436
N436 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N437
N437 -{%3 = load i32, i32* %arrayidx, align 4}-> N438
N438 -{%4 = load i32, i32* %temp, align 4}-> N439
N439 -{%add = add i32 %4, %3}-> N440
N440 -{store i32 %add, i32* %temp, align 4}-> N442
N442 -{%5 = load i32, i32* %i, align 4}-> N443
N443 -{%inc = add i32 %5, 1}-> N444
N444 -{store i32 %inc, i32* %i, align 4}-> N429
N429 -{%0 = load i32, i32* %i, align 4}-> N430
N430 -{%cmp = icmp slt i32 %0, 10}-> N431
N431 -{[%cmp = icmp slt i32 %0, 10]}-> N448
N431 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N449
N448 -{%1 = load i32, i32* %i, align 4}-> N433
N433 -{%idxprom = sext i32 %1 to i64}-> N434
N434 -{%2 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N435
N435 -{%arr = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %2, i32 0, i32 0}-> N436
N436 -{%arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %idxprom}-> N437
N437 -{%3 = load i32, i32* %arrayidx, align 4}-> N438
N438 -{%4 = load i32, i32* %temp, align 4}-> N439
N439 -{%add = add i32 %4, %3}-> N440
N440 -{store i32 %add, i32* %temp, align 4}-> N442
N442 -{%5 = load i32, i32* %i, align 4}-> N443
N443 -{%inc = add i32 %5, 1}-> N444
N444 -{store i32 %inc, i32* %i, align 4}-> N429
N429 -{%0 = load i32, i32* %i, align 4}-> N430
N430 -{%cmp = icmp slt i32 %0, 10}-> N431
N431 -{[%cmp = icmp slt i32 %0, 10]}-> N448
N431 -{[!(%cmp = icmp slt i32 %0, 10)]}-> N449
N449 -{ret void}-> N417
N417 -{Return edge from uninit_memory_access_007_func_002_bad to uninit_memory_access_007_bad}-> N383
N383 -{call uninit_memory_access_007_func_003_bad}-> N484
N484 -{%st.addr = alloca %struct.uninit_memory_access_007_s_001*, align 8}-> N486
N486 -{store %struct.uninit_memory_access_007_s_001* %st, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N488
N488 -{%0 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N489
N489 -{%b = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %0, i32 0, i32 2}-> N490
N490 -{store i32 10, i32* %b, align 4}-> N491
N491 -{%1 = load %struct.uninit_memory_access_007_s_001*, %struct.uninit_memory_access_007_s_001** %st.addr, align 8}-> N492
N492 -{%c = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %1, i32 0, i32 3}-> N493
N493 -{store i32 20, i32* %c, align 4}-> N494
N494 -{ret void}-> N483
N483 -{Return edge from uninit_memory_access_007_func_003_bad to uninit_memory_access_007_bad}-> N384
N384 -{%a = getelementptr inbounds %struct.uninit_memory_access_007_s_001, %struct.uninit_memory_access_007_s_001* %st, i32 0, i32 1}-> N385
N385 -{%0 = load i32, i32* %a, align 4}-> N386
N386 -{call uninit_memory_access_007_func_004_bad}-> N510
N510 -{%num.addr = alloca i32, align 4}-> N512
N512 -{%temp = alloca i32, align 4}-> N513
N513 -{store i32 %num, i32* %num.addr, align 4}-> N516
N516 -{%0 = load i32, i32* %num.addr, align 4}-> N517
N517 -{%cmp = icmp ne i32 %0, 0}-> N518
N518 -{[%cmp = icmp ne i32 %0, 0]}-> N524
N518 -{[!(%cmp = icmp ne i32 %0, 0)]}-> N522
N524 -{%1 = load i32, i32* %num.addr, align 4}-> N520
N520 -{store i32 %1, i32* %temp, align 4}-> N522
N522 -{ret void}-> N509
N509 -{Return edge from uninit_memory_access_007_func_004_bad to uninit_memory_access_007_bad}-> N387
N387 -{ret void}-> N377
N377 -{Return edge from uninit_memory_access_007_bad to main}-> N375
N375 -{ret i32 0}-> N369
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N437
On edge  : N437 -{%3 = load i32, i32* %arrayidx, align 4}-> N438
Message  : use of uninitialized variable
> Start from entry function: main, At N370 of Function main
> Entering function: uninit_memory_access_007_good, On N373 -> N545 (call uninit_memory_access_007_good)
> Entering function: uninit_memory_access_007_func_001_good, On N548 -> N405 (call uninit_memory_access_007_func_001_good)
> Leaving function: uninit_memory_access_007_func_001_good, On N404 -> N549 (Return edge from uninit_memory_access_007_func_001_good to uninit_memory_access_007_good)
> Entering function: uninit_memory_access_007_func_002_good, On N549 -> N451 (call uninit_memory_access_007_func_002_good)
> takes the true branch, At N464 of Function uninit_memory_access_007_func_002_good
> takes the true branch, At N464 of Function uninit_memory_access_007_func_002_good
> takes the true branch, At N464 of Function uninit_memory_access_007_func_002_good
> takes the true branch, At N464 of Function uninit_memory_access_007_func_002_good
> takes the true branch, At N464 of Function uninit_memory_access_007_func_002_good
> takes the true branch, At N464 of Function uninit_memory_access_007_func_002_good
> takes the true branch, At N464 of Function uninit_memory_access_007_func_002_good
> takes the true branch, At N464 of Function uninit_memory_access_007_func_002_good
> takes the true branch, At N464 of Function uninit_memory_access_007_func_002_good
> takes the true branch, At N464 of Function uninit_memory_access_007_func_002_good
> takes the false branch, At N464 of Function uninit_memory_access_007_func_002_good
> Leaving function: uninit_memory_access_007_func_002_good, On N450 -> N550 (Return edge from uninit_memory_access_007_func_002_good to uninit_memory_access_007_good)
> Entering function: uninit_memory_access_007_func_003_good, On N550 -> N497 (call uninit_memory_access_007_func_003_good)
> Leaving function: uninit_memory_access_007_func_003_good, On N496 -> N551 (Return edge from uninit_memory_access_007_func_003_good to uninit_memory_access_007_good)
> Entering function: uninit_memory_access_007_func_004_good, On N553 -> N527 (call uninit_memory_access_007_func_004_good)
> takes the true branch, At N536 of Function uninit_memory_access_007_func_004_good
> Leaving function: uninit_memory_access_007_func_004_good, On N526 -> N554 (Return edge from uninit_memory_access_007_func_004_good to uninit_memory_access_007_good)
> Leaving function: uninit_memory_access_007_good, On N544 -> N374 (Return edge from uninit_memory_access_007_good to main)
> Entering function: uninit_memory_access_007_bad, On N374 -> N378 (call uninit_memory_access_007_bad)
> Entering function: uninit_memory_access_007_func_001_bad, On N381 -> N390 (call uninit_memory_access_007_func_001_bad)
> Leaving function: uninit_memory_access_007_func_001_bad, On N389 -> N382 (Return edge from uninit_memory_access_007_func_001_bad to uninit_memory_access_007_bad)
> Entering function: uninit_memory_access_007_func_002_bad, On N382 -> N418 (call uninit_memory_access_007_func_002_bad)
> takes the true branch, At N431 of Function uninit_memory_access_007_func_002_bad
<Defect> : N437 -> N438: [%3 = load i32, i32* %arrayidx, align 4]
N437 -> N438: [%3 = load i32, i32* %arrayidx, align 4] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_memory_access_6.c 27] uninit_memory_access_007_func_002_bad 		[N437 -{%3 = load i32, i32* %arrayidx, align 4}-> N438]	(use of uninitialized variable)

Found 1 defects in all (9 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_memory_access_7.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
5 SCCs to deal with
SCC(1): [uninit_memory_access_008_func_001_good]
 +uninit_memory_access_008_func_001_good
SCC(1): [uninit_memory_access_008_good]
 +uninit_memory_access_008_good
SCC(1): [uninit_memory_access_008_func_001_bad]
 +uninit_memory_access_008_func_001_bad
SCC(1): [uninit_memory_access_008_bad]
 +uninit_memory_access_008_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [uninit_memory_access_008_good, main, uninit_memory_access_008_bad, uninit_memory_access_008_func_001_bad, uninit_memory_access_008_func_001_good]
Loops     []
----
function: main
P+ = [] 
P- = [H(uninit_memory_access_008_func_001_good::call)] 
Point-To:

Ret-Value: R
----
function: uninit_memory_access_008_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_memory_access_008_func_001_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: H(uninit_memory_access_008_func_001_bad::call)
----
function: uninit_memory_access_008_func_001_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: H(uninit_memory_access_008_func_001_good::call)
----
function: uninit_memory_access_008_good
P+ = [] 
P- = [H(uninit_memory_access_008_func_001_good::call)] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.021s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N557): +oo]
> [1/1] entry: main ()
N557 -{%retval = alloca i32, align 4}-> N559
N559 -{store i32 0, i32* %retval, align 4}-> N560
N560 -{call uninit_memory_access_008_good}-> N630
N630 -{%s = alloca %struct.uninit_memory_access_008_s_001*, align 8}-> N633
N633 -{store %struct.uninit_memory_access_008_s_001* null, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N634
N634 -{call uninit_memory_access_008_func_001_good}-> N602
N602 -{%ret = alloca %struct.uninit_memory_access_008_s_001*, align 8}-> N605
N605 -{%call = call i8* @malloc(i64 20, i64 @malloc)}-> N606
N605 -{%call = call i8* @malloc(i64 20, i64 @malloc)}-> N606
N606 -{%0 = bitcast i8* %call to %struct.uninit_memory_access_008_s_001*}-> N607
N606 -{%0 = bitcast i8* %call to %struct.uninit_memory_access_008_s_001*}-> N607
N607 -{store %struct.uninit_memory_access_008_s_001* %0, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N608
N607 -{store %struct.uninit_memory_access_008_s_001* %0, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N608
N608 -{%1 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N609
N608 -{%1 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N609
N609 -{%cmp = icmp ne %struct.uninit_memory_access_008_s_001* %1, null}-> N610
N609 -{%cmp = icmp ne %struct.uninit_memory_access_008_s_001* %1, null}-> N610
N610 -{[%cmp = icmp ne %struct.uninit_memory_access_008_s_001* %1, null]}-> N627
N610 -{[!(%cmp = icmp ne %struct.uninit_memory_access_008_s_001* %1, null)]}-> N624
N610 -{[%cmp = icmp ne %struct.uninit_memory_access_008_s_001* %1, null]}-> N627
N610 -{[!(%cmp = icmp ne %struct.uninit_memory_access_008_s_001* %1, null)]}-> N624
N627 -{%2 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N612
N612 -{%3 = bitcast %struct.uninit_memory_access_008_s_001* %2 to i16*}-> N613
N613 -{%bf.load = load i16, i16* %3, align 4}-> N614
N614 -{%bf.clear = and i16 %bf.load, -128}-> N615
N615 -{%bf.set = or i16 %bf.clear, 15}-> N616
N616 -{store i16 %bf.set, i16* %3, align 4}-> N617
N617 -{%4 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N618
N618 -{%5 = bitcast %struct.uninit_memory_access_008_s_001* %4 to i16*}-> N619
N619 -{%bf.load1 = load i16, i16* %5, align 4}-> N620
N620 -{%bf.clear2 = and i16 %bf.load1, -16257}-> N621
N621 -{%bf.set3 = or i16 %bf.clear2, 1920}-> N622
N622 -{store i16 %bf.set3, i16* %5, align 4}-> N624
N624 -{%6 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N625
N624 -{%6 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N625
N625 -{ret %struct.uninit_memory_access_008_s_001* %6}-> N601
N625 -{ret %struct.uninit_memory_access_008_s_001* %6}-> N601
N601 -{Return edge from uninit_memory_access_008_func_001_good to uninit_memory_access_008_good}-> N635
N601 -{Return edge from uninit_memory_access_008_func_001_good to uninit_memory_access_008_good}-> N635
N635 -{store %struct.uninit_memory_access_008_s_001* %call, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N636
N635 -{store %struct.uninit_memory_access_008_s_001* %call, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N636
N636 -{%0 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N637
N636 -{%0 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N637
N637 -{%cmp = icmp ne %struct.uninit_memory_access_008_s_001* %0, null}-> N638
N637 -{%cmp = icmp ne %struct.uninit_memory_access_008_s_001* %0, null}-> N638
N638 -{[%cmp = icmp ne %struct.uninit_memory_access_008_s_001* %0, null]}-> N664
N638 -{[!(%cmp = icmp ne %struct.uninit_memory_access_008_s_001* %0, null)]}-> N662
N638 -{[%cmp = icmp ne %struct.uninit_memory_access_008_s_001* %0, null]}-> N664
N638 -{[!(%cmp = icmp ne %struct.uninit_memory_access_008_s_001* %0, null)]}-> N662
N664 -{%1 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N640
N640 -{%2 = bitcast %struct.uninit_memory_access_008_s_001* %1 to i16*}-> N641
N641 -{%bf.load = load i16, i16* %2, align 4}-> N642
N642 -{%bf.shl = shl i16 %bf.load, 9}-> N643
N643 -{%bf.ashr = ashr i16 %bf.shl, 9}-> N644
N644 -{%bf.cast = sext i16 %bf.ashr to i32}-> N645
N645 -{%add = add i32 %bf.cast, 10}-> N646
N646 -{%3 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N647
N647 -{%4 = bitcast %struct.uninit_memory_access_008_s_001* %3 to i16*}-> N648
N648 -{%5 = trunc i32 %add to i16}-> N649
N649 -{%bf.load1 = load i16, i16* %4, align 4}-> N650
N650 -{%bf.value = and i16 %5, 127}-> N651
N651 -{%bf.shl2 = shl i16 %bf.value, 7}-> N652
N652 -{%bf.clear = and i16 %bf.load1, -16257}-> N653
N653 -{%bf.set = or i16 %bf.clear, %bf.shl2}-> N654
N654 -{store i16 %bf.set, i16* %4, align 4}-> N655
N655 -{%bf.result.shl = shl i16 %bf.value, 9}-> N656
N656 -{%bf.result.ashr = ashr i16 %bf.result.shl, 9}-> N657
N657 -{%bf.result.cast = sext i16 %bf.result.ashr to i32}-> N658
N658 -{%6 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N659
N659 -{%7 = bitcast %struct.uninit_memory_access_008_s_001* %6 to i8*}-> N660
N660 -{call void @free(i8* %7, i8* @free)}-> N662
N662 -{ret void}-> N629
N662 -{ret void}-> N629
N629 -{Return edge from uninit_memory_access_008_good to main}-> N561
N629 -{Return edge from uninit_memory_access_008_good to main}-> N561
N561 -{call uninit_memory_access_008_bad}-> N565
N565 -{%s = alloca %struct.uninit_memory_access_008_s_001*, align 8}-> N568
N568 -{store %struct.uninit_memory_access_008_s_001* null, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N569
N569 -{call uninit_memory_access_008_func_001_bad}-> N592
N592 -{%ret = alloca %struct.uninit_memory_access_008_s_001*, align 8}-> N595
N595 -{%call = call i8* @malloc(i64 20, i64 @malloc)}-> N596
N595 -{%call = call i8* @malloc(i64 20, i64 @malloc)}-> N596
N596 -{%0 = bitcast i8* %call to %struct.uninit_memory_access_008_s_001*}-> N597
N596 -{%0 = bitcast i8* %call to %struct.uninit_memory_access_008_s_001*}-> N597
N597 -{store %struct.uninit_memory_access_008_s_001* %0, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N598
N597 -{store %struct.uninit_memory_access_008_s_001* %0, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N598
N598 -{%1 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N599
N598 -{%1 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N599
N599 -{ret %struct.uninit_memory_access_008_s_001* %1}-> N591
N599 -{ret %struct.uninit_memory_access_008_s_001* %1}-> N591
N591 -{Return edge from uninit_memory_access_008_func_001_bad to uninit_memory_access_008_bad}-> N570
N591 -{Return edge from uninit_memory_access_008_func_001_bad to uninit_memory_access_008_bad}-> N570
N570 -{store %struct.uninit_memory_access_008_s_001* %call, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N571
N570 -{store %struct.uninit_memory_access_008_s_001* %call, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N571
N571 -{%0 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N572
N571 -{%0 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N572
N572 -{%1 = bitcast %struct.uninit_memory_access_008_s_001* %0 to i16*}-> N573
N572 -{%1 = bitcast %struct.uninit_memory_access_008_s_001* %0 to i16*}-> N573
N573 -{%bf.load = load i16, i16* %1, align 4}-> N574
N573 -{%bf.load = load i16, i16* %1, align 4}-> N574
N574 -{%bf.shl = shl i16 %bf.load, 9}-> N575
N575 -{%bf.ashr = ashr i16 %bf.shl, 9}-> N576
N576 -{%bf.cast = sext i16 %bf.ashr to i32}-> N577
N577 -{%2 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N578
N578 -{%3 = bitcast %struct.uninit_memory_access_008_s_001* %2 to i16*}-> N579
N579 -{%4 = trunc i32 %bf.cast to i16}-> N580
N580 -{%bf.load1 = load i16, i16* %3, align 4}-> N581
N581 -{%bf.value = and i16 %4, 127}-> N582
N582 -{%bf.shl2 = shl i16 %bf.value, 7}-> N583
N583 -{%bf.clear = and i16 %bf.load1, -16257}-> N584
N584 -{%bf.set = or i16 %bf.clear, %bf.shl2}-> N585
N585 -{store i16 %bf.set, i16* %3, align 4}-> N586
N586 -{%bf.result.shl = shl i16 %bf.value, 9}-> N587
N587 -{%bf.result.ashr = ashr i16 %bf.result.shl, 9}-> N588
N588 -{%bf.result.cast = sext i16 %bf.result.ashr to i32}-> N589
N589 -{ret void}-> N564
N564 -{Return edge from uninit_memory_access_008_bad to main}-> N562
N561 -{call uninit_memory_access_008_bad}-> N565
N565 -{%s = alloca %struct.uninit_memory_access_008_s_001*, align 8}-> N568
N568 -{store %struct.uninit_memory_access_008_s_001* null, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N569
N569 -{call uninit_memory_access_008_func_001_bad}-> N592
N592 -{%ret = alloca %struct.uninit_memory_access_008_s_001*, align 8}-> N595
N595 -{%call = call i8* @malloc(i64 20, i64 @malloc)}-> N596
N595 -{%call = call i8* @malloc(i64 20, i64 @malloc)}-> N596
N596 -{%0 = bitcast i8* %call to %struct.uninit_memory_access_008_s_001*}-> N597
N596 -{%0 = bitcast i8* %call to %struct.uninit_memory_access_008_s_001*}-> N597
N597 -{store %struct.uninit_memory_access_008_s_001* %0, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N598
N597 -{store %struct.uninit_memory_access_008_s_001* %0, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N598
N598 -{%1 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N599
N598 -{%1 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %ret, align 8}-> N599
N599 -{ret %struct.uninit_memory_access_008_s_001* %1}-> N591
N599 -{ret %struct.uninit_memory_access_008_s_001* %1}-> N591
N591 -{Return edge from uninit_memory_access_008_func_001_bad to uninit_memory_access_008_bad}-> N570
N591 -{Return edge from uninit_memory_access_008_func_001_bad to uninit_memory_access_008_bad}-> N570
N570 -{store %struct.uninit_memory_access_008_s_001* %call, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N571
N570 -{store %struct.uninit_memory_access_008_s_001* %call, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N571
N571 -{%0 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N572
N571 -{%0 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N572
N572 -{%1 = bitcast %struct.uninit_memory_access_008_s_001* %0 to i16*}-> N573
N572 -{%1 = bitcast %struct.uninit_memory_access_008_s_001* %0 to i16*}-> N573
N573 -{%bf.load = load i16, i16* %1, align 4}-> N574
N573 -{%bf.load = load i16, i16* %1, align 4}-> N574
N574 -{%bf.shl = shl i16 %bf.load, 9}-> N575
N575 -{%bf.ashr = ashr i16 %bf.shl, 9}-> N576
N576 -{%bf.cast = sext i16 %bf.ashr to i32}-> N577
N577 -{%2 = load %struct.uninit_memory_access_008_s_001*, %struct.uninit_memory_access_008_s_001** %s, align 8}-> N578
N578 -{%3 = bitcast %struct.uninit_memory_access_008_s_001* %2 to i16*}-> N579
N579 -{%4 = trunc i32 %bf.cast to i16}-> N580
N580 -{%bf.load1 = load i16, i16* %3, align 4}-> N581
N581 -{%bf.value = and i16 %4, 127}-> N582
N582 -{%bf.shl2 = shl i16 %bf.value, 7}-> N583
N583 -{%bf.clear = and i16 %bf.load1, -16257}-> N584
N584 -{%bf.set = or i16 %bf.clear, %bf.shl2}-> N585
N585 -{store i16 %bf.set, i16* %3, align 4}-> N586
N586 -{%bf.result.shl = shl i16 %bf.value, 9}-> N587
N587 -{%bf.result.ashr = ashr i16 %bf.result.shl, 9}-> N588
N588 -{%bf.result.cast = sext i16 %bf.result.ashr to i32}-> N589
N589 -{ret void}-> N564
N564 -{Return edge from uninit_memory_access_008_bad to main}-> N562
N562 -{ret i32 0}-> N556
N562 -{ret i32 0}-> N556
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Signed to Unsigned Conversion Error
At node  : N579
On edge  : N579 -{%4 = trunc i32 %bf.cast to i16}-> N580
Message  : Signed to Unsigned Conversion Error
> Start from entry function: main, At N557 of Function main
> Entering function: uninit_memory_access_008_good, On N560 -> N630 (call uninit_memory_access_008_good)
> Entering function: uninit_memory_access_008_func_001_good, On N634 -> N602 (call uninit_memory_access_008_func_001_good)
> takes the false branch, At N610 of Function uninit_memory_access_008_func_001_good
> Leaving function: uninit_memory_access_008_func_001_good, On N601 -> N635 (Return edge from uninit_memory_access_008_func_001_good to uninit_memory_access_008_good)
> takes the false branch, At N638 of Function uninit_memory_access_008_good
> Leaving function: uninit_memory_access_008_good, On N629 -> N561 (Return edge from uninit_memory_access_008_good to main)
> Entering function: uninit_memory_access_008_bad, On N561 -> N565 (call uninit_memory_access_008_bad)
> Entering function: uninit_memory_access_008_func_001_bad, On N569 -> N592 (call uninit_memory_access_008_func_001_bad)
> Leaving function: uninit_memory_access_008_func_001_bad, On N591 -> N570 (Return edge from uninit_memory_access_008_func_001_bad to uninit_memory_access_008_bad)
<Defect> : N579 -> N580: [%4 = trunc i32 %bf.cast to i16]
N579 -> N580: [%4 = trunc i32 %bf.cast to i16] <--
-- end of trace --
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N613
On edge  : N613 -{%bf.load = load i16, i16* %3, align 4}-> N614
Message  : use of uninitialized variable
> Start from entry function: main, At N557 of Function main
> Entering function: uninit_memory_access_008_good, On N560 -> N630 (call uninit_memory_access_008_good)
> Entering function: uninit_memory_access_008_func_001_good, On N634 -> N602 (call uninit_memory_access_008_func_001_good)
> takes the true branch, At N610 of Function uninit_memory_access_008_func_001_good
<Defect> : N613 -> N614: [%bf.load = load i16, i16* %3, align 4]
N613 -> N614: [%bf.load = load i16, i16* %3, align 4] <--
-- end of trace --
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N573
On edge  : N573 -{%bf.load = load i16, i16* %1, align 4}-> N574
Message  : use of uninitialized variable
> Start from entry function: main, At N557 of Function main
> Entering function: uninit_memory_access_008_good, On N560 -> N630 (call uninit_memory_access_008_good)
> Entering function: uninit_memory_access_008_func_001_good, On N634 -> N602 (call uninit_memory_access_008_func_001_good)
> takes the false branch, At N610 of Function uninit_memory_access_008_func_001_good
> Leaving function: uninit_memory_access_008_func_001_good, On N601 -> N635 (Return edge from uninit_memory_access_008_func_001_good to uninit_memory_access_008_good)
> takes the false branch, At N638 of Function uninit_memory_access_008_good
> Leaving function: uninit_memory_access_008_good, On N629 -> N561 (Return edge from uninit_memory_access_008_good to main)
> Entering function: uninit_memory_access_008_bad, On N561 -> N565 (call uninit_memory_access_008_bad)
> Entering function: uninit_memory_access_008_func_001_bad, On N569 -> N592 (call uninit_memory_access_008_func_001_bad)
> Leaving function: uninit_memory_access_008_func_001_bad, On N591 -> N570 (Return edge from uninit_memory_access_008_func_001_bad to uninit_memory_access_008_bad)
<Defect> : N573 -> N574: [%bf.load = load i16, i16* %1, align 4]
N573 -> N574: [%bf.load = load i16, i16* %1, align 4] <--
-- end of trace --
-- start of trace --
Weakness : Null Pointer Dereference
At node  : N573
On edge  : N573 -{%bf.load = load i16, i16* %1, align 4}-> N574
Message  : null pointer dereference
> Start from entry function: main, At N557 of Function main
> Entering function: uninit_memory_access_008_good, On N560 -> N630 (call uninit_memory_access_008_good)
> Entering function: uninit_memory_access_008_func_001_good, On N634 -> N602 (call uninit_memory_access_008_func_001_good)
> takes the false branch, At N610 of Function uninit_memory_access_008_func_001_good
> Leaving function: uninit_memory_access_008_func_001_good, On N601 -> N635 (Return edge from uninit_memory_access_008_func_001_good to uninit_memory_access_008_good)
> takes the false branch, At N638 of Function uninit_memory_access_008_good
> Leaving function: uninit_memory_access_008_good, On N629 -> N561 (Return edge from uninit_memory_access_008_good to main)
> Entering function: uninit_memory_access_008_bad, On N561 -> N565 (call uninit_memory_access_008_bad)
> Entering function: uninit_memory_access_008_func_001_bad, On N569 -> N592 (call uninit_memory_access_008_func_001_bad)
> Leaving function: uninit_memory_access_008_func_001_bad, On N591 -> N570 (Return edge from uninit_memory_access_008_func_001_bad to uninit_memory_access_008_bad)
<Defect> : N573 -> N574: [%bf.load = load i16, i16* %1, align 4]
N573 -> N574: [%bf.load = load i16, i16* %1, align 4] <--
-- end of trace --
-- start of trace --
Weakness : Memory Leak
At node  : N564
On edge  : N564 -{Return edge from uninit_memory_access_008_bad to main}-> N562
Message  : the heap object @H(uninit_memory_access_008_func_001_bad::call) is not referenced any more
> Start from entry function: main, At N557 of Function main
> Entering function: uninit_memory_access_008_good, On N560 -> N630 (call uninit_memory_access_008_good)
> Entering function: uninit_memory_access_008_func_001_good, On N634 -> N602 (call uninit_memory_access_008_func_001_good)
> takes the false branch, At N610 of Function uninit_memory_access_008_func_001_good
> Leaving function: uninit_memory_access_008_func_001_good, On N601 -> N635 (Return edge from uninit_memory_access_008_func_001_good to uninit_memory_access_008_good)
> takes the false branch, At N638 of Function uninit_memory_access_008_good
> Leaving function: uninit_memory_access_008_good, On N629 -> N561 (Return edge from uninit_memory_access_008_good to main)
> Entering function: uninit_memory_access_008_bad, On N561 -> N565 (call uninit_memory_access_008_bad)
> Entering function: uninit_memory_access_008_func_001_bad, On N569 -> N592 (call uninit_memory_access_008_func_001_bad)
> Leaving function: uninit_memory_access_008_func_001_bad, On N591 -> N570 (Return edge from uninit_memory_access_008_func_001_bad to uninit_memory_access_008_bad)
<Defect> : N564 -> N562: [Return edge from uninit_memory_access_008_bad to main]
N564 -> N562: [Return edge from uninit_memory_access_008_bad to main] <--
-- end of trace --
=====================================================
CWE_195(Signed to Unsigned Conversion Error): 1
	[./457_uninit_memory_access_7.c 22] uninit_memory_access_008_bad 		[N579 -{%4 = trunc i32 %bf.cast to i16}-> N580]	(Signed to Unsigned Conversion Error)

CWE_457(Use of Uninitialized Variable): 2
	[./457_uninit_memory_access_7.c 35] uninit_memory_access_008_func_001_good 		[N613 -{%bf.load = load i16, i16* %3, align 4}-> N614]	(use of uninitialized variable)
	[./457_uninit_memory_access_7.c 22] uninit_memory_access_008_bad 		[N573 -{%bf.load = load i16, i16* %1, align 4}-> N574]	(use of uninitialized variable)

CWE_476(Null Pointer Dereference): 1
	[./457_uninit_memory_access_7.c 22] uninit_memory_access_008_bad 		[N573 -{%bf.load = load i16, i16* %1, align 4}-> N574]	(null pointer dereference)

CWE_401(Memory Leak): 1
	[./457_uninit_memory_access_7.c 54] uninit_memory_access_008_bad 		[N564 -{Return edge from uninit_memory_access_008_bad to main}-> N562]	(the heap object @H(uninit_memory_access_008_func_001_bad::call) is not referenced any more)

Found 5 defects in all (8 duplicates ignored).
=====================================================
Phase status: SUCCESS


java.lang.AssertionError: unexpected number of reports 
Expected :2
Actual   :1
 <Click to see difference>


	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:743)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at cn.edu.thu.tsmart.helper.assertion.NumberAssert.is(NumberAssert.java:48)
	at cn.edu.thu.tsmart.helper.assertion.NumberAssert.is(NumberAssert.java:44)
	at cn.edu.thu.tsmart.integrated.ITC_457_Test.lambda$itc_457_memory_7$20(ITC_457_Test.java:286)
	at cn.edu.thu.tsmart.helper.assertion.ReportSetAssert.satisfy(ReportSetAssert.java:79)
	at cn.edu.thu.tsmart.integrated.ITC_457_Test.itc_457_memory_7(ITC_457_Test.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_memory_access_8.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
5 SCCs to deal with
SCC(1): [_002_bad]
 +_002_bad
SCC(1): [_002_good]
 +_002_good
SCC(1): [bad]
 +bad
SCC(1): [good]
 +good
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [_002_bad, _002_good, bad, good, main]
Loops     [N804, N753, N884, N677, N731, N694]
----
function: _002_bad
P+ = [H(_002_bad::call), H(_002_bad::call1)] 
P- = [] 
Point-To:
G(_bad) -> [H(_002_bad::call)]
H(_002_bad::call)[??] -> [H(_002_bad::call1)]
Ret-Value: 
----
function: _002_good
P+ = [H(_002_good::call), H(_002_good::call1)] 
P- = [] 
Point-To:
G(_good) -> [H(_002_good::call)]
H(_002_good::call)[??] -> [H(_002_good::call1)]
Ret-Value: 
----
function: bad
P+ = [H(_002_bad::call), H(_002_bad::call1)] 
P- = [N, H(_002_bad::call), H(_002_bad::call1)] 
Point-To:
G(_bad) -> [N, H(_002_bad::call)]
H(_002_bad::call)[??] -> [H(_002_bad::call1), N]
Ret-Value: 
----
function: good
P+ = [H(_002_good::call), H(_002_good::call1)] 
P- = [N, H(_002_good::call), H(_002_good::call1)] 
Point-To:
G(_good) -> [N, H(_002_good::call)]
H(_002_good::call)[??] -> [H(_002_good::call1), N]
Ret-Value: 
----
function: main
P+ = [H(_002_bad::call), H(_002_bad::call1), H(_002_good::call), H(_002_good::call1)] 
P- = [N, H(_002_bad::call), H(_002_bad::call1), H(_002_good::call), H(_002_good::call1)] 
Point-To:
G(_bad) -> [N, H(_002_bad::call)]
G(_good) -> [N, H(_002_good::call)]
H(_002_bad::call)[??] -> [H(_002_bad::call1), N]
H(_002_good::call)[??] -> [H(_002_good::call1), N]
Ret-Value: R
----
loop N677 in _002_bad: 
N677 -> P+ = [H(_002_bad::call), H(_002_bad::call1)], P- = [] Point-To: G(_bad) -> [H(_002_bad::call)]; H(_002_bad::call)[??] -> [H(_002_bad::call1)]
N679 -> P+ = [H(_002_bad::call), H(_002_bad::call1)], P- = [] Point-To: G(_bad) -> [H(_002_bad::call)]; H(_002_bad::call)[??] -> [H(_002_bad::call1)]
----
loop N694 in _002_bad: 
N694 -> P+ = [H(_002_bad::call), H(_002_bad::call1)], P- = [] Point-To: G(_bad) -> [H(_002_bad::call)]; H(_002_bad::call)[??] -> [H(_002_bad::call1)]
N696 -> P+ = [H(_002_bad::call), H(_002_bad::call1)], P- = [] Point-To: G(_bad) -> [H(_002_bad::call)]; H(_002_bad::call)[??] -> [H(_002_bad::call1)]
----
loop N731 in _002_good: 
N731 -> P+ = [H(_002_good::call), H(_002_good::call1)], P- = [] Point-To: G(_good) -> [H(_002_good::call)]; H(_002_good::call)[??] -> [H(_002_good::call1)]
N733 -> P+ = [H(_002_good::call), H(_002_good::call1)], P- = [] Point-To: G(_good) -> [H(_002_good::call)]; H(_002_good::call)[??] -> [H(_002_good::call1)]
----
loop N753 in _002_good: 
N748 -> P+ = [H(_002_good::call), H(_002_good::call1)], P- = [] Point-To: G(_good) -> [H(_002_good::call)]; H(_002_good::call)[??] -> [H(_002_good::call1)]
N750 -> P+ = [H(_002_good::call), H(_002_good::call1)], P- = [] Point-To: G(_good) -> [H(_002_good::call)]; H(_002_good::call)[??] -> [H(_002_good::call1)]
----
loop N804 in bad: 
N804 -> P+ = [H(_002_bad::call), H(_002_bad::call1)], P- = [N, H(_002_bad::call1)] Point-To: G(_bad) -> [H(_002_bad::call)]; H(_002_bad::call)[??] -> [H(_002_bad::call1), N]
N806 -> P+ = [H(_002_bad::call), H(_002_bad::call1)], P- = [N, H(_002_bad::call1)] Point-To: G(_bad) -> [H(_002_bad::call)]; H(_002_bad::call)[??] -> [H(_002_bad::call1), N]
----
loop N884 in good: 
N879 -> P+ = [H(_002_good::call), H(_002_good::call1)], P- = [N, H(_002_good::call1)] Point-To: G(_good) -> [H(_002_good::call)]; H(_002_good::call)[??] -> [H(_002_good::call1), N]
N881 -> P+ = [H(_002_good::call), H(_002_good::call1)], P- = [N, H(_002_good::call1)] Point-To: G(_good) -> [H(_002_good::call)]; H(_002_good::call)[??] -> [H(_002_good::call1), N]
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.097s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N936): +oo]
> [1/1] entry: main ()
N936 -{global: _bad}-> N944
N944 -{global: _good}-> N943
N943 -{%retval = alloca i32, align 4}-> N938
N938 -{store i32 0, i32* %retval, align 4}-> N939
N939 -{call good}-> N861
N861 -{%flag = alloca i32, align 4}-> N863
N863 -{%i = alloca i32, align 4}-> N864
N864 -{%j = alloca i32, align 4}-> N866
N866 -{store i32 0, i32* %flag, align 4}-> N869
N869 -{%0 = load i32, i32* %flag, align 4}-> N870
N870 -{%cmp = icmp eq i32 %0, 0}-> N871
N871 -{[%cmp = icmp eq i32 %0, 0]}-> N927
N871 -{[!(%cmp = icmp eq i32 %0, 0)]}-> N874
N927 -{call _002_good}-> N721
N721 -{%i = alloca i32, align 4}-> N723
N723 -{%j = alloca i32, align 4}-> N726
N726 -{%call = call i8* @malloc(i64 80, i64 @malloc)}-> N727
N726 -{%call = call i8* @malloc(i64 80, i64 @malloc)}-> N727
N727 -{%0 = bitcast i8* %call to i64**}-> N728
N727 -{%0 = bitcast i8* %call to i64**}-> N728
N728 -{store i64** %0, i64*** @_good, align 8}-> N729
N728 -{store i64** %0, i64*** @_good, align 8}-> N729
N729 -{store i32 0, i32* %i, align 4}-> N731
N729 -{store i32 0, i32* %i, align 4}-> N731
N731 -{%1 = load i32, i32* %i, align 4}-> N732
N731 -{@}-> N731
N731 -{@}-> N733
N731 -{%1 = load i32, i32* %i, align 4}-> N732
N731 -{@}-> N731
N731 -{@}-> N733
N732 -{%cmp = icmp slt i32 %1, 2}-> N733
N732 -{%cmp = icmp slt i32 %1, 2}-> N733
N733 -{[%cmp = icmp slt i32 %1, 2]}-> N779
N733 -{[!(%cmp = icmp slt i32 %1, 2)]}-> N780
N779 -{%call1 = call i8* @malloc(i64 80, i64 @malloc)}-> N735
N779 -{%call1 = call i8* @malloc(i64 80, i64 @malloc)}-> N735
N735 -{%2 = bitcast i8* %call1 to i64*}-> N736
N735 -{%2 = bitcast i8* %call1 to i64*}-> N736
N736 -{%3 = load i32, i32* %i, align 4}-> N737
N736 -{%3 = load i32, i32* %i, align 4}-> N737
N737 -{%idxprom = sext i32 %3 to i64}-> N738
N737 -{%idxprom = sext i32 %3 to i64}-> N738
N738 -{%4 = load i64**, i64*** @_good, align 8}-> N739
N738 -{%4 = load i64**, i64*** @_good, align 8}-> N739
N739 -{%arrayidx = getelementptr inbounds i64*, i64** %4, i64 %idxprom}-> N740
N739 -{%arrayidx = getelementptr inbounds i64*, i64** %4, i64 %idxprom}-> N740
N740 -{store i64* %2, i64** %arrayidx, align 8}-> N742
N740 -{store i64* %2, i64** %arrayidx, align 8}-> N742
N742 -{%5 = load i32, i32* %i, align 4}-> N743
N742 -{%5 = load i32, i32* %i, align 4}-> N743
N743 -{%inc = add i32 %5, 1}-> N744
N743 -{%inc = add i32 %5, 1}-> N744
N744 -{store i32 %inc, i32* %i, align 4}-> N731
N744 -{store i32 %inc, i32* %i, align 4}-> N731
N731 -{%1 = load i32, i32* %i, align 4}-> N732
N731 -{%1 = load i32, i32* %i, align 4}-> N732
N732 -{%cmp = icmp slt i32 %1, 2}-> N733
N732 -{%cmp = icmp slt i32 %1, 2}-> N733
N733 -{[%cmp = icmp slt i32 %1, 2]}-> N779
N733 -{[!(%cmp = icmp slt i32 %1, 2)]}-> N780
N779 -{%call1 = call i8* @malloc(i64 80, i64 @malloc)}-> N735
N779 -{%call1 = call i8* @malloc(i64 80, i64 @malloc)}-> N735
N735 -{%2 = bitcast i8* %call1 to i64*}-> N736
N735 -{%2 = bitcast i8* %call1 to i64*}-> N736
N736 -{%3 = load i32, i32* %i, align 4}-> N737
N736 -{%3 = load i32, i32* %i, align 4}-> N737
N737 -{%idxprom = sext i32 %3 to i64}-> N738
N737 -{%idxprom = sext i32 %3 to i64}-> N738
N738 -{%4 = load i64**, i64*** @_good, align 8}-> N739
N738 -{%4 = load i64**, i64*** @_good, align 8}-> N739
N739 -{%arrayidx = getelementptr inbounds i64*, i64** %4, i64 %idxprom}-> N740
N739 -{%arrayidx = getelementptr inbounds i64*, i64** %4, i64 %idxprom}-> N740
N733 -{[%cmp = icmp slt i32 %1, 2]}-> N779
N733 -{[!(%cmp = icmp slt i32 %1, 2)]}-> N780
N779 -{%call1 = call i8* @malloc(i64 80, i64 @malloc)}-> N735
N779 -{%call1 = call i8* @malloc(i64 80, i64 @malloc)}-> N735
N735 -{%2 = bitcast i8* %call1 to i64*}-> N736
N735 -{%2 = bitcast i8* %call1 to i64*}-> N736
N736 -{%3 = load i32, i32* %i, align 4}-> N737
N737 -{%idxprom = sext i32 %3 to i64}-> N738
N738 -{%4 = load i64**, i64*** @_good, align 8}-> N739
N739 -{%arrayidx = getelementptr inbounds i64*, i64** %4, i64 %idxprom}-> N740
N740 -{store i64* %2, i64** %arrayidx, align 8}-> N742
N742 -{%5 = load i32, i32* %i, align 4}-> N743
N743 -{%inc = add i32 %5, 1}-> N744
N744 -{store i32 %inc, i32* %i, align 4}-> N731
N731 -{%1 = load i32, i32* %i, align 4}-> N732
N732 -{%cmp = icmp slt i32 %1, 2}-> N733
N733 -{[%cmp = icmp slt i32 %1, 2]}-> N779
N733 -{[!(%cmp = icmp slt i32 %1, 2)]}-> N780
N779 -{%call1 = call i8* @malloc(i64 80, i64 @malloc)}-> N735
N779 -{%call1 = call i8* @malloc(i64 80, i64 @malloc)}-> N735
N735 -{%2 = bitcast i8* %call1 to i64*}-> N736
N735 -{%2 = bitcast i8* %call1 to i64*}-> N736
N736 -{%3 = load i32, i32* %i, align 4}-> N737
N736 -{%3 = load i32, i32* %i, align 4}-> N737
N737 -{%idxprom = sext i32 %3 to i64}-> N738
N737 -{%idxprom = sext i32 %3 to i64}-> N738
N738 -{%4 = load i64**, i64*** @_good, align 8}-> N739
N738 -{%4 = load i64**, i64*** @_good, align 8}-> N739
N739 -{%arrayidx = getelementptr inbounds i64*, i64** %4, i64 %idxprom}-> N740
N739 -{%arrayidx = getelementptr inbounds i64*, i64** %4, i64 %idxprom}-> N740
N740 -{store i64* %2, i64** %arrayidx, align 8}-> N742
N740 -{store i64* %2, i64** %arrayidx, align 8}-> N742
N742 -{%5 = load i32, i32* %i, align 4}-> N743
N742 -{%5 = load i32, i32* %i, align 4}-> N743
N743 -{%inc = add i32 %5, 1}-> N744
N743 -{%inc = add i32 %5, 1}-> N744
N744 -{store i32 %inc, i32* %i, align 4}-> N731
N744 -{store i32 %inc, i32* %i, align 4}-> N731
N731 -{%1 = load i32, i32* %i, align 4}-> N732
N731 -{%1 = load i32, i32* %i, align 4}-> N732
N732 -{%cmp = icmp slt i32 %1, 2}-> N733
N732 -{%cmp = icmp slt i32 %1, 2}-> N733
N733 -{[%cmp = icmp slt i32 %1, 2]}-> N779
N733 -{[!(%cmp = icmp slt i32 %1, 2)]}-> N780
N733 -{[%cmp = icmp slt i32 %1, 2]}-> N779
N733 -{[!(%cmp = icmp slt i32 %1, 2)]}-> N780
N780 -{store i32 0, i32* %i, align 4}-> N748
N780 -{store i32 0, i32* %i, align 4}-> N748
N748 -{%6 = load i32, i32* %i, align 4}-> N749
N748 -{@}-> N748
N748 -{@}-> N750
N748 -{%6 = load i32, i32* %i, align 4}-> N749
N748 -{@}-> N748
N748 -{@}-> N750
N749 -{%cmp3 = icmp slt i32 %6, 2}-> N750
N749 -{%cmp3 = icmp slt i32 %6, 2}-> N750
N750 -{[%cmp3 = icmp slt i32 %6, 2]}-> N781
N750 -{[!(%cmp3 = icmp slt i32 %6, 2)]}-> N782
N781 -{store i32 0, i32* %j, align 4}-> N753
N753 -{%7 = load i32, i32* %j, align 4}-> N754
N754 -{%cmp6 = icmp slt i32 %7, 2}-> N755
N755 -{[%cmp6 = icmp slt i32 %7, 2]}-> N783
N755 -{[!(%cmp6 = icmp slt i32 %7, 2)]}-> N784
N783 -{%8 = load i32, i32* %i, align 4}-> N757
N757 -{%conv = sext i32 %8 to i64}-> N758
N758 -{%9 = load i32, i32* %j, align 4}-> N759
N759 -{%idxprom8 = sext i32 %9 to i64}-> N760
N760 -{%10 = load i32, i32* %i, align 4}-> N761
N761 -{%idxprom9 = sext i32 %10 to i64}-> N762
N762 -{%11 = load i64**, i64*** @_good, align 8}-> N763
N763 -{%arrayidx10 = getelementptr inbounds i64*, i64** %11, i64 %idxprom9}-> N764
N764 -{%12 = load i64*, i64** %arrayidx10, align 8}-> N765
N765 -{%arrayidx11 = getelementptr inbounds i64, i64* %12, i64 %idxprom8}-> N766
N766 -{store i64 %conv, i64* %arrayidx11, align 8}-> N768
N768 -{%13 = load i32, i32* %j, align 4}-> N769
N769 -{%inc13 = add i32 %13, 1}-> N770
N770 -{store i32 %inc13, i32* %j, align 4}-> N753
N753 -{%7 = load i32, i32* %j, align 4}-> N754
N754 -{%cmp6 = icmp slt i32 %7, 2}-> N755
N755 -{[%cmp6 = icmp slt i32 %7, 2]}-> N783
N755 -{[!(%cmp6 = icmp slt i32 %7, 2)]}-> N784
N783 -{%8 = load i32, i32* %i, align 4}-> N757
N757 -{%conv = sext i32 %8 to i64}-> N758
N758 -{%9 = load i32, i32* %j, align 4}-> N759
N759 -{%idxprom8 = sext i32 %9 to i64}-> N760
N760 -{%10 = load i32, i32* %i, align 4}-> N761
N761 -{%idxprom9 = sext i32 %10 to i64}-> N762
N762 -{%11 = load i64**, i64*** @_good, align 8}-> N763
N763 -{%arrayidx10 = getelementptr inbounds i64*, i64** %11, i64 %idxprom9}-> N764
N764 -{%12 = load i64*, i64** %arrayidx10, align 8}-> N765
N765 -{%arrayidx11 = getelementptr inbounds i64, i64* %12, i64 %idxprom8}-> N766
N766 -{store i64 %conv, i64* %arrayidx11, align 8}-> N768
N768 -{%13 = load i32, i32* %j, align 4}-> N769
N769 -{%inc13 = add i32 %13, 1}-> N770
N770 -{store i32 %inc13, i32* %j, align 4}-> N753
N753 -{%7 = load i32, i32* %j, align 4}-> N754
N754 -{%cmp6 = icmp slt i32 %7, 2}-> N755
N755 -{[%cmp6 = icmp slt i32 %7, 2]}-> N783
N755 -{[!(%cmp6 = icmp slt i32 %7, 2)]}-> N784
N784 -{%14 = load i32, i32* %i, align 4}-> N774
N774 -{%inc16 = add i32 %14, 1}-> N775
N775 -{store i32 %inc16, i32* %i, align 4}-> N748
N748 -{%6 = load i32, i32* %i, align 4}-> N749
N749 -{%cmp3 = icmp slt i32 %6, 2}-> N750
N750 -{[%cmp3 = icmp slt i32 %6, 2]}-> N781
N750 -{[!(%cmp3 = icmp slt i32 %6, 2)]}-> N782
N781 -{store i32 0, i32* %j, align 4}-> N753
N753 -{%7 = load i32, i32* %j, align 4}-> N754
N754 -{%cmp6 = icmp slt i32 %7, 2}-> N755
N755 -{[%cmp6 = icmp slt i32 %7, 2]}-> N783
N755 -{[!(%cmp6 = icmp slt i32 %7, 2)]}-> N784
N783 -{%8 = load i32, i32* %i, align 4}-> N757
N757 -{%conv = sext i32 %8 to i64}-> N758
N758 -{%9 = load i32, i32* %j, align 4}-> N759
N759 -{%idxprom8 = sext i32 %9 to i64}-> N760
N760 -{%10 = load i32, i32* %i, align 4}-> N761
N761 -{%idxprom9 = sext i32 %10 to i64}-> N762
N762 -{%11 = load i64**, i64*** @_good, align 8}-> N763
N763 -{%arrayidx10 = getelementptr inbounds i64*, i64** %11, i64 %idxprom9}-> N764
N764 -{%12 = load i64*, i64** %arrayidx10, align 8}-> N765
N765 -{%arrayidx11 = getelementptr inbounds i64, i64* %12, i64 %idxprom8}-> N766
N750 -{[%cmp3 = icmp slt i32 %6, 2]}-> N781
N750 -{[!(%cmp3 = icmp slt i32 %6, 2)]}-> N782
N781 -{store i32 0, i32* %j, align 4}-> N753
N753 -{%7 = load i32, i32* %j, align 4}-> N754
N754 -{%cmp6 = icmp slt i32 %7, 2}-> N755
N755 -{[%cmp6 = icmp slt i32 %7, 2]}-> N783
N755 -{[!(%cmp6 = icmp slt i32 %7, 2)]}-> N784
N783 -{%8 = load i32, i32* %i, align 4}-> N757
N757 -{%conv = sext i32 %8 to i64}-> N758
N758 -{%9 = load i32, i32* %j, align 4}-> N759
N759 -{%idxprom8 = sext i32 %9 to i64}-> N760
N760 -{%10 = load i32, i32* %i, align 4}-> N761
N761 -{%idxprom9 = sext i32 %10 to i64}-> N762
N762 -{%11 = load i64**, i64*** @_good, align 8}-> N763
N763 -{%arrayidx10 = getelementptr inbounds i64*, i64** %11, i64 %idxprom9}-> N764
N764 -{%12 = load i64*, i64** %arrayidx10, align 8}-> N765
N765 -{%arrayidx11 = getelementptr inbounds i64, i64* %12, i64 %idxprom8}-> N766
N766 -{store i64 %conv, i64* %arrayidx11, align 8}-> N768
N768 -{%13 = load i32, i32* %j, align 4}-> N769
N769 -{%inc13 = add i32 %13, 1}-> N770
N770 -{store i32 %inc13, i32* %j, align 4}-> N753
N753 -{%7 = load i32, i32* %j, align 4}-> N754
N754 -{%cmp6 = icmp slt i32 %7, 2}-> N755
N755 -{[%cmp6 = icmp slt i32 %7, 2]}-> N783
N755 -{[!(%cmp6 = icmp slt i32 %7, 2)]}-> N784
N783 -{%8 = load i32, i32* %i, align 4}-> N757
N757 -{%conv = sext i32 %8 to i64}-> N758
N758 -{%9 = load i32, i32* %j, align 4}-> N759
N759 -{%idxprom8 = sext i32 %9 to i64}-> N760
N760 -{%10 = load i32, i32* %i, align 4}-> N761
N761 -{%idxprom9 = sext i32 %10 to i64}-> N762
N762 -{%11 = load i64**, i64*** @_good, align 8}-> N763
N763 -{%arrayidx10 = getelementptr inbounds i64*, i64** %11, i64 %idxprom9}-> N764
N764 -{%12 = load i64*, i64** %arrayidx10, align 8}-> N765
N765 -{%arrayidx11 = getelementptr inbounds i64, i64* %12, i64 %idxprom8}-> N766
N766 -{store i64 %conv, i64* %arrayidx11, align 8}-> N768
N768 -{%13 = load i32, i32* %j, align 4}-> N769
N769 -{%inc13 = add i32 %13, 1}-> N770
N770 -{store i32 %inc13, i32* %j, align 4}-> N753
N753 -{%7 = load i32, i32* %j, align 4}-> N754
N754 -{%cmp6 = icmp slt i32 %7, 2}-> N755
N755 -{[%cmp6 = icmp slt i32 %7, 2]}-> N783
N755 -{[!(%cmp6 = icmp slt i32 %7, 2)]}-> N784
N784 -{%14 = load i32, i32* %i, align 4}-> N774
N774 -{%inc16 = add i32 %14, 1}-> N775
N775 -{store i32 %inc16, i32* %i, align 4}-> N748
N748 -{%6 = load i32, i32* %i, align 4}-> N749
N749 -{%cmp3 = icmp slt i32 %6, 2}-> N750
N750 -{[%cmp3 = icmp slt i32 %6, 2]}-> N781
N750 -{[!(%cmp3 = icmp slt i32 %6, 2)]}-> N782
N782 -{ret void}-> N720
N720 -{Return edge from _002_good to good}-> N874
N874 -{%1 = load i32, i32* %flag, align 4}-> N875
N875 -{%cmp1 = icmp eq i32 %1, 0}-> N876
N876 -{[%cmp1 = icmp eq i32 %1, 0]}-> N929
N876 -{[!(%cmp1 = icmp eq i32 %1, 0)]}-> N925
N929 -{store i32 0, i32* %i, align 4}-> N879
N879 -{%2 = load i32, i32* %i, align 4}-> N880
N879 -{@}-> N879
N879 -{@}-> N881
N880 -{%cmp3 = icmp slt i32 %2, 10}-> N881
N881 -{[%cmp3 = icmp slt i32 %2, 10]}-> N931
N881 -{[!(%cmp3 = icmp slt i32 %2, 10)]}-> N932
N931 -{store i32 0, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N934 -{%10 = load i32, i32* %i, align 4}-> N904
N904 -{%idxprom9 = sext i32 %10 to i64}-> N905
N905 -{%11 = load i64**, i64*** @_good, align 8}-> N906
N906 -{%arrayidx10 = getelementptr inbounds i64*, i64** %11, i64 %idxprom9}-> N907
N907 -{%12 = load i64*, i64** %arrayidx10, align 8}-> N908
N908 -{%13 = bitcast i64* %12 to i8*}-> N909
N909 -{call void @free(i8* %13, i8* @free)}-> N910
N910 -{%14 = load i32, i32* %i, align 4}-> N911
N911 -{%idxprom11 = sext i32 %14 to i64}-> N912
N912 -{%15 = load i64**, i64*** @_good, align 8}-> N913
N913 -{%arrayidx12 = getelementptr inbounds i64*, i64** %15, i64 %idxprom11}-> N914
N914 -{store i64* null, i64** %arrayidx12, align 8}-> N916
N916 -{%16 = load i32, i32* %i, align 4}-> N917
N917 -{%inc14 = add i32 %16, 1}-> N918
N918 -{store i32 %inc14, i32* %i, align 4}-> N879
N879 -{%2 = load i32, i32* %i, align 4}-> N880
N880 -{%cmp3 = icmp slt i32 %2, 10}-> N881
N881 -{[%cmp3 = icmp slt i32 %2, 10]}-> N931
N881 -{[!(%cmp3 = icmp slt i32 %2, 10)]}-> N932
N931 -{store i32 0, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
N901 -{store i32 %inc, i32* %j, align 4}-> N884
N884 -{%3 = load i32, i32* %j, align 4}-> N885
N885 -{%cmp5 = icmp slt i32 %3, 10}-> N886
N886 -{[%cmp5 = icmp slt i32 %3, 10]}-> N933
N886 -{[!(%cmp5 = icmp slt i32 %3, 10)]}-> N934
N933 -{%4 = load i32, i32* %j, align 4}-> N888
N888 -{%idxprom = sext i32 %4 to i64}-> N889
N889 -{%5 = load i32, i32* %i, align 4}-> N890
N890 -{%idxprom7 = sext i32 %5 to i64}-> N891
N891 -{%6 = load i64**, i64*** @_good, align 8}-> N892
N892 -{%arrayidx = getelementptr inbounds i64*, i64** %6, i64 %idxprom7}-> N893
N893 -{%7 = load i64*, i64** %arrayidx, align 8}-> N894
N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
N896 -{%add = add i64 %8, 1}-> N897
N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
N899 -{%9 = load i32, i32* %j, align 4}-> N900
N900 -{%inc = add i32 %9, 1}-> N901
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use After Free
At node  : N895
On edge  : N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
Message  : the memory is already freed
> Start from entry function: main, At N936 of Function main
> Entering function: good, On N939 -> N861 (call good)
> takes the true branch, At N871 of Function good
> Entering function: _002_good, On N927 -> N721 (call _002_good)
> takes the true branch, At N733 of Function _002_good
> takes the true branch, At N733 of Function _002_good
> takes the false branch, At N733 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the false branch, At N755 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the false branch, At N755 of Function _002_good
> takes the false branch, At N750 of Function _002_good
> Leaving function: _002_good, On N720 -> N874 (Return edge from _002_good to good)
> takes the true branch, At N876 of Function good
> takes the true branch, At N881 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the false branch, At N886 of Function good
> takes the true branch, At N881 of Function good
> takes the true branch, At N886 of Function good
<Defect> : N895 -> N896: [%8 = load i64, i64* %arrayidx8, align 8]
N895 -> N896: [%8 = load i64, i64* %arrayidx8, align 8] <--
-- end of trace --
-- start of trace --
Weakness : Use After Free
At node  : N897
On edge  : N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
Message  : the memory is already freed
> Start from entry function: main, At N936 of Function main
> Entering function: good, On N939 -> N861 (call good)
> takes the true branch, At N871 of Function good
> Entering function: _002_good, On N927 -> N721 (call _002_good)
> takes the true branch, At N733 of Function _002_good
> takes the true branch, At N733 of Function _002_good
> takes the false branch, At N733 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the false branch, At N755 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the false branch, At N755 of Function _002_good
> takes the false branch, At N750 of Function _002_good
> Leaving function: _002_good, On N720 -> N874 (Return edge from _002_good to good)
> takes the true branch, At N876 of Function good
> takes the true branch, At N881 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the false branch, At N886 of Function good
> takes the true branch, At N881 of Function good
> takes the true branch, At N886 of Function good
<Defect> : N897 -> N899: [store i64 %add, i64* %arrayidx8, align 8]
N897 -> N899: [store i64 %add, i64* %arrayidx8, align 8] <--
-- end of trace --
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N895
On edge  : N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
Message  : use of uninitialized variable
> Start from entry function: main, At N936 of Function main
> Entering function: good, On N939 -> N861 (call good)
> takes the true branch, At N871 of Function good
> Entering function: _002_good, On N927 -> N721 (call _002_good)
> takes the true branch, At N733 of Function _002_good
> takes the true branch, At N733 of Function _002_good
> takes the false branch, At N733 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the false branch, At N755 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the false branch, At N755 of Function _002_good
> takes the false branch, At N750 of Function _002_good
> Leaving function: _002_good, On N720 -> N874 (Return edge from _002_good to good)
> takes the true branch, At N876 of Function good
> takes the true branch, At N881 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
<Defect> : N895 -> N896: [%8 = load i64, i64* %arrayidx8, align 8]
N895 -> N896: [%8 = load i64, i64* %arrayidx8, align 8] <--
-- end of trace --
-- start of trace --
Weakness : Null Pointer Dereference
At node  : N739
On edge  : N739 -{%arrayidx = getelementptr inbounds i64*, i64** %4, i64 %idxprom}-> N740
Message  : null pointer dereference
> Start from entry function: main, At N936 of Function main
> Entering function: good, On N939 -> N861 (call good)
> takes the true branch, At N871 of Function good
> Entering function: _002_good, On N927 -> N721 (call _002_good)
> takes the true branch, At N733 of Function _002_good
<Defect> : N739 -> N740: [%arrayidx = getelementptr inbounds i64*, i64** %4, i64 %idxprom]
N739 -> N740: [%arrayidx = getelementptr inbounds i64*, i64** %4, i64 %idxprom] <--
-- end of trace --
-- start of trace --
Weakness : Null Pointer Dereference
At node  : N765
On edge  : N765 -{%arrayidx11 = getelementptr inbounds i64, i64* %12, i64 %idxprom8}-> N766
Message  : null pointer dereference
> Start from entry function: main, At N936 of Function main
> Entering function: good, On N939 -> N861 (call good)
> takes the true branch, At N871 of Function good
> Entering function: _002_good, On N927 -> N721 (call _002_good)
> takes the true branch, At N733 of Function _002_good
> takes the true branch, At N733 of Function _002_good
> takes the false branch, At N733 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
<Defect> : N765 -> N766: [%arrayidx11 = getelementptr inbounds i64, i64* %12, i64 %idxprom8]
N765 -> N766: [%arrayidx11 = getelementptr inbounds i64, i64* %12, i64 %idxprom8] <--
-- end of trace --
-- start of trace --
Weakness : Null Pointer Dereference
At node  : N766
On edge  : N766 -{store i64 %conv, i64* %arrayidx11, align 8}-> N768
Message  : null pointer dereference
> Start from entry function: main, At N936 of Function main
> Entering function: good, On N939 -> N861 (call good)
> takes the true branch, At N871 of Function good
> Entering function: _002_good, On N927 -> N721 (call _002_good)
> takes the true branch, At N733 of Function _002_good
> takes the true branch, At N733 of Function _002_good
> takes the false branch, At N733 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
<Defect> : N766 -> N768: [store i64 %conv, i64* %arrayidx11, align 8]
N766 -> N768: [store i64 %conv, i64* %arrayidx11, align 8] <--
-- end of trace --
-- start of trace --
Weakness : Null Pointer Dereference
At node  : N894
On edge  : N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895
Message  : null pointer dereference
> Start from entry function: main, At N936 of Function main
> Entering function: good, On N939 -> N861 (call good)
> takes the true branch, At N871 of Function good
> Entering function: _002_good, On N927 -> N721 (call _002_good)
> takes the true branch, At N733 of Function _002_good
> takes the true branch, At N733 of Function _002_good
> takes the false branch, At N733 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the false branch, At N755 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the false branch, At N755 of Function _002_good
> takes the false branch, At N750 of Function _002_good
> Leaving function: _002_good, On N720 -> N874 (Return edge from _002_good to good)
> takes the true branch, At N876 of Function good
> takes the true branch, At N881 of Function good
> takes the true branch, At N886 of Function good
<Defect> : N894 -> N895: [%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom]
N894 -> N895: [%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom] <--
-- end of trace --
-- start of trace --
Weakness : Null Pointer Dereference
At node  : N895
On edge  : N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896
Message  : null pointer dereference
> Start from entry function: main, At N936 of Function main
> Entering function: good, On N939 -> N861 (call good)
> takes the true branch, At N871 of Function good
> Entering function: _002_good, On N927 -> N721 (call _002_good)
> takes the true branch, At N733 of Function _002_good
> takes the true branch, At N733 of Function _002_good
> takes the false branch, At N733 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the false branch, At N755 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the false branch, At N755 of Function _002_good
> takes the false branch, At N750 of Function _002_good
> Leaving function: _002_good, On N720 -> N874 (Return edge from _002_good to good)
> takes the true branch, At N876 of Function good
> takes the true branch, At N881 of Function good
> takes the true branch, At N886 of Function good
<Defect> : N895 -> N896: [%8 = load i64, i64* %arrayidx8, align 8]
N895 -> N896: [%8 = load i64, i64* %arrayidx8, align 8] <--
-- end of trace --
-- start of trace --
Weakness : Null Pointer Dereference
At node  : N897
On edge  : N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899
Message  : null pointer dereference
> Start from entry function: main, At N936 of Function main
> Entering function: good, On N939 -> N861 (call good)
> takes the true branch, At N871 of Function good
> Entering function: _002_good, On N927 -> N721 (call _002_good)
> takes the true branch, At N733 of Function _002_good
> takes the true branch, At N733 of Function _002_good
> takes the false branch, At N733 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the false branch, At N755 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the false branch, At N755 of Function _002_good
> takes the false branch, At N750 of Function _002_good
> Leaving function: _002_good, On N720 -> N874 (Return edge from _002_good to good)
> takes the true branch, At N876 of Function good
> takes the true branch, At N881 of Function good
> takes the true branch, At N886 of Function good
<Defect> : N897 -> N899: [store i64 %add, i64* %arrayidx8, align 8]
N897 -> N899: [store i64 %add, i64* %arrayidx8, align 8] <--
-- end of trace --
-- start of trace --
Weakness : Null Pointer Dereference
At node  : N909
On edge  : N909 -{call void @free(i8* %13, i8* @free)}-> N910
Message  : null pointer dereference
> Start from entry function: main, At N936 of Function main
> Entering function: good, On N939 -> N861 (call good)
> takes the true branch, At N871 of Function good
> Entering function: _002_good, On N927 -> N721 (call _002_good)
> takes the true branch, At N733 of Function _002_good
> takes the true branch, At N733 of Function _002_good
> takes the false branch, At N733 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the false branch, At N755 of Function _002_good
> takes the true branch, At N750 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the true branch, At N755 of Function _002_good
> takes the false branch, At N755 of Function _002_good
> takes the false branch, At N750 of Function _002_good
> Leaving function: _002_good, On N720 -> N874 (Return edge from _002_good to good)
> takes the true branch, At N876 of Function good
> takes the true branch, At N881 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the true branch, At N886 of Function good
> takes the false branch, At N886 of Function good
<Defect> : N909 -> N910: [call void @free(i8* %13, i8* @free)]
N909 -> N910: [call void @free(i8* %13, i8* @free)] <--
-- end of trace --
=====================================================
CWE_416(Use After Free): 2
	[./457_uninit_memory_access_8.c 90] good 		[N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896]	(the memory is already freed)
	[./457_uninit_memory_access_8.c 90] good 		[N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899]	(the memory is already freed)

CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_memory_access_8.c 90] good 		[N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896]	(use of uninitialized variable)

CWE_476(Null Pointer Dereference): 7
	[./457_uninit_memory_access_8.c 65] _002_good 		[N739 -{%arrayidx = getelementptr inbounds i64*, i64** %4, i64 %idxprom}-> N740]	(null pointer dereference)
	[./457_uninit_memory_access_8.c 71] _002_good 		[N765 -{%arrayidx11 = getelementptr inbounds i64, i64* %12, i64 %idxprom8}-> N766]	(null pointer dereference)
	[./457_uninit_memory_access_8.c 71] _002_good 		[N766 -{store i64 %conv, i64* %arrayidx11, align 8}-> N768]	(null pointer dereference)
	[./457_uninit_memory_access_8.c 90] good 		[N894 -{%arrayidx8 = getelementptr inbounds i64, i64* %7, i64 %idxprom}-> N895]	(null pointer dereference)
	[./457_uninit_memory_access_8.c 90] good 		[N895 -{%8 = load i64, i64* %arrayidx8, align 8}-> N896]	(null pointer dereference)
	[./457_uninit_memory_access_8.c 90] good 		[N897 -{store i64 %add, i64* %arrayidx8, align 8}-> N899]	(null pointer dereference)
	[./457_uninit_memory_access_8.c 92] good 		[N909 -{call void @free(i8* %13, i8* @free)}-> N910]	(null pointer dereference)

Found 10 defects in all (94 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_var_10.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
5 SCCs to deal with
SCC(1): [uninit_var_011_func_001_good]
 +uninit_var_011_func_001_good
SCC(1): [uninit_var_011_good]
 +uninit_var_011_good
SCC(1): [uninit_var_011_func_001_bad]
 +uninit_var_011_func_001_bad
SCC(1): [uninit_var_011_bad]
 +uninit_var_011_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [uninit_var_011_func_001_good, uninit_var_011_good, main, uninit_var_011_bad, uninit_var_011_func_001_bad]
Loops     []
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_011_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_011_func_001_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_011_func_001_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_011_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.004s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N946): +oo]
> [1/1] entry: main ()
N946 -{global: uninit_var_011_good.arr}-> N1035
N1035 -{%retval = alloca i32, align 4}-> N948
N948 -{store i32 0, i32* %retval, align 4}-> N949
N949 -{call uninit_var_011_good}-> N1023
N1023 -{%arr = alloca [6 x i32], align 16}-> N1025
N1025 -{%p = alloca i32, align 4}-> N1027
N1027 -{%0 = bitcast [6 x i32]* %arr to i8*}-> N1028
N1028 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([6 x i32]* @uninit_var_011_good.arr to i8*), i8* 24, i8* 16, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1030
N1030 -{%arraydecay = getelementptr inbounds [6 x i32], [6 x i32]* %arr, i32 0, i32 0}-> N1031
N1031 -{call uninit_var_011_func_001_good}-> N995
N995 -{%arr1.addr = alloca i32*, align 8}-> N997
N997 -{%a.addr = alloca i32, align 4}-> N998
N998 -{%ret = alloca i32, align 4}-> N999
N999 -{store i32* %arr1, i32** %arr1.addr, align 8}-> N1001
N1001 -{store i32 %a, i32* %a.addr, align 4}-> N1004
N1004 -{store i32 0, i32* %ret, align 4}-> N1005
N1005 -{%0 = load i32*, i32** %arr1.addr, align 8}-> N1006
N1006 -{%arrayidx = getelementptr inbounds i32, i32* %0, i64 0}-> N1007
N1007 -{%1 = load i32, i32* %arrayidx, align 4}-> N1008
N1008 -{%cmp = icmp sgt i32 %1, 0}-> N1009
N1009 -{[%cmp = icmp sgt i32 %1, 0]}-> N1020
N1009 -{[!(%cmp = icmp sgt i32 %1, 0)]}-> N1017
N1020 -{%2 = load i32, i32* %a.addr, align 4}-> N1011
N1011 -{%3 = load i32*, i32** %arr1.addr, align 8}-> N1012
N1012 -{%arrayidx1 = getelementptr inbounds i32, i32* %3, i64 1}-> N1013
N1013 -{%4 = load i32, i32* %arrayidx1, align 4}-> N1014
N1014 -{%add = add i32 %2, %4}-> N1015
N1015 -{store i32 %add, i32* %ret, align 4}-> N1017
N1017 -{%5 = load i32, i32* %ret, align 4}-> N1018
N1018 -{ret i32 %5}-> N994
N994 -{Return edge from uninit_var_011_func_001_good to uninit_var_011_good}-> N1032
N1032 -{store i32 %call, i32* %p, align 4}-> N1033
N1033 -{ret void}-> N1022
N1022 -{Return edge from uninit_var_011_good to main}-> N950
N950 -{call uninit_var_011_bad}-> N954
N954 -{%arr = alloca [5 x i32], align 16}-> N956
N956 -{%p = alloca i32, align 4}-> N959
N959 -{%arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 0}-> N960
N960 -{store i32 1, i32* %arrayidx, align 16}-> N961
N961 -{%arraydecay = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i32 0, i32 0}-> N962
N962 -{call uninit_var_011_func_001_bad}-> N967
N967 -{%arr1.addr = alloca i32*, align 8}-> N969
N969 -{%a.addr = alloca i32, align 4}-> N970
N970 -{%ret = alloca i32, align 4}-> N971
N971 -{store i32* %arr1, i32** %arr1.addr, align 8}-> N973
N973 -{store i32 %a, i32* %a.addr, align 4}-> N976
N976 -{store i32 0, i32* %ret, align 4}-> N977
N977 -{%0 = load i32*, i32** %arr1.addr, align 8}-> N978
N978 -{%arrayidx = getelementptr inbounds i32, i32* %0, i64 0}-> N979
N979 -{%1 = load i32, i32* %arrayidx, align 4}-> N980
N980 -{%cmp = icmp sgt i32 %1, 0}-> N981
N981 -{[%cmp = icmp sgt i32 %1, 0]}-> N992
N981 -{[!(%cmp = icmp sgt i32 %1, 0)]}-> N989
N992 -{%2 = load i32, i32* %a.addr, align 4}-> N983
N983 -{%3 = load i32*, i32** %arr1.addr, align 8}-> N984
N984 -{%arrayidx1 = getelementptr inbounds i32, i32* %3, i64 1}-> N985
N985 -{%4 = load i32, i32* %arrayidx1, align 4}-> N986
N986 -{%add = add i32 %2, %4}-> N987
N987 -{store i32 %add, i32* %ret, align 4}-> N989
N989 -{%5 = load i32, i32* %ret, align 4}-> N990
N990 -{ret i32 %5}-> N966
N966 -{Return edge from uninit_var_011_func_001_bad to uninit_var_011_bad}-> N963
N963 -{store i32 %call, i32* %p, align 4}-> N964
N964 -{ret void}-> N953
N953 -{Return edge from uninit_var_011_bad to main}-> N951
N951 -{ret i32 0}-> N945
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N985
On edge  : N985 -{%4 = load i32, i32* %arrayidx1, align 4}-> N986
Message  : use of uninitialized variable
> Start from entry function: main, At N946 of Function main
> Entering function: uninit_var_011_good, On N949 -> N1023 (call uninit_var_011_good)
> Entering function: uninit_var_011_func_001_good, On N1031 -> N995 (call uninit_var_011_func_001_good)
> takes the true branch, At N1009 of Function uninit_var_011_func_001_good
> Leaving function: uninit_var_011_func_001_good, On N994 -> N1032 (Return edge from uninit_var_011_func_001_good to uninit_var_011_good)
> Leaving function: uninit_var_011_good, On N1022 -> N950 (Return edge from uninit_var_011_good to main)
> Entering function: uninit_var_011_bad, On N950 -> N954 (call uninit_var_011_bad)
> Entering function: uninit_var_011_func_001_bad, On N962 -> N967 (call uninit_var_011_func_001_bad)
> takes the true branch, At N981 of Function uninit_var_011_func_001_bad
<Defect> : N985 -> N986: [%4 = load i32, i32* %arrayidx1, align 4]
N985 -> N986: [%4 = load i32, i32* %arrayidx1, align 4] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_var_10.c 9] uninit_var_011_func_001_bad 		[N985 -{%4 = load i32, i32* %arrayidx1, align 4}-> N986]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_var_11.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
3 SCCs to deal with
SCC(1): [uninit_var_012_bad]
 +uninit_var_012_bad
SCC(1): [uninit_var_012_good]
 +uninit_var_012_good
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [uninit_var_012_good, main, uninit_var_012_bad]
Loops     []
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_012_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_012_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.003s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N1037): +oo]
> [1/1] entry: main ()
N1037 -{%retval = alloca i32, align 4}-> N1039
N1039 -{store i32 0, i32* %retval, align 4}-> N1040
N1040 -{call uninit_var_012_good}-> N1061
N1061 -{%s = alloca %struct.uninit_var, align 4}-> N1063
N1063 -{%r = alloca %struct.uninit_var, align 4}-> N1064
N1064 -{%ret = alloca i32, align 4}-> N1067
N1067 -{%a = getelementptr inbounds %struct.uninit_var, %struct.uninit_var* %s, i32 0, i32 0}-> N1068
N1068 -{store i32 2, i32* %a, align 4}-> N1069
N1069 -{%uninit = getelementptr inbounds %struct.uninit_var, %struct.uninit_var* %s, i32 0, i32 1}-> N1070
N1070 -{store i32 2, i32* %uninit, align 4}-> N1072
N1072 -{%a1 = getelementptr inbounds %struct.uninit_var, %struct.uninit_var* %s, i32 0, i32 0}-> N1073
N1073 -{%0 = load i32, i32* %a1, align 4}-> N1074
N1074 -{%uninit2 = getelementptr inbounds %struct.uninit_var, %struct.uninit_var* %s, i32 0, i32 1}-> N1075
N1075 -{%1 = load i32, i32* %uninit2, align 4}-> N1076
N1076 -{%add = add i32 %0, %1}-> N1077
N1077 -{store i32 %add, i32* %ret, align 4}-> N1078
N1078 -{ret void}-> N1060
N1060 -{Return edge from uninit_var_012_good to main}-> N1041
N1041 -{call uninit_var_012_bad}-> N1045
N1045 -{%s = alloca %struct.uninit_var, align 4}-> N1047
N1047 -{%ret = alloca i32, align 4}-> N1049
N1049 -{%a = getelementptr inbounds %struct.uninit_var, %struct.uninit_var* %s, i32 0, i32 0}-> N1050
N1050 -{store i32 2, i32* %a, align 4}-> N1052
N1052 -{%a1 = getelementptr inbounds %struct.uninit_var, %struct.uninit_var* %s, i32 0, i32 0}-> N1053
N1053 -{%0 = load i32, i32* %a1, align 4}-> N1054
N1054 -{%uninit = getelementptr inbounds %struct.uninit_var, %struct.uninit_var* %s, i32 0, i32 1}-> N1055
N1055 -{%1 = load i32, i32* %uninit, align 4}-> N1056
N1056 -{%add = add i32 %0, %1}-> N1057
N1057 -{store i32 %add, i32* %ret, align 4}-> N1058
N1058 -{ret void}-> N1044
N1044 -{Return edge from uninit_var_012_bad to main}-> N1042
N1042 -{ret i32 0}-> N1036
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1055
On edge  : N1055 -{%1 = load i32, i32* %uninit, align 4}-> N1056
Message  : use of uninitialized variable
> Start from entry function: main, At N1037 of Function main
> Entering function: uninit_var_012_good, On N1040 -> N1061 (call uninit_var_012_good)
> Leaving function: uninit_var_012_good, On N1060 -> N1041 (Return edge from uninit_var_012_good to main)
> Entering function: uninit_var_012_bad, On N1041 -> N1045 (call uninit_var_012_bad)
<Defect> : N1055 -> N1056: [%1 = load i32, i32* %uninit, align 4]
N1055 -> N1056: [%1 = load i32, i32* %uninit, align 4] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_var_11.c 15] uninit_var_012_bad 		[N1055 -{%1 = load i32, i32* %uninit, align 4}-> N1056]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_var_12.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
5 SCCs to deal with
SCC(1): [uninit_var_013_func_001_good]
 +uninit_var_013_func_001_good
SCC(1): [uninit_var_013_good]
 +uninit_var_013_good
SCC(1): [uninit_var_013_func_001_bad]
 +uninit_var_013_func_001_bad
SCC(1): [uninit_var_013_bad]
 +uninit_var_013_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [main, uninit_var_013_bad, uninit_var_013_func_001_bad, uninit_var_013_func_001_good, uninit_var_013_good]
Loops     []
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_013_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_013_func_001_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_013_func_001_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_013_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.006s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N1081): +oo]
> [1/1] entry: main ()
N1081 -{%retval = alloca i32, align 4}-> N1083
N1083 -{store i32 0, i32* %retval, align 4}-> N1084
N1084 -{call uninit_var_013_good}-> N1112
N1112 -{%a = alloca i32, align 4}-> N1115
N1115 -{call uninit_var_013_func_001_good}-> N1104
N1104 -{%val = alloca i32, align 4}-> N1107
N1107 -{store i32 1, i32* %val, align 4}-> N1108
N1108 -{%0 = load i32, i32* %val, align 4}-> N1109
N1109 -{ret i32 %0}-> N1103
N1103 -{Return edge from uninit_var_013_func_001_good to uninit_var_013_good}-> N1116
N1116 -{store i32 %call, i32* %a, align 4}-> N1117
N1117 -{ret void}-> N1111
N1111 -{Return edge from uninit_var_013_good to main}-> N1085
N1085 -{call uninit_var_013_bad}-> N1089
N1089 -{%a = alloca i32, align 4}-> N1092
N1092 -{call uninit_var_013_func_001_bad}-> N1097
N1097 -{%val = alloca i32, align 4}-> N1100
N1100 -{%0 = load i32, i32* %val, align 4}-> N1101
N1101 -{ret i32 %0}-> N1096
N1096 -{Return edge from uninit_var_013_func_001_bad to uninit_var_013_bad}-> N1093
N1093 -{store i32 %call, i32* %a, align 4}-> N1094
N1094 -{ret void}-> N1088
N1088 -{Return edge from uninit_var_013_bad to main}-> N1086
N1086 -{ret i32 0}-> N1080
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1100
On edge  : N1100 -{%0 = load i32, i32* %val, align 4}-> N1101
Message  : use of uninitialized variable
> Start from entry function: main, At N1081 of Function main
> Entering function: uninit_var_013_good, On N1084 -> N1112 (call uninit_var_013_good)
> Entering function: uninit_var_013_func_001_good, On N1115 -> N1104 (call uninit_var_013_func_001_good)
> Leaving function: uninit_var_013_func_001_good, On N1103 -> N1116 (Return edge from uninit_var_013_func_001_good to uninit_var_013_good)
> Leaving function: uninit_var_013_good, On N1111 -> N1085 (Return edge from uninit_var_013_good to main)
> Entering function: uninit_var_013_bad, On N1085 -> N1089 (call uninit_var_013_bad)
> Entering function: uninit_var_013_func_001_bad, On N1092 -> N1097 (call uninit_var_013_func_001_bad)
<Defect> : N1100 -> N1101: [%0 = load i32, i32* %val, align 4]
N1100 -> N1101: [%0 = load i32, i32* %val, align 4] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_var_12.c 9] uninit_var_013_func_001_bad 		[N1100 -{%0 = load i32, i32* %val, align 4}-> N1101]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_var_13.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
5 SCCs to deal with
SCC(1): [uninit_var_015_func_001_good]
 +uninit_var_015_func_001_good
SCC(1): [uninit_var_015_good]
 +uninit_var_015_good
SCC(1): [uninit_var_015_func_001_bad]
 +uninit_var_015_func_001_bad
SCC(1): [uninit_var_015_bad]
 +uninit_var_015_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [uninit_var_015_bad, uninit_var_015_func_001_bad, uninit_var_015_func_001_good, uninit_var_015_good, main]
Loops     []
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_015_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_015_func_001_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_015_func_001_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_015_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.002s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N1120): +oo]
> [1/1] entry: main ()
N1120 -{%retval = alloca i32, align 4}-> N1122
N1122 -{store i32 0, i32* %retval, align 4}-> N1123
N1123 -{call uninit_var_015_good}-> N1170
N1170 -{%a = alloca [3 x i32], align 4}-> N1173
N1173 -{%arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %a, i32 0, i32 0}-> N1174
N1174 -{call uninit_var_015_func_001_good}-> N1154
N1154 -{%a.addr = alloca i32*, align 8}-> N1156
N1156 -{store i32* %a, i32** %a.addr, align 8}-> N1158
N1158 -{%0 = load i32*, i32** %a.addr, align 8}-> N1159
N1159 -{%arrayidx = getelementptr inbounds i32, i32* %0, i64 0}-> N1160
N1160 -{store i32 0, i32* %arrayidx, align 4}-> N1161
N1161 -{%1 = load i32*, i32** %a.addr, align 8}-> N1162
N1162 -{%arrayidx1 = getelementptr inbounds i32, i32* %1, i64 1}-> N1163
N1163 -{store i32 1, i32* %arrayidx1, align 4}-> N1164
N1164 -{%2 = load i32*, i32** %a.addr, align 8}-> N1165
N1165 -{%arrayidx2 = getelementptr inbounds i32, i32* %2, i64 2}-> N1166
N1166 -{store i32 2, i32* %arrayidx2, align 4}-> N1167
N1167 -{ret void}-> N1153
N1153 -{Return edge from uninit_var_015_func_001_good to uninit_var_015_good}-> N1175
N1175 -{ret void}-> N1169
N1169 -{Return edge from uninit_var_015_good to main}-> N1124
N1124 -{call uninit_var_015_bad}-> N1128
N1128 -{%a = alloca [3 x i32], align 4}-> N1130
N1130 -{%ret = alloca i32, align 4}-> N1133
N1133 -{%arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %a, i32 0, i32 0}-> N1134
N1134 -{call uninit_var_015_func_001_bad}-> N1141
N1141 -{%a.addr = alloca i32*, align 8}-> N1143
N1143 -{store i32* %a, i32** %a.addr, align 8}-> N1145
N1145 -{%0 = load i32*, i32** %a.addr, align 8}-> N1146
N1146 -{%arrayidx = getelementptr inbounds i32, i32* %0, i64 0}-> N1147
N1147 -{store i32 0, i32* %arrayidx, align 4}-> N1148
N1148 -{%1 = load i32*, i32** %a.addr, align 8}-> N1149
N1149 -{%arrayidx1 = getelementptr inbounds i32, i32* %1, i64 2}-> N1150
N1150 -{store i32 2, i32* %arrayidx1, align 4}-> N1151
N1151 -{ret void}-> N1140
N1140 -{Return edge from uninit_var_015_func_001_bad to uninit_var_015_bad}-> N1135
N1135 -{%arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %a, i64 0, i64 1}-> N1136
N1136 -{%0 = load i32, i32* %arrayidx, align 4}-> N1137
N1137 -{store i32 %0, i32* %ret, align 4}-> N1138
N1138 -{ret void}-> N1127
N1127 -{Return edge from uninit_var_015_bad to main}-> N1125
N1125 -{ret i32 0}-> N1119
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1136
On edge  : N1136 -{%0 = load i32, i32* %arrayidx, align 4}-> N1137
Message  : use of uninitialized variable
> Start from entry function: main, At N1120 of Function main
> Entering function: uninit_var_015_good, On N1123 -> N1170 (call uninit_var_015_good)
> Entering function: uninit_var_015_func_001_good, On N1174 -> N1154 (call uninit_var_015_func_001_good)
> Leaving function: uninit_var_015_func_001_good, On N1153 -> N1175 (Return edge from uninit_var_015_func_001_good to uninit_var_015_good)
> Leaving function: uninit_var_015_good, On N1169 -> N1124 (Return edge from uninit_var_015_good to main)
> Entering function: uninit_var_015_bad, On N1124 -> N1128 (call uninit_var_015_bad)
> Entering function: uninit_var_015_func_001_bad, On N1134 -> N1141 (call uninit_var_015_func_001_bad)
> Leaving function: uninit_var_015_func_001_bad, On N1140 -> N1135 (Return edge from uninit_var_015_func_001_bad to uninit_var_015_bad)
<Defect> : N1136 -> N1137: [%0 = load i32, i32* %arrayidx, align 4]
N1136 -> N1137: [%0 = load i32, i32* %arrayidx, align 4] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_var_13.c 16] uninit_var_015_bad 		[N1136 -{%0 = load i32, i32* %arrayidx, align 4}-> N1137]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_var_14.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
5 SCCs to deal with
SCC(1): [uninit_var_014_func_001_good]
 +uninit_var_014_func_001_good
SCC(1): [uninit_var_014_good]
 +uninit_var_014_good
SCC(1): [uninit_var_014_func_001_bad]
 +uninit_var_014_func_001_bad
SCC(1): [uninit_var_014_bad]
 +uninit_var_014_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [uninit_var_014_func_001_good, uninit_var_014_good, main, uninit_var_014_bad, uninit_var_014_func_001_bad]
Loops     []
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_014_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_014_func_001_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_014_func_001_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_014_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.017s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N1178): +oo]
> [1/1] entry: main ()
N1178 -{%retval = alloca i32, align 4}-> N1180
N1180 -{store i32 0, i32* %retval, align 4}-> N1181
N1181 -{call uninit_var_014_good}-> N1302
N1302 -{%s = alloca %struct.uninit_var_014_s_001, align 4}-> N1304
N1304 -{%r = alloca %struct.uninit_var_014_s_001, align 4}-> N1305
N1305 -{%s.coerce = alloca { i64, i32 }, align 4}-> N1306
N1306 -{%coerce = alloca %struct.uninit_var_014_s_001, align 4}-> N1307
N1307 -{%tmp = alloca { i64, i32 }, align 8}-> N1310
N1310 -{%a = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %s, i32 0, i32 0}-> N1311
N1311 -{store i32 1, i32* %a, align 4}-> N1312
N1312 -{%b = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %s, i32 0, i32 1}-> N1313
N1313 -{store i32 1, i32* %b, align 4}-> N1314
N1314 -{%uninit = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %s, i32 0, i32 2}-> N1315
N1315 -{store i32 1, i32* %uninit, align 4}-> N1316
N1316 -{%0 = bitcast { i64, i32 }* %s.coerce to i8*}-> N1317
N1317 -{%1 = bitcast %struct.uninit_var_014_s_001* %s to i8*}-> N1318
N1318 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i8* 12, i8* 4, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1319
N1319 -{%2 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %s.coerce, i32 0, i32 0}-> N1320
N1320 -{%3 = load i64, i64* %2, align 4}-> N1321
N1321 -{%4 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %s.coerce, i32 0, i32 1}-> N1322
N1322 -{%5 = load i32, i32* %4, align 4}-> N1323
N1323 -{call uninit_var_014_func_001_good}-> N1259
N1259 -{%retval = alloca %struct.uninit_var_014_s_001, align 4}-> N1261
N1261 -{%s1 = alloca %struct.uninit_var_014_s_001, align 4}-> N1262
N1262 -{%coerce = alloca { i64, i32 }, align 4}-> N1263
N1263 -{%ret = alloca %struct.uninit_var_014_s_001, align 4}-> N1264
N1264 -{%tmp = alloca { i64, i32 }, align 8}-> N1265
N1265 -{%0 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %coerce, i32 0, i32 0}-> N1266
N1266 -{store i64 %s1.coerce0, i64* %0, align 4}-> N1267
N1267 -{%1 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %coerce, i32 0, i32 1}-> N1268
N1268 -{store i32 %s1.coerce1, i32* %1, align 4}-> N1269
N1269 -{%2 = bitcast %struct.uninit_var_014_s_001* %s1 to i8*}-> N1270
N1270 -{%3 = bitcast { i64, i32 }* %coerce to i8*}-> N1271
N1271 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i8* 12, i8* 4, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1274
N1274 -{%a = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %s1, i32 0, i32 0}-> N1275
N1275 -{%4 = load i32, i32* %a, align 4}-> N1276
N1276 -{%inc = add i32 %4, 1}-> N1277
N1277 -{store i32 %inc, i32* %a, align 4}-> N1278
N1278 -{%a1 = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %ret, i32 0, i32 0}-> N1279
N1279 -{store i32 %inc, i32* %a1, align 4}-> N1280
N1280 -{%b = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %s1, i32 0, i32 1}-> N1281
N1281 -{%5 = load i32, i32* %b, align 4}-> N1282
N1282 -{%inc2 = add i32 %5, 1}-> N1283
N1283 -{store i32 %inc2, i32* %b, align 4}-> N1284
N1284 -{%b3 = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %ret, i32 0, i32 1}-> N1285
N1285 -{store i32 %inc2, i32* %b3, align 4}-> N1286
N1286 -{%uninit = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %s1, i32 0, i32 2}-> N1287
N1287 -{%6 = load i32, i32* %uninit, align 4}-> N1288
N1288 -{%inc4 = add i32 %6, 1}-> N1289
N1289 -{store i32 %inc4, i32* %uninit, align 4}-> N1290
N1290 -{%uninit5 = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %ret, i32 0, i32 2}-> N1291
N1291 -{store i32 %inc4, i32* %uninit5, align 4}-> N1292
N1292 -{%7 = bitcast %struct.uninit_var_014_s_001* %retval to i8*}-> N1293
N1293 -{%8 = bitcast %struct.uninit_var_014_s_001* %ret to i8*}-> N1294
N1294 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i8* 12, i8* 4, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1295
N1295 -{%9 = bitcast { i64, i32 }* %tmp to i8*}-> N1296
N1296 -{%10 = bitcast %struct.uninit_var_014_s_001* %retval to i8*}-> N1297
N1297 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i8* 12, i8* 4, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1298
N1298 -{%11 = load { i64, i32 }, { i64, i32 }* %tmp, align 8}-> N1299
N1299 -{ret { i64, i32 } %11}-> N1258
N1258 -{Return edge from uninit_var_014_func_001_good to uninit_var_014_good}-> N1324
N1324 -{store { i64, i32 } %call, { i64, i32 }* %tmp, align 8}-> N1325
N1325 -{%6 = bitcast { i64, i32 }* %tmp to i8*}-> N1326
N1326 -{%7 = bitcast %struct.uninit_var_014_s_001* %coerce to i8*}-> N1327
N1327 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %6, i8* 12, i8* 4, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1328
N1328 -{%8 = bitcast %struct.uninit_var_014_s_001* %r to i8*}-> N1329
N1329 -{%9 = bitcast %struct.uninit_var_014_s_001* %coerce to i8*}-> N1330
N1330 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i8* 12, i8* 4, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1331
N1331 -{%a1 = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %r, i32 0, i32 0}-> N1332
N1332 -{store i32 0, i32* %a1, align 4}-> N1333
N1333 -{ret void}-> N1301
N1301 -{Return edge from uninit_var_014_good to main}-> N1182
N1182 -{call uninit_var_014_bad}-> N1186
N1186 -{%s = alloca %struct.uninit_var_014_s_001, align 4}-> N1188
N1188 -{%r = alloca %struct.uninit_var_014_s_001, align 4}-> N1189
N1189 -{%s.coerce = alloca { i64, i32 }, align 4}-> N1190
N1190 -{%coerce = alloca %struct.uninit_var_014_s_001, align 4}-> N1191
N1191 -{%tmp = alloca { i64, i32 }, align 8}-> N1194
N1194 -{%a = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %s, i32 0, i32 0}-> N1195
N1195 -{store i32 1, i32* %a, align 4}-> N1196
N1196 -{%b = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %s, i32 0, i32 1}-> N1197
N1197 -{store i32 1, i32* %b, align 4}-> N1198
N1198 -{%0 = bitcast { i64, i32 }* %s.coerce to i8*}-> N1199
N1199 -{%1 = bitcast %struct.uninit_var_014_s_001* %s to i8*}-> N1200
N1200 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i8* 12, i8* 4, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1201
N1201 -{%2 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %s.coerce, i32 0, i32 0}-> N1202
N1202 -{%3 = load i64, i64* %2, align 4}-> N1203
N1203 -{%4 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %s.coerce, i32 0, i32 1}-> N1204
N1204 -{%5 = load i32, i32* %4, align 4}-> N1205
N1205 -{call uninit_var_014_func_001_bad}-> N1216
N1216 -{%retval = alloca %struct.uninit_var_014_s_001, align 4}-> N1218
N1218 -{%s1 = alloca %struct.uninit_var_014_s_001, align 4}-> N1219
N1219 -{%coerce = alloca { i64, i32 }, align 4}-> N1220
N1220 -{%ret = alloca %struct.uninit_var_014_s_001, align 4}-> N1221
N1221 -{%tmp = alloca { i64, i32 }, align 8}-> N1222
N1222 -{%0 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %coerce, i32 0, i32 0}-> N1223
N1223 -{store i64 %s1.coerce0, i64* %0, align 4}-> N1224
N1224 -{%1 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %coerce, i32 0, i32 1}-> N1225
N1225 -{store i32 %s1.coerce1, i32* %1, align 4}-> N1226
N1226 -{%2 = bitcast %struct.uninit_var_014_s_001* %s1 to i8*}-> N1227
N1227 -{%3 = bitcast { i64, i32 }* %coerce to i8*}-> N1228
N1228 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i8* 12, i8* 4, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1231
N1231 -{%a = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %s1, i32 0, i32 0}-> N1232
N1232 -{%4 = load i32, i32* %a, align 4}-> N1233
N1233 -{%inc = add i32 %4, 1}-> N1234
N1234 -{store i32 %inc, i32* %a, align 4}-> N1235
N1235 -{%a1 = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %ret, i32 0, i32 0}-> N1236
N1236 -{store i32 %inc, i32* %a1, align 4}-> N1237
N1237 -{%b = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %s1, i32 0, i32 1}-> N1238
N1238 -{%5 = load i32, i32* %b, align 4}-> N1239
N1239 -{%inc2 = add i32 %5, 1}-> N1240
N1240 -{store i32 %inc2, i32* %b, align 4}-> N1241
N1241 -{%b3 = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %ret, i32 0, i32 1}-> N1242
N1242 -{store i32 %inc2, i32* %b3, align 4}-> N1243
N1243 -{%uninit = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %s1, i32 0, i32 2}-> N1244
N1244 -{%6 = load i32, i32* %uninit, align 4}-> N1245
N1245 -{%inc4 = add i32 %6, 1}-> N1246
N1246 -{store i32 %inc4, i32* %uninit, align 4}-> N1247
N1247 -{%uninit5 = getelementptr inbounds %struct.uninit_var_014_s_001, %struct.uninit_var_014_s_001* %ret, i32 0, i32 2}-> N1248
N1248 -{store i32 %inc4, i32* %uninit5, align 4}-> N1249
N1249 -{%7 = bitcast %struct.uninit_var_014_s_001* %retval to i8*}-> N1250
N1250 -{%8 = bitcast %struct.uninit_var_014_s_001* %ret to i8*}-> N1251
N1251 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i8* 12, i8* 4, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1252
N1252 -{%9 = bitcast { i64, i32 }* %tmp to i8*}-> N1253
N1253 -{%10 = bitcast %struct.uninit_var_014_s_001* %retval to i8*}-> N1254
N1254 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i8* 12, i8* 4, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1255
N1255 -{%11 = load { i64, i32 }, { i64, i32 }* %tmp, align 8}-> N1256
N1256 -{ret { i64, i32 } %11}-> N1215
N1215 -{Return edge from uninit_var_014_func_001_bad to uninit_var_014_bad}-> N1206
N1206 -{store { i64, i32 } %call, { i64, i32 }* %tmp, align 8}-> N1207
N1207 -{%6 = bitcast { i64, i32 }* %tmp to i8*}-> N1208
N1208 -{%7 = bitcast %struct.uninit_var_014_s_001* %coerce to i8*}-> N1209
N1209 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %6, i8* 12, i8* 4, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1210
N1210 -{%8 = bitcast %struct.uninit_var_014_s_001* %r to i8*}-> N1211
N1211 -{%9 = bitcast %struct.uninit_var_014_s_001* %coerce to i8*}-> N1212
N1212 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i8* 12, i8* 4, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1213
N1213 -{ret void}-> N1185
N1185 -{Return edge from uninit_var_014_bad to main}-> N1183
N1183 -{ret i32 0}-> N1177
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1281
On edge  : N1281 -{%5 = load i32, i32* %b, align 4}-> N1282
Message  : use of uninitialized variable
> Start from entry function: main, At N1178 of Function main
> Entering function: uninit_var_014_good, On N1181 -> N1302 (call uninit_var_014_good)
> Entering function: uninit_var_014_func_001_good, On N1323 -> N1259 (call uninit_var_014_func_001_good)
<Defect> : N1281 -> N1282: [%5 = load i32, i32* %b, align 4]
N1281 -> N1282: [%5 = load i32, i32* %b, align 4] <--
-- end of trace --
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1204
On edge  : N1204 -{%5 = load i32, i32* %4, align 4}-> N1205
Message  : use of uninitialized variable
> Start from entry function: main, At N1178 of Function main
> Entering function: uninit_var_014_good, On N1181 -> N1302 (call uninit_var_014_good)
> Entering function: uninit_var_014_func_001_good, On N1323 -> N1259 (call uninit_var_014_func_001_good)
> Leaving function: uninit_var_014_func_001_good, On N1258 -> N1324 (Return edge from uninit_var_014_func_001_good to uninit_var_014_good)
> Leaving function: uninit_var_014_good, On N1301 -> N1182 (Return edge from uninit_var_014_good to main)
> Entering function: uninit_var_014_bad, On N1182 -> N1186 (call uninit_var_014_bad)
<Defect> : N1204 -> N1205: [%5 = load i32, i32* %4, align 4]
N1204 -> N1205: [%5 = load i32, i32* %4, align 4] <--
-- end of trace --
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1238
On edge  : N1238 -{%5 = load i32, i32* %b, align 4}-> N1239
Message  : use of uninitialized variable
> Start from entry function: main, At N1178 of Function main
> Entering function: uninit_var_014_good, On N1181 -> N1302 (call uninit_var_014_good)
> Entering function: uninit_var_014_func_001_good, On N1323 -> N1259 (call uninit_var_014_func_001_good)
> Leaving function: uninit_var_014_func_001_good, On N1258 -> N1324 (Return edge from uninit_var_014_func_001_good to uninit_var_014_good)
> Leaving function: uninit_var_014_good, On N1301 -> N1182 (Return edge from uninit_var_014_good to main)
> Entering function: uninit_var_014_bad, On N1182 -> N1186 (call uninit_var_014_bad)
> Entering function: uninit_var_014_func_001_bad, On N1205 -> N1216 (call uninit_var_014_func_001_bad)
<Defect> : N1238 -> N1239: [%5 = load i32, i32* %b, align 4]
N1238 -> N1239: [%5 = load i32, i32* %b, align 4] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 3
	[./457_uninit_var_14.c 33] uninit_var_014_func_001_good 		[N1281 -{%5 = load i32, i32* %b, align 4}-> N1282]	(use of uninitialized variable)
	[./457_uninit_var_14.c 23] uninit_var_014_bad 		[N1204 -{%5 = load i32, i32* %4, align 4}-> N1205]	(use of uninitialized variable)
	[./457_uninit_var_14.c 14] uninit_var_014_func_001_bad 		[N1238 -{%5 = load i32, i32* %b, align 4}-> N1239]	(use of uninitialized variable)

Found 3 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS


java.lang.AssertionError: unexpected number of reports 
Expected :3
Actual   :1
 <Click to see difference>


	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:743)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at cn.edu.thu.tsmart.helper.assertion.NumberAssert.is(NumberAssert.java:48)
	at cn.edu.thu.tsmart.helper.assertion.NumberAssert.is(NumberAssert.java:44)
	at cn.edu.thu.tsmart.integrated.ITC_457_Test.lambda$itc_457_var_14$13(ITC_457_Test.java:202)
	at cn.edu.thu.tsmart.helper.assertion.ReportSetAssert.satisfy(ReportSetAssert.java:79)
	at cn.edu.thu.tsmart.integrated.ITC_457_Test.itc_457_var_14(ITC_457_Test.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_var_1.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
3 SCCs to deal with
SCC(1): [uninit_var_001_good]
 +uninit_var_001_good
SCC(1): [uninit_var_001_bad]
 +uninit_var_001_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [uninit_var_001_good, main, uninit_var_001_bad]
Loops     []
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_001_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_001_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.008s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N1336): +oo]
> [1/1] entry: main ()
N1336 -{%retval = alloca i32, align 4}-> N1338
N1338 -{store i32 0, i32* %retval, align 4}-> N1339
N1339 -{call uninit_var_001_good}-> N1354
N1354 -{%a = alloca i32, align 4}-> N1356
N1356 -{%ret = alloca i32, align 4}-> N1358
N1358 -{store i32 0, i32* %a, align 4}-> N1360
N1360 -{%0 = load i32, i32* %a, align 4}-> N1361
N1361 -{store i32 %0, i32* %ret, align 4}-> N1362
N1362 -{ret void}-> N1353
N1353 -{Return edge from uninit_var_001_good to main}-> N1340
N1340 -{call uninit_var_001_bad}-> N1344
N1344 -{%a = alloca i32, align 4}-> N1346
N1346 -{%ret = alloca i32, align 4}-> N1349
N1349 -{%0 = load i32, i32* %a, align 4}-> N1350
N1350 -{store i32 %0, i32* %ret, align 4}-> N1351
N1351 -{ret void}-> N1343
N1343 -{Return edge from uninit_var_001_bad to main}-> N1341
N1341 -{ret i32 0}-> N1335
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1349
On edge  : N1349 -{%0 = load i32, i32* %a, align 4}-> N1350
Message  : use of uninitialized variable
> Start from entry function: main, At N1336 of Function main
> Entering function: uninit_var_001_good, On N1339 -> N1354 (call uninit_var_001_good)
> Leaving function: uninit_var_001_good, On N1353 -> N1340 (Return edge from uninit_var_001_good to main)
> Entering function: uninit_var_001_bad, On N1340 -> N1344 (call uninit_var_001_bad)
<Defect> : N1349 -> N1350: [%0 = load i32, i32* %a, align 4]
N1349 -> N1350: [%0 = load i32, i32* %a, align 4] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_var_1.c 8] uninit_var_001_bad 		[N1349 -{%0 = load i32, i32* %a, align 4}-> N1350]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_var_2.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
3 SCCs to deal with
SCC(1): [uninit_var_002_good]
 +uninit_var_002_good
SCC(1): [uninit_var_002_bad]
 +uninit_var_002_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [uninit_var_002_good, main, uninit_var_002_bad]
Loops     []
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_002_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_002_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.001s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N1365): +oo]
> [1/1] entry: main ()
N1365 -{global: uninit_var_002_good.buf}-> N1396
N1396 -{%retval = alloca i32, align 4}-> N1367
N1367 -{store i32 0, i32* %retval, align 4}-> N1368
N1368 -{call uninit_var_002_good}-> N1384
N1384 -{%buf = alloca [5 x i32], align 16}-> N1386
N1386 -{%ret = alloca i32, align 4}-> N1388
N1388 -{%0 = bitcast [5 x i32]* %buf to i8*}-> N1389
N1389 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([5 x i32]* @uninit_var_002_good.buf to i8*), i8* 20, i8* 16, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1391
N1391 -{%arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %buf, i64 0, i64 3}-> N1392
N1392 -{%1 = load i32, i32* %arrayidx, align 4}-> N1393
N1393 -{store i32 %1, i32* %ret, align 4}-> N1394
N1394 -{ret void}-> N1383
N1383 -{Return edge from uninit_var_002_good to main}-> N1369
N1369 -{call uninit_var_002_bad}-> N1373
N1373 -{%buf = alloca [5 x i32], align 16}-> N1375
N1375 -{%ret = alloca i32, align 4}-> N1378
N1378 -{%arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %buf, i64 0, i64 3}-> N1379
N1379 -{%0 = load i32, i32* %arrayidx, align 4}-> N1380
N1380 -{store i32 %0, i32* %ret, align 4}-> N1381
N1381 -{ret void}-> N1372
N1372 -{Return edge from uninit_var_002_bad to main}-> N1370
N1370 -{ret i32 0}-> N1364
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1379
On edge  : N1379 -{%0 = load i32, i32* %arrayidx, align 4}-> N1380
Message  : use of uninitialized variable
> Start from entry function: main, At N1365 of Function main
> Entering function: uninit_var_002_good, On N1368 -> N1384 (call uninit_var_002_good)
> Leaving function: uninit_var_002_good, On N1383 -> N1369 (Return edge from uninit_var_002_good to main)
> Entering function: uninit_var_002_bad, On N1369 -> N1373 (call uninit_var_002_bad)
<Defect> : N1379 -> N1380: [%0 = load i32, i32* %arrayidx, align 4]
N1379 -> N1380: [%0 = load i32, i32* %arrayidx, align 4] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_var_2.c 8] uninit_var_002_bad 		[N1379 -{%0 = load i32, i32* %arrayidx, align 4}-> N1380]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_var_3.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
3 SCCs to deal with
SCC(1): [uninit_var_003_good]
 +uninit_var_003_good
SCC(1): [uninit_var_003_bad]
 +uninit_var_003_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [main, uninit_var_003_bad, uninit_var_003_good]
Loops     []
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_003_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_003_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.001s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N1398): +oo]
> [1/1] entry: main ()
N1398 -{global: uninit_var_003_good.buf}-> N1431
N1431 -{%retval = alloca i32, align 4}-> N1400
N1400 -{store i32 0, i32* %retval, align 4}-> N1401
N1401 -{call uninit_var_003_good}-> N1418
N1418 -{%buf = alloca [5 x [6 x i32]], align 16}-> N1420
N1420 -{%ret = alloca i32, align 4}-> N1422
N1422 -{%0 = bitcast [5 x [6 x i32]]* %buf to i8*}-> N1423
N1423 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([5 x [6 x i32]]* @uninit_var_003_good.buf to i8*), i8* 120, i8* 16, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1425
N1425 -{%arrayidx = getelementptr inbounds [5 x [6 x i32]], [5 x [6 x i32]]* %buf, i64 0, i64 1}-> N1426
N1426 -{%arrayidx1 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 1}-> N1427
N1427 -{%1 = load i32, i32* %arrayidx1, align 4}-> N1428
N1428 -{store i32 %1, i32* %ret, align 4}-> N1429
N1429 -{ret void}-> N1417
N1417 -{Return edge from uninit_var_003_good to main}-> N1402
N1402 -{call uninit_var_003_bad}-> N1406
N1406 -{%buf = alloca [5 x [6 x i32]], align 16}-> N1408
N1408 -{%ret = alloca i32, align 4}-> N1411
N1411 -{%arrayidx = getelementptr inbounds [5 x [6 x i32]], [5 x [6 x i32]]* %buf, i64 0, i64 1}-> N1412
N1412 -{%arrayidx1 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 1}-> N1413
N1413 -{%0 = load i32, i32* %arrayidx1, align 4}-> N1414
N1414 -{store i32 %0, i32* %ret, align 4}-> N1415
N1415 -{ret void}-> N1405
N1405 -{Return edge from uninit_var_003_bad to main}-> N1403
N1403 -{ret i32 0}-> N1397
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1413
On edge  : N1413 -{%0 = load i32, i32* %arrayidx1, align 4}-> N1414
Message  : use of uninitialized variable
> Start from entry function: main, At N1398 of Function main
> Entering function: uninit_var_003_good, On N1401 -> N1418 (call uninit_var_003_good)
> Leaving function: uninit_var_003_good, On N1417 -> N1402 (Return edge from uninit_var_003_good to main)
> Entering function: uninit_var_003_bad, On N1402 -> N1406 (call uninit_var_003_bad)
<Defect> : N1413 -> N1414: [%0 = load i32, i32* %arrayidx1, align 4]
N1413 -> N1414: [%0 = load i32, i32* %arrayidx1, align 4] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_var_3.c 8] uninit_var_003_bad 		[N1413 -{%0 = load i32, i32* %arrayidx1, align 4}-> N1414]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_var_4.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
5 SCCs to deal with
SCC(1): [uninit_var_005_func_001_good]
 +uninit_var_005_func_001_good
SCC(1): [uninit_var_005_good]
 +uninit_var_005_good
SCC(1): [uninit_var_005_func_001_bad]
 +uninit_var_005_func_001_bad
SCC(1): [uninit_var_005_bad]
 +uninit_var_005_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [uninit_var_005_bad, uninit_var_005_func_001_bad, uninit_var_005_func_001_good, uninit_var_005_good, main]
Loops     []
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_005_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_005_func_001_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_005_func_001_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_005_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.003s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N1433): +oo]
> [1/1] entry: main ()
N1433 -{%retval = alloca i32, align 4}-> N1435
N1435 -{store i32 0, i32* %retval, align 4}-> N1436
N1436 -{call uninit_var_005_good}-> N1464
N1464 -{%a = alloca i32, align 4}-> N1467
N1467 -{call uninit_var_005_func_001_good}-> N1456
N1456 -{%ret = alloca i32, align 4}-> N1459
N1459 -{store i32 1, i32* %ret, align 4}-> N1460
N1460 -{%0 = load i32, i32* %ret, align 4}-> N1461
N1461 -{ret i32 %0}-> N1455
N1455 -{Return edge from uninit_var_005_func_001_good to uninit_var_005_good}-> N1468
N1468 -{store i32 %call, i32* %a, align 4}-> N1469
N1469 -{ret void}-> N1463
N1463 -{Return edge from uninit_var_005_good to main}-> N1437
N1437 -{call uninit_var_005_bad}-> N1441
N1441 -{%a = alloca i32, align 4}-> N1444
N1444 -{call uninit_var_005_func_001_bad}-> N1449
N1449 -{%ret = alloca i32, align 4}-> N1452
N1452 -{%0 = load i32, i32* %ret, align 4}-> N1453
N1453 -{ret i32 %0}-> N1448
N1448 -{Return edge from uninit_var_005_func_001_bad to uninit_var_005_bad}-> N1445
N1445 -{store i32 %call, i32* %a, align 4}-> N1446
N1446 -{ret void}-> N1440
N1440 -{Return edge from uninit_var_005_bad to main}-> N1438
N1438 -{ret i32 0}-> N1432
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1452
On edge  : N1452 -{%0 = load i32, i32* %ret, align 4}-> N1453
Message  : use of uninitialized variable
> Start from entry function: main, At N1433 of Function main
> Entering function: uninit_var_005_good, On N1436 -> N1464 (call uninit_var_005_good)
> Entering function: uninit_var_005_func_001_good, On N1467 -> N1456 (call uninit_var_005_func_001_good)
> Leaving function: uninit_var_005_func_001_good, On N1455 -> N1468 (Return edge from uninit_var_005_func_001_good to uninit_var_005_good)
> Leaving function: uninit_var_005_good, On N1463 -> N1437 (Return edge from uninit_var_005_good to main)
> Entering function: uninit_var_005_bad, On N1437 -> N1441 (call uninit_var_005_bad)
> Entering function: uninit_var_005_func_001_bad, On N1444 -> N1449 (call uninit_var_005_func_001_bad)
<Defect> : N1452 -> N1453: [%0 = load i32, i32* %ret, align 4]
N1452 -> N1453: [%0 = load i32, i32* %ret, align 4] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_var_4.c 9] uninit_var_005_func_001_bad 		[N1452 -{%0 = load i32, i32* %ret, align 4}-> N1453]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_var_5.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
3 SCCs to deal with
SCC(1): [uninit_var_006_good]
 +uninit_var_006_good
SCC(1): [uninit_var_006_bad]
 +uninit_var_006_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [main, uninit_var_006_bad, uninit_var_006_good]
Loops     []
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_006_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_006_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.002s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N1472): +oo]
> [1/1] entry: main ()
N1472 -{%retval = alloca i32, align 4}-> N1474
N1474 -{store i32 0, i32* %retval, align 4}-> N1475
N1475 -{call uninit_var_006_good}-> N1503
N1503 -{%a = alloca i64, align 8}-> N1505
N1505 -{%flag = alloca i32, align 4}-> N1508
N1508 -{store i32 10, i32* %flag, align 4}-> N1509
N1509 -{%0 = load i32, i32* %flag, align 4}-> N1510
N1510 -{%cmp = icmp eq i32 %0, 10}-> N1511
N1511 -{[%cmp = icmp eq i32 %0, 10]}-> N1518
N1511 -{[!(%cmp = icmp eq i32 %0, 10)]}-> N1519
N1518 -{store i64 1, i64* %a, align 8}-> N1513
N1513 -{[1]}-> N1516
N1516 -{ret void}-> N1502
N1502 -{Return edge from uninit_var_006_good to main}-> N1476
N1476 -{call uninit_var_006_bad}-> N1480
N1480 -{%a = alloca i64, align 8}-> N1482
N1482 -{%flag = alloca i32, align 4}-> N1485
N1485 -{store i32 0, i32* %flag, align 4}-> N1486
N1486 -{%0 = load i32, i32* %flag, align 4}-> N1487
N1487 -{%cmp = icmp eq i32 %0, 10}-> N1488
N1488 -{[%cmp = icmp eq i32 %0, 10]}-> N1498
N1488 -{[!(%cmp = icmp eq i32 %0, 10)]}-> N1499
N1499 -{%1 = load i64, i64* %a, align 8}-> N1492
N1492 -{%conv = trunc i64 %1 to i32}-> N1493
N1493 -{store i32 %conv, i32* %flag, align 4}-> N1494
N1494 -{%conv1 = sext i32 %conv to i64}-> N1495
N1495 -{[%conv1 = sext i32 %conv to i64]}-> N1496
N1496 -{ret void}-> N1479
N1479 -{Return edge from uninit_var_006_bad to main}-> N1477
N1477 -{ret i32 0}-> N1471
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1499
On edge  : N1499 -{%1 = load i64, i64* %a, align 8}-> N1492
Message  : use of uninitialized variable
> Start from entry function: main, At N1472 of Function main
> Entering function: uninit_var_006_good, On N1475 -> N1503 (call uninit_var_006_good)
> takes the true branch, At N1511 of Function uninit_var_006_good
> Leaving function: uninit_var_006_good, On N1502 -> N1476 (Return edge from uninit_var_006_good to main)
> Entering function: uninit_var_006_bad, On N1476 -> N1480 (call uninit_var_006_bad)
> takes the false branch, At N1488 of Function uninit_var_006_bad
<Defect> : N1499 -> N1492: [%1 = load i64, i64* %a, align 8]
N1499 -> N1492: [%1 = load i64, i64* %a, align 8] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_var_5.c 8] uninit_var_006_bad 		[N1499 -{%1 = load i64, i64* %a, align 8}-> N1492]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_var_6.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
3 SCCs to deal with
SCC(1): [uninit_var_007_bad]
 +uninit_var_007_bad
SCC(1): [uninit_var_007_good]
 +uninit_var_007_good
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [main, uninit_var_007_bad, uninit_var_007_good]
Loops     []
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_007_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_007_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.003s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N1523): +oo]
> [1/1] entry: main ()
N1523 -{%retval = alloca i32, align 4}-> N1525
N1525 -{store i32 0, i32* %retval, align 4}-> N1526
N1526 -{call uninit_var_007_good}-> N1546
N1546 -{%s = alloca %struct.uninit_var_007_s_001, align 4}-> N1548
N1548 -{%ret = alloca i32, align 4}-> N1551
N1551 -{%a = getelementptr inbounds %struct.uninit_var_007_s_001, %struct.uninit_var_007_s_001* %s, i32 0, i32 0}-> N1552
N1552 -{store i32 1, i32* %a, align 4}-> N1553
N1553 -{%b = getelementptr inbounds %struct.uninit_var_007_s_001, %struct.uninit_var_007_s_001* %s, i32 0, i32 1}-> N1554
N1554 -{store i32 1, i32* %b, align 4}-> N1555
N1555 -{%uninit = getelementptr inbounds %struct.uninit_var_007_s_001, %struct.uninit_var_007_s_001* %s, i32 0, i32 2}-> N1556
N1556 -{store i32 1, i32* %uninit, align 4}-> N1557
N1557 -{%uninit1 = getelementptr inbounds %struct.uninit_var_007_s_001, %struct.uninit_var_007_s_001* %s, i32 0, i32 2}-> N1558
N1558 -{%0 = load i32, i32* %uninit1, align 4}-> N1559
N1559 -{store i32 %0, i32* %ret, align 4}-> N1560
N1560 -{ret void}-> N1545
N1545 -{Return edge from uninit_var_007_good to main}-> N1527
N1527 -{call uninit_var_007_bad}-> N1531
N1531 -{%s = alloca %struct.uninit_var_007_s_001, align 4}-> N1533
N1533 -{%ret = alloca i32, align 4}-> N1536
N1536 -{%a = getelementptr inbounds %struct.uninit_var_007_s_001, %struct.uninit_var_007_s_001* %s, i32 0, i32 0}-> N1537
N1537 -{store i32 1, i32* %a, align 4}-> N1538
N1538 -{%b = getelementptr inbounds %struct.uninit_var_007_s_001, %struct.uninit_var_007_s_001* %s, i32 0, i32 1}-> N1539
N1539 -{store i32 1, i32* %b, align 4}-> N1540
N1540 -{%uninit = getelementptr inbounds %struct.uninit_var_007_s_001, %struct.uninit_var_007_s_001* %s, i32 0, i32 2}-> N1541
N1541 -{%0 = load i32, i32* %uninit, align 4}-> N1542
N1542 -{store i32 %0, i32* %ret, align 4}-> N1543
N1543 -{ret void}-> N1530
N1530 -{Return edge from uninit_var_007_bad to main}-> N1528
N1528 -{ret i32 0}-> N1522
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1541
On edge  : N1541 -{%0 = load i32, i32* %uninit, align 4}-> N1542
Message  : use of uninitialized variable
> Start from entry function: main, At N1523 of Function main
> Entering function: uninit_var_007_good, On N1526 -> N1546 (call uninit_var_007_good)
> Leaving function: uninit_var_007_good, On N1545 -> N1527 (Return edge from uninit_var_007_good to main)
> Entering function: uninit_var_007_bad, On N1527 -> N1531 (call uninit_var_007_bad)
<Defect> : N1541 -> N1542: [%0 = load i32, i32* %uninit, align 4]
N1541 -> N1542: [%0 = load i32, i32* %uninit, align 4] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_var_6.c 16] uninit_var_007_bad 		[N1541 -{%0 = load i32, i32* %uninit, align 4}-> N1542]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_var_7.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
3 SCCs to deal with
SCC(1): [_bad]
 +_bad
SCC(1): [u_bad]
 +u_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [main, u_bad, _bad]
Loops     [N1589]
----
function: _bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: u_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
loop N1589 in u_bad: 
N1589 -> P+ = [], P- = [] Point-To: 
N1592 -> P+ = [], P- = [] Point-To: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.002s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N1575): +oo]
> [1/1] entry: main ()
N1575 -{global: _bad.ret_good}-> N1602
N1602 -{%retval = alloca i32, align 4}-> N1577
N1577 -{store i32 0, i32* %retval, align 4}-> N1578
N1578 -{call u_bad}-> N1582
N1582 -{%flag = alloca i32, align 4}-> N1584
N1584 -{%data = alloca i32, align 4}-> N1586
N1586 -{store i32 1, i32* %flag, align 4}-> N1589
N1589 -{%0 = load i32, i32* %flag, align 4}-> N1590
N1589 -{@}-> N1589
N1589 -{@}-> N1592
N1590 -{call _bad}-> N1563
N1563 -{%a.addr = alloca i32, align 4}-> N1565
N1565 -{store i32 %a, i32* %a.addr, align 4}-> N1567
N1567 -{%0 = load i32, i32* %a.addr, align 4}-> N1568
N1568 -{%1 = load i32, i32* @_bad.ret_good, align 4}-> N1569
N1569 -{%sub = sub i32 %1, %0}-> N1570
N1570 -{store i32 %sub, i32* @_bad.ret_good, align 4}-> N1571
N1571 -{%2 = load i32, i32* @_bad.ret_good, align 4}-> N1572
N1572 -{ret i32 %2}-> N1562
N1562 -{Return edge from _bad to u_bad}-> N1591
N1591 -{%cmp = icmp sgt i32 %call, 0}-> N1592
N1592 -{[%cmp = icmp sgt i32 %call, 0]}-> N1600
N1592 -{[!(%cmp = icmp sgt i32 %call, 0)]}-> N1601
N1600 -{%1 = load i32, i32* %flag, align 4}-> N1594
N1594 -{%2 = load i32, i32* %data, align 4}-> N1595
N1595 -{%add = add i32 %2, %1}-> N1596
N1596 -{store i32 %add, i32* %data, align 4}-> N1589
N1589 -{%0 = load i32, i32* %flag, align 4}-> N1590
N1590 -{call _bad}-> N1563
N1563 -{%a.addr = alloca i32, align 4}-> N1565
N1565 -{store i32 %a, i32* %a.addr, align 4}-> N1567
N1567 -{%0 = load i32, i32* %a.addr, align 4}-> N1568
N1568 -{%1 = load i32, i32* @_bad.ret_good, align 4}-> N1569
N1569 -{%sub = sub i32 %1, %0}-> N1570
N1570 -{store i32 %sub, i32* @_bad.ret_good, align 4}-> N1571
N1571 -{%2 = load i32, i32* @_bad.ret_good, align 4}-> N1572
N1572 -{ret i32 %2}-> N1562
N1562 -{Return edge from _bad to u_bad}-> N1591
N1591 -{%cmp = icmp sgt i32 %call, 0}-> N1592
N1592 -{[%cmp = icmp sgt i32 %call, 0]}-> N1600
N1592 -{[!(%cmp = icmp sgt i32 %call, 0)]}-> N1601
N1600 -{%1 = load i32, i32* %flag, align 4}-> N1594
N1594 -{%2 = load i32, i32* %data, align 4}-> N1595
N1595 -{%add = add i32 %2, %1}-> N1596
N1596 -{store i32 %add, i32* %data, align 4}-> N1589
N1589 -{%0 = load i32, i32* %flag, align 4}-> N1590
N1590 -{call _bad}-> N1563
N1563 -{%a.addr = alloca i32, align 4}-> N1565
N1565 -{store i32 %a, i32* %a.addr, align 4}-> N1567
N1567 -{%0 = load i32, i32* %a.addr, align 4}-> N1568
N1568 -{%1 = load i32, i32* @_bad.ret_good, align 4}-> N1569
N1569 -{%sub = sub i32 %1, %0}-> N1570
N1570 -{store i32 %sub, i32* @_bad.ret_good, align 4}-> N1571
N1571 -{%2 = load i32, i32* @_bad.ret_good, align 4}-> N1572
N1572 -{ret i32 %2}-> N1562
N1562 -{Return edge from _bad to u_bad}-> N1591
N1591 -{%cmp = icmp sgt i32 %call, 0}-> N1592
N1592 -{[%cmp = icmp sgt i32 %call, 0]}-> N1600
N1592 -{[!(%cmp = icmp sgt i32 %call, 0)]}-> N1601
N1600 -{%1 = load i32, i32* %flag, align 4}-> N1594
N1594 -{%2 = load i32, i32* %data, align 4}-> N1595
N1595 -{%add = add i32 %2, %1}-> N1596
N1596 -{store i32 %add, i32* %data, align 4}-> N1589
N1589 -{%0 = load i32, i32* %flag, align 4}-> N1590
N1590 -{call _bad}-> N1563
N1563 -{%a.addr = alloca i32, align 4}-> N1565
N1565 -{store i32 %a, i32* %a.addr, align 4}-> N1567
N1567 -{%0 = load i32, i32* %a.addr, align 4}-> N1568
N1568 -{%1 = load i32, i32* @_bad.ret_good, align 4}-> N1569
N1569 -{%sub = sub i32 %1, %0}-> N1570
N1570 -{store i32 %sub, i32* @_bad.ret_good, align 4}-> N1571
N1571 -{%2 = load i32, i32* @_bad.ret_good, align 4}-> N1572
N1572 -{ret i32 %2}-> N1562
N1562 -{Return edge from _bad to u_bad}-> N1591
N1591 -{%cmp = icmp sgt i32 %call, 0}-> N1592
N1592 -{[%cmp = icmp sgt i32 %call, 0]}-> N1600
N1592 -{[!(%cmp = icmp sgt i32 %call, 0)]}-> N1601
N1600 -{%1 = load i32, i32* %flag, align 4}-> N1594
N1594 -{%2 = load i32, i32* %data, align 4}-> N1595
N1595 -{%add = add i32 %2, %1}-> N1596
N1596 -{store i32 %add, i32* %data, align 4}-> N1589
N1589 -{%0 = load i32, i32* %flag, align 4}-> N1590
N1590 -{call _bad}-> N1563
N1563 -{%a.addr = alloca i32, align 4}-> N1565
N1565 -{store i32 %a, i32* %a.addr, align 4}-> N1567
N1567 -{%0 = load i32, i32* %a.addr, align 4}-> N1568
N1568 -{%1 = load i32, i32* @_bad.ret_good, align 4}-> N1569
N1569 -{%sub = sub i32 %1, %0}-> N1570
N1570 -{store i32 %sub, i32* @_bad.ret_good, align 4}-> N1571
N1571 -{%2 = load i32, i32* @_bad.ret_good, align 4}-> N1572
N1572 -{ret i32 %2}-> N1562
N1562 -{Return edge from _bad to u_bad}-> N1591
N1591 -{%cmp = icmp sgt i32 %call, 0}-> N1592
N1592 -{[%cmp = icmp sgt i32 %call, 0]}-> N1600
N1592 -{[!(%cmp = icmp sgt i32 %call, 0)]}-> N1601
N1600 -{%1 = load i32, i32* %flag, align 4}-> N1594
N1594 -{%2 = load i32, i32* %data, align 4}-> N1595
N1595 -{%add = add i32 %2, %1}-> N1596
N1596 -{store i32 %add, i32* %data, align 4}-> N1589
N1589 -{%0 = load i32, i32* %flag, align 4}-> N1590
N1590 -{call _bad}-> N1563
N1563 -{%a.addr = alloca i32, align 4}-> N1565
N1565 -{store i32 %a, i32* %a.addr, align 4}-> N1567
N1567 -{%0 = load i32, i32* %a.addr, align 4}-> N1568
N1568 -{%1 = load i32, i32* @_bad.ret_good, align 4}-> N1569
N1569 -{%sub = sub i32 %1, %0}-> N1570
N1570 -{store i32 %sub, i32* @_bad.ret_good, align 4}-> N1571
N1571 -{%2 = load i32, i32* @_bad.ret_good, align 4}-> N1572
N1572 -{ret i32 %2}-> N1562
N1562 -{Return edge from _bad to u_bad}-> N1591
N1591 -{%cmp = icmp sgt i32 %call, 0}-> N1592
N1592 -{[%cmp = icmp sgt i32 %call, 0]}-> N1600
N1592 -{[!(%cmp = icmp sgt i32 %call, 0)]}-> N1601
N1600 -{%1 = load i32, i32* %flag, align 4}-> N1594
N1594 -{%2 = load i32, i32* %data, align 4}-> N1595
N1595 -{%add = add i32 %2, %1}-> N1596
N1596 -{store i32 %add, i32* %data, align 4}-> N1589
N1589 -{%0 = load i32, i32* %flag, align 4}-> N1590
N1590 -{call _bad}-> N1563
N1563 -{%a.addr = alloca i32, align 4}-> N1565
N1565 -{store i32 %a, i32* %a.addr, align 4}-> N1567
N1567 -{%0 = load i32, i32* %a.addr, align 4}-> N1568
N1568 -{%1 = load i32, i32* @_bad.ret_good, align 4}-> N1569
N1569 -{%sub = sub i32 %1, %0}-> N1570
N1570 -{store i32 %sub, i32* @_bad.ret_good, align 4}-> N1571
N1571 -{%2 = load i32, i32* @_bad.ret_good, align 4}-> N1572
N1572 -{ret i32 %2}-> N1562
N1562 -{Return edge from _bad to u_bad}-> N1591
N1591 -{%cmp = icmp sgt i32 %call, 0}-> N1592
N1592 -{[%cmp = icmp sgt i32 %call, 0]}-> N1600
N1592 -{[!(%cmp = icmp sgt i32 %call, 0)]}-> N1601
N1600 -{%1 = load i32, i32* %flag, align 4}-> N1594
N1594 -{%2 = load i32, i32* %data, align 4}-> N1595
N1595 -{%add = add i32 %2, %1}-> N1596
N1596 -{store i32 %add, i32* %data, align 4}-> N1589
N1589 -{%0 = load i32, i32* %flag, align 4}-> N1590
N1590 -{call _bad}-> N1563
N1563 -{%a.addr = alloca i32, align 4}-> N1565
N1565 -{store i32 %a, i32* %a.addr, align 4}-> N1567
N1567 -{%0 = load i32, i32* %a.addr, align 4}-> N1568
N1568 -{%1 = load i32, i32* @_bad.ret_good, align 4}-> N1569
N1569 -{%sub = sub i32 %1, %0}-> N1570
N1570 -{store i32 %sub, i32* @_bad.ret_good, align 4}-> N1571
N1571 -{%2 = load i32, i32* @_bad.ret_good, align 4}-> N1572
N1572 -{ret i32 %2}-> N1562
N1562 -{Return edge from _bad to u_bad}-> N1591
N1591 -{%cmp = icmp sgt i32 %call, 0}-> N1592
N1592 -{[%cmp = icmp sgt i32 %call, 0]}-> N1600
N1592 -{[!(%cmp = icmp sgt i32 %call, 0)]}-> N1601
N1600 -{%1 = load i32, i32* %flag, align 4}-> N1594
N1594 -{%2 = load i32, i32* %data, align 4}-> N1595
N1595 -{%add = add i32 %2, %1}-> N1596
N1596 -{store i32 %add, i32* %data, align 4}-> N1589
N1589 -{%0 = load i32, i32* %flag, align 4}-> N1590
N1590 -{call _bad}-> N1563
N1563 -{%a.addr = alloca i32, align 4}-> N1565
N1565 -{store i32 %a, i32* %a.addr, align 4}-> N1567
N1567 -{%0 = load i32, i32* %a.addr, align 4}-> N1568
N1568 -{%1 = load i32, i32* @_bad.ret_good, align 4}-> N1569
N1569 -{%sub = sub i32 %1, %0}-> N1570
N1570 -{store i32 %sub, i32* @_bad.ret_good, align 4}-> N1571
N1571 -{%2 = load i32, i32* @_bad.ret_good, align 4}-> N1572
N1572 -{ret i32 %2}-> N1562
N1562 -{Return edge from _bad to u_bad}-> N1591
N1591 -{%cmp = icmp sgt i32 %call, 0}-> N1592
N1592 -{[%cmp = icmp sgt i32 %call, 0]}-> N1600
N1592 -{[!(%cmp = icmp sgt i32 %call, 0)]}-> N1601
N1600 -{%1 = load i32, i32* %flag, align 4}-> N1594
N1594 -{%2 = load i32, i32* %data, align 4}-> N1595
N1595 -{%add = add i32 %2, %1}-> N1596
N1596 -{store i32 %add, i32* %data, align 4}-> N1589
N1589 -{%0 = load i32, i32* %flag, align 4}-> N1590
N1590 -{call _bad}-> N1563
N1563 -{%a.addr = alloca i32, align 4}-> N1565
N1565 -{store i32 %a, i32* %a.addr, align 4}-> N1567
N1567 -{%0 = load i32, i32* %a.addr, align 4}-> N1568
N1568 -{%1 = load i32, i32* @_bad.ret_good, align 4}-> N1569
N1569 -{%sub = sub i32 %1, %0}-> N1570
N1570 -{store i32 %sub, i32* @_bad.ret_good, align 4}-> N1571
N1571 -{%2 = load i32, i32* @_bad.ret_good, align 4}-> N1572
N1572 -{ret i32 %2}-> N1562
N1562 -{Return edge from _bad to u_bad}-> N1591
N1591 -{%cmp = icmp sgt i32 %call, 0}-> N1592
N1592 -{[%cmp = icmp sgt i32 %call, 0]}-> N1600
N1592 -{[!(%cmp = icmp sgt i32 %call, 0)]}-> N1601
N1601 -{ret void}-> N1581
N1581 -{Return edge from u_bad to main}-> N1579
N1579 -{ret i32 0}-> N1574
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1594
On edge  : N1594 -{%2 = load i32, i32* %data, align 4}-> N1595
Message  : use of uninitialized variable
> Start from entry function: main, At N1575 of Function main
> Entering function: u_bad, On N1578 -> N1582 (call u_bad)
> Entering function: _bad, On N1590 -> N1563 (call _bad)
> Leaving function: _bad, On N1562 -> N1591 (Return edge from _bad to u_bad)
> takes the true branch, At N1592 of Function u_bad
<Defect> : N1594 -> N1595: [%2 = load i32, i32* %data, align 4]
N1594 -> N1595: [%2 = load i32, i32* %data, align 4] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_var_7.c 36] u_bad 		[N1594 -{%2 = load i32, i32* %data, align 4}-> N1595]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_var_8.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
5 SCCs to deal with
SCC(1): [uninit_var_009_func_001_good]
 +uninit_var_009_func_001_good
SCC(1): [uninit_var_009_good]
 +uninit_var_009_good
SCC(1): [uninit_var_009_func_001_bad]
 +uninit_var_009_func_001_bad
SCC(1): [uninit_var_009_bad]
 +uninit_var_009_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [uninit_var_009_good, main, uninit_var_009_bad, uninit_var_009_func_001_bad, uninit_var_009_func_001_good]
Loops     []
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_009_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_009_func_001_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_009_func_001_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_009_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.003s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N1604): +oo]
> [1/1] entry: main ()
N1604 -{global: uninit_var_009_func_001_good.ret}-> N1653
N1653 -{%retval = alloca i32, align 4}-> N1606
N1606 -{store i32 0, i32* %retval, align 4}-> N1607
N1607 -{call uninit_var_009_good}-> N1646
N1646 -{%buf = alloca [25 x i8], align 16}-> N1649
N1649 -{%arraydecay = getelementptr inbounds [25 x i8], [25 x i8]* %buf, i32 0, i32 0}-> N1650
N1650 -{call uninit_var_009_func_001_good}-> N1632
N1632 -{%buf.addr = alloca i8*, align 8}-> N1634
N1634 -{%ret = alloca [17 x i8], align 16}-> N1635
N1635 -{store i8* %buf, i8** %buf.addr, align 8}-> N1638
N1638 -{%0 = bitcast [17 x i8]* %ret to i8*}-> N1639
N1639 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @uninit_var_009_func_001_good.ret, i32 0, i32 0), i8* 17, i8* 16, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1640
N1640 -{%1 = load i8*, i8** %buf.addr, align 8}-> N1641
N1641 -{%arraydecay = getelementptr inbounds [17 x i8], [17 x i8]* %ret, i32 0, i32 0}-> N1642
N1642 -{%call = call i8* @strcpy(i8* %1, i8* %arraydecay, i8* @strcpy)}-> N1643
N1643 -{ret void}-> N1631
N1631 -{Return edge from uninit_var_009_func_001_good to uninit_var_009_good}-> N1651
N1651 -{ret void}-> N1645
N1645 -{Return edge from uninit_var_009_good to main}-> N1608
N1608 -{call uninit_var_009_bad}-> N1612
N1612 -{%buf = alloca [25 x i8], align 16}-> N1615
N1615 -{%arraydecay = getelementptr inbounds [25 x i8], [25 x i8]* %buf, i32 0, i32 0}-> N1616
N1616 -{call uninit_var_009_func_001_bad}-> N1620
N1620 -{%buf.addr = alloca i8*, align 8}-> N1622
N1622 -{%ret = alloca [25 x i8], align 16}-> N1623
N1623 -{store i8* %buf, i8** %buf.addr, align 8}-> N1626
N1626 -{%0 = load i8*, i8** %buf.addr, align 8}-> N1627
N1627 -{%arraydecay = getelementptr inbounds [25 x i8], [25 x i8]* %ret, i32 0, i32 0}-> N1628
N1628 -{%call = call i8* @strcpy(i8* %0, i8* %arraydecay, i8* @strcpy)}-> N1629
N1629 -{ret void}-> N1619
N1619 -{Return edge from uninit_var_009_func_001_bad to uninit_var_009_bad}-> N1617
N1617 -{ret void}-> N1611
N1611 -{Return edge from uninit_var_009_bad to main}-> N1609
N1609 -{ret i32 0}-> N1603
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1628
On edge  : N1628 -{%call = call i8* @strcpy(i8* %0, i8* %arraydecay, i8* @strcpy)}-> N1629
Message  : use of uninitialized variable
> Start from entry function: main, At N1604 of Function main
> Entering function: uninit_var_009_good, On N1607 -> N1646 (call uninit_var_009_good)
> Entering function: uninit_var_009_func_001_good, On N1650 -> N1632 (call uninit_var_009_func_001_good)
> Leaving function: uninit_var_009_func_001_good, On N1631 -> N1651 (Return edge from uninit_var_009_func_001_good to uninit_var_009_good)
> Leaving function: uninit_var_009_good, On N1645 -> N1608 (Return edge from uninit_var_009_good to main)
> Entering function: uninit_var_009_bad, On N1608 -> N1612 (call uninit_var_009_bad)
> Entering function: uninit_var_009_func_001_bad, On N1616 -> N1620 (call uninit_var_009_func_001_bad)
<Defect> : N1628 -> N1629: [%call = call i8* @strcpy(i8* %0, i8* %arraydecay, i8* @strcpy)]
N1628 -> N1629: [%call = call i8* @strcpy(i8* %0, i8* %arraydecay, i8* @strcpy)] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[./457_uninit_var_8.c 9] uninit_var_009_func_001_bad 		[N1628 -{%call = call i8* @strcpy(i8* %0, i8* %arraydecay, i8* @strcpy)}-> N1629]	(use of uninitialized variable)

Found 1 defects in all (0 duplicates ignored).
=====================================================
Phase status: SUCCESS

<< Starting CFACreatePhase(cfa) Phase >>
[/home/guzuxing/Documents/benchmark/CWE/itc/457/457_uninit_var_9.ll]
Finish creating ll file
Finish parsing file
Finish parsing to Cfa
Finish inserting global variables
Finish removing unreachable nodes
Finish simplifying
Finish labeling reverse post order id
Finish labeling flood order
Finish inserting fun call return
Finish building
Finish post process
CFA exported to: output/cfa-merged/cfa.dot
Function CFA exported to: output/cfa-separate/
Call graph exported to: output/cfa-merged/call-graph.dot
Used instruction types are exported to: output/cfa-merged/instructions.txt
Phase status: SUCCESS

<< Starting SummaryComputationPhase(summary) Phase >>
Computing summary >>> 
Running summary: cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer
5 SCCs to deal with
SCC(1): [uninit_var_010_func_001_good]
 +uninit_var_010_func_001_good
SCC(1): [uninit_var_010_good]
 +uninit_var_010_good
SCC(1): [uninit_var_010_func_001_bad]
 +uninit_var_010_func_001_bad
SCC(1): [uninit_var_010_bad]
 +uninit_var_010_bad
SCC(1): [main]
 +main
<begin of summary store (POINTER_AP)>
Functions [uninit_var_010_good, main, uninit_var_010_bad, uninit_var_010_func_001_bad, uninit_var_010_func_001_good]
Loops     [N1683, N1737]
----
function: main
P+ = [] 
P- = [] 
Point-To:

Ret-Value: R
----
function: uninit_var_010_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_010_func_001_bad
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_010_func_001_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
function: uninit_var_010_good
P+ = [] 
P- = [] 
Point-To:

Ret-Value: 
----
loop N1683 in uninit_var_010_func_001_bad: 
N1683 -> P+ = [], P- = [] Point-To: L(uninit_var_010_func_001_bad::buf.addr) -> [P(uninit_var_010_func_001_bad::buf)]
N1685 -> P+ = [], P- = [] Point-To: L(uninit_var_010_func_001_bad::buf.addr) -> [P(uninit_var_010_func_001_bad::buf)]
----
loop N1737 in uninit_var_010_func_001_good: 
N1737 -> P+ = [], P- = [] Point-To: L(uninit_var_010_func_001_good::buf.addr) -> [P(uninit_var_010_func_001_good::buf)]
N1739 -> P+ = [], P- = [] Point-To: L(uninit_var_010_func_001_good::buf.addr) -> [P(uninit_var_010_func_001_good::buf)]
<end of summary store>
Finish summary: (Configuration: [summary=POINTER_AP, ARGCPA.cpa=cpa.composite.CompositeCPA, computer=cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer, analysis.traversal.controlled.maxWaitingSize=100, cpa=cpa.arg.ARGCPA, analysis.traversal.useDominationOrder=true, analysis.traversal.order=bfs, CompositeCPA.cpas=cpa.location.LocationCPA, cpa.accesspath.AccessPathAnalysisCPA], cn.edu.thu.tsmart.core.summary.computer.PointerAccessSummaryComputer)
Finish summary >>> 
Used time: 0.009s
Phase status: SUCCESS

<< Starting MultiEntryAlgorithmRunPhase(basic) Phase >>
Using 1 entries: [main(N1655): +oo]
> [1/1] entry: main ()
N1655 -{global: uninit_var_010_func_001_good.ret}-> N1784
N1784 -{%retval = alloca i32, align 4}-> N1657
N1657 -{store i32 0, i32* %retval, align 4}-> N1658
N1658 -{call uninit_var_010_good}-> N1777
N1777 -{%buf = alloca [2 x [6 x i32]], align 16}-> N1780
N1780 -{%arraydecay = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %buf, i32 0, i32 0}-> N1781
N1781 -{call uninit_var_010_func_001_good}-> N1723
N1723 -{%buf.addr = alloca [6 x i32]*, align 8}-> N1725
N1725 -{%ret = alloca [2 x [6 x i32]], align 16}-> N1726
N1726 -{%i = alloca i32, align 4}-> N1727
N1727 -{%j = alloca i32, align 4}-> N1728
N1728 -{store [6 x i32]* %buf, [6 x i32]** %buf.addr, align 8}-> N1731
N1731 -{%0 = bitcast [2 x [6 x i32]]* %ret to i8*}-> N1732
N1732 -{call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([2 x [6 x i32]]* @uninit_var_010_func_001_good.ret to i8*), i8* 48, i8* 16, i8* false, i8* @llvm.memcpy.p0i8.p0i8.i64)}-> N1735
N1735 -{store i32 0, i32* %i, align 4}-> N1737
N1737 -{%1 = load i32, i32* %i, align 4}-> N1738
N1737 -{@}-> N1737
N1737 -{@}-> N1739
N1738 -{%cmp = icmp slt i32 %1, 2}-> N1739
N1739 -{[%cmp = icmp slt i32 %1, 2]}-> N1772
N1739 -{[!(%cmp = icmp slt i32 %1, 2)]}-> N1773
N1772 -{store i32 0, i32* %j, align 4}-> N1742
N1742 -{%2 = load i32, i32* %j, align 4}-> N1743
N1743 -{%cmp2 = icmp slt i32 %2, 6}-> N1744
N1744 -{[%cmp2 = icmp slt i32 %2, 6]}-> N1774
N1744 -{[!(%cmp2 = icmp slt i32 %2, 6)]}-> N1775
N1774 -{%3 = load i32, i32* %j, align 4}-> N1746
N1746 -{%idxprom = sext i32 %3 to i64}-> N1747
N1747 -{%4 = load i32, i32* %i, align 4}-> N1748
N1748 -{%idxprom4 = sext i32 %4 to i64}-> N1749
N1749 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1750
N1750 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1751
N1751 -{%5 = load i32, i32* %arrayidx5, align 4}-> N1752
N1752 -{%6 = load i32, i32* %j, align 4}-> N1753
N1753 -{%idxprom6 = sext i32 %6 to i64}-> N1754
N1754 -{%7 = load i32, i32* %i, align 4}-> N1755
N1755 -{%idxprom7 = sext i32 %7 to i64}-> N1756
N1756 -{%8 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1757
N1757 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %8, i64 %idxprom7}-> N1758
N1758 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1759
N1759 -{store i32 %5, i32* %arrayidx9, align 4}-> N1761
N1761 -{%9 = load i32, i32* %j, align 4}-> N1762
N1762 -{%inc = add i32 %9, 1}-> N1763
N1763 -{store i32 %inc, i32* %j, align 4}-> N1742
N1742 -{%2 = load i32, i32* %j, align 4}-> N1743
N1743 -{%cmp2 = icmp slt i32 %2, 6}-> N1744
N1744 -{[%cmp2 = icmp slt i32 %2, 6]}-> N1774
N1744 -{[!(%cmp2 = icmp slt i32 %2, 6)]}-> N1775
N1774 -{%3 = load i32, i32* %j, align 4}-> N1746
N1746 -{%idxprom = sext i32 %3 to i64}-> N1747
N1747 -{%4 = load i32, i32* %i, align 4}-> N1748
N1748 -{%idxprom4 = sext i32 %4 to i64}-> N1749
N1749 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1750
N1750 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1751
N1751 -{%5 = load i32, i32* %arrayidx5, align 4}-> N1752
N1752 -{%6 = load i32, i32* %j, align 4}-> N1753
N1753 -{%idxprom6 = sext i32 %6 to i64}-> N1754
N1754 -{%7 = load i32, i32* %i, align 4}-> N1755
N1755 -{%idxprom7 = sext i32 %7 to i64}-> N1756
N1756 -{%8 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1757
N1757 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %8, i64 %idxprom7}-> N1758
N1758 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1759
N1759 -{store i32 %5, i32* %arrayidx9, align 4}-> N1761
N1761 -{%9 = load i32, i32* %j, align 4}-> N1762
N1762 -{%inc = add i32 %9, 1}-> N1763
N1763 -{store i32 %inc, i32* %j, align 4}-> N1742
N1742 -{%2 = load i32, i32* %j, align 4}-> N1743
N1743 -{%cmp2 = icmp slt i32 %2, 6}-> N1744
N1744 -{[%cmp2 = icmp slt i32 %2, 6]}-> N1774
N1744 -{[!(%cmp2 = icmp slt i32 %2, 6)]}-> N1775
N1774 -{%3 = load i32, i32* %j, align 4}-> N1746
N1746 -{%idxprom = sext i32 %3 to i64}-> N1747
N1747 -{%4 = load i32, i32* %i, align 4}-> N1748
N1748 -{%idxprom4 = sext i32 %4 to i64}-> N1749
N1749 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1750
N1750 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1751
N1751 -{%5 = load i32, i32* %arrayidx5, align 4}-> N1752
N1752 -{%6 = load i32, i32* %j, align 4}-> N1753
N1753 -{%idxprom6 = sext i32 %6 to i64}-> N1754
N1754 -{%7 = load i32, i32* %i, align 4}-> N1755
N1755 -{%idxprom7 = sext i32 %7 to i64}-> N1756
N1756 -{%8 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1757
N1757 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %8, i64 %idxprom7}-> N1758
N1758 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1759
N1759 -{store i32 %5, i32* %arrayidx9, align 4}-> N1761
N1761 -{%9 = load i32, i32* %j, align 4}-> N1762
N1762 -{%inc = add i32 %9, 1}-> N1763
N1763 -{store i32 %inc, i32* %j, align 4}-> N1742
N1742 -{%2 = load i32, i32* %j, align 4}-> N1743
N1743 -{%cmp2 = icmp slt i32 %2, 6}-> N1744
N1744 -{[%cmp2 = icmp slt i32 %2, 6]}-> N1774
N1744 -{[!(%cmp2 = icmp slt i32 %2, 6)]}-> N1775
N1774 -{%3 = load i32, i32* %j, align 4}-> N1746
N1746 -{%idxprom = sext i32 %3 to i64}-> N1747
N1747 -{%4 = load i32, i32* %i, align 4}-> N1748
N1748 -{%idxprom4 = sext i32 %4 to i64}-> N1749
N1749 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1750
N1750 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1751
N1751 -{%5 = load i32, i32* %arrayidx5, align 4}-> N1752
N1752 -{%6 = load i32, i32* %j, align 4}-> N1753
N1753 -{%idxprom6 = sext i32 %6 to i64}-> N1754
N1754 -{%7 = load i32, i32* %i, align 4}-> N1755
N1755 -{%idxprom7 = sext i32 %7 to i64}-> N1756
N1756 -{%8 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1757
N1757 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %8, i64 %idxprom7}-> N1758
N1758 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1759
N1759 -{store i32 %5, i32* %arrayidx9, align 4}-> N1761
N1761 -{%9 = load i32, i32* %j, align 4}-> N1762
N1762 -{%inc = add i32 %9, 1}-> N1763
N1763 -{store i32 %inc, i32* %j, align 4}-> N1742
N1742 -{%2 = load i32, i32* %j, align 4}-> N1743
N1743 -{%cmp2 = icmp slt i32 %2, 6}-> N1744
N1744 -{[%cmp2 = icmp slt i32 %2, 6]}-> N1774
N1744 -{[!(%cmp2 = icmp slt i32 %2, 6)]}-> N1775
N1774 -{%3 = load i32, i32* %j, align 4}-> N1746
N1746 -{%idxprom = sext i32 %3 to i64}-> N1747
N1747 -{%4 = load i32, i32* %i, align 4}-> N1748
N1748 -{%idxprom4 = sext i32 %4 to i64}-> N1749
N1749 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1750
N1750 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1751
N1751 -{%5 = load i32, i32* %arrayidx5, align 4}-> N1752
N1752 -{%6 = load i32, i32* %j, align 4}-> N1753
N1753 -{%idxprom6 = sext i32 %6 to i64}-> N1754
N1754 -{%7 = load i32, i32* %i, align 4}-> N1755
N1755 -{%idxprom7 = sext i32 %7 to i64}-> N1756
N1756 -{%8 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1757
N1757 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %8, i64 %idxprom7}-> N1758
N1758 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1759
N1759 -{store i32 %5, i32* %arrayidx9, align 4}-> N1761
N1761 -{%9 = load i32, i32* %j, align 4}-> N1762
N1762 -{%inc = add i32 %9, 1}-> N1763
N1763 -{store i32 %inc, i32* %j, align 4}-> N1742
N1742 -{%2 = load i32, i32* %j, align 4}-> N1743
N1743 -{%cmp2 = icmp slt i32 %2, 6}-> N1744
N1744 -{[%cmp2 = icmp slt i32 %2, 6]}-> N1774
N1744 -{[!(%cmp2 = icmp slt i32 %2, 6)]}-> N1775
N1774 -{%3 = load i32, i32* %j, align 4}-> N1746
N1746 -{%idxprom = sext i32 %3 to i64}-> N1747
N1747 -{%4 = load i32, i32* %i, align 4}-> N1748
N1748 -{%idxprom4 = sext i32 %4 to i64}-> N1749
N1749 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1750
N1750 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1751
N1751 -{%5 = load i32, i32* %arrayidx5, align 4}-> N1752
N1752 -{%6 = load i32, i32* %j, align 4}-> N1753
N1753 -{%idxprom6 = sext i32 %6 to i64}-> N1754
N1754 -{%7 = load i32, i32* %i, align 4}-> N1755
N1755 -{%idxprom7 = sext i32 %7 to i64}-> N1756
N1756 -{%8 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1757
N1757 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %8, i64 %idxprom7}-> N1758
N1758 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1759
N1759 -{store i32 %5, i32* %arrayidx9, align 4}-> N1761
N1761 -{%9 = load i32, i32* %j, align 4}-> N1762
N1762 -{%inc = add i32 %9, 1}-> N1763
N1763 -{store i32 %inc, i32* %j, align 4}-> N1742
N1742 -{%2 = load i32, i32* %j, align 4}-> N1743
N1743 -{%cmp2 = icmp slt i32 %2, 6}-> N1744
N1744 -{[%cmp2 = icmp slt i32 %2, 6]}-> N1774
N1744 -{[!(%cmp2 = icmp slt i32 %2, 6)]}-> N1775
N1775 -{%10 = load i32, i32* %i, align 4}-> N1767
N1767 -{%inc11 = add i32 %10, 1}-> N1768
N1768 -{store i32 %inc11, i32* %i, align 4}-> N1737
N1737 -{%1 = load i32, i32* %i, align 4}-> N1738
N1738 -{%cmp = icmp slt i32 %1, 2}-> N1739
N1739 -{[%cmp = icmp slt i32 %1, 2]}-> N1772
N1739 -{[!(%cmp = icmp slt i32 %1, 2)]}-> N1773
N1772 -{store i32 0, i32* %j, align 4}-> N1742
N1742 -{%2 = load i32, i32* %j, align 4}-> N1743
N1743 -{%cmp2 = icmp slt i32 %2, 6}-> N1744
N1744 -{[%cmp2 = icmp slt i32 %2, 6]}-> N1774
N1744 -{[!(%cmp2 = icmp slt i32 %2, 6)]}-> N1775
N1774 -{%3 = load i32, i32* %j, align 4}-> N1746
N1746 -{%idxprom = sext i32 %3 to i64}-> N1747
N1747 -{%4 = load i32, i32* %i, align 4}-> N1748
N1748 -{%idxprom4 = sext i32 %4 to i64}-> N1749
N1749 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1750
N1750 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1751
N1751 -{%5 = load i32, i32* %arrayidx5, align 4}-> N1752
N1752 -{%6 = load i32, i32* %j, align 4}-> N1753
N1753 -{%idxprom6 = sext i32 %6 to i64}-> N1754
N1754 -{%7 = load i32, i32* %i, align 4}-> N1755
N1755 -{%idxprom7 = sext i32 %7 to i64}-> N1756
N1756 -{%8 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1757
N1757 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %8, i64 %idxprom7}-> N1758
N1758 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1759
N1759 -{store i32 %5, i32* %arrayidx9, align 4}-> N1761
N1761 -{%9 = load i32, i32* %j, align 4}-> N1762
N1762 -{%inc = add i32 %9, 1}-> N1763
N1763 -{store i32 %inc, i32* %j, align 4}-> N1742
N1742 -{%2 = load i32, i32* %j, align 4}-> N1743
N1743 -{%cmp2 = icmp slt i32 %2, 6}-> N1744
N1744 -{[%cmp2 = icmp slt i32 %2, 6]}-> N1774
N1744 -{[!(%cmp2 = icmp slt i32 %2, 6)]}-> N1775
N1774 -{%3 = load i32, i32* %j, align 4}-> N1746
N1746 -{%idxprom = sext i32 %3 to i64}-> N1747
N1747 -{%4 = load i32, i32* %i, align 4}-> N1748
N1748 -{%idxprom4 = sext i32 %4 to i64}-> N1749
N1749 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1750
N1750 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1751
N1751 -{%5 = load i32, i32* %arrayidx5, align 4}-> N1752
N1752 -{%6 = load i32, i32* %j, align 4}-> N1753
N1753 -{%idxprom6 = sext i32 %6 to i64}-> N1754
N1754 -{%7 = load i32, i32* %i, align 4}-> N1755
N1755 -{%idxprom7 = sext i32 %7 to i64}-> N1756
N1756 -{%8 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1757
N1757 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %8, i64 %idxprom7}-> N1758
N1758 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1759
N1759 -{store i32 %5, i32* %arrayidx9, align 4}-> N1761
N1761 -{%9 = load i32, i32* %j, align 4}-> N1762
N1762 -{%inc = add i32 %9, 1}-> N1763
N1763 -{store i32 %inc, i32* %j, align 4}-> N1742
N1742 -{%2 = load i32, i32* %j, align 4}-> N1743
N1743 -{%cmp2 = icmp slt i32 %2, 6}-> N1744
N1744 -{[%cmp2 = icmp slt i32 %2, 6]}-> N1774
N1744 -{[!(%cmp2 = icmp slt i32 %2, 6)]}-> N1775
N1774 -{%3 = load i32, i32* %j, align 4}-> N1746
N1746 -{%idxprom = sext i32 %3 to i64}-> N1747
N1747 -{%4 = load i32, i32* %i, align 4}-> N1748
N1748 -{%idxprom4 = sext i32 %4 to i64}-> N1749
N1749 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1750
N1750 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1751
N1751 -{%5 = load i32, i32* %arrayidx5, align 4}-> N1752
N1752 -{%6 = load i32, i32* %j, align 4}-> N1753
N1753 -{%idxprom6 = sext i32 %6 to i64}-> N1754
N1754 -{%7 = load i32, i32* %i, align 4}-> N1755
N1755 -{%idxprom7 = sext i32 %7 to i64}-> N1756
N1756 -{%8 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1757
N1757 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %8, i64 %idxprom7}-> N1758
N1758 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1759
N1759 -{store i32 %5, i32* %arrayidx9, align 4}-> N1761
N1761 -{%9 = load i32, i32* %j, align 4}-> N1762
N1762 -{%inc = add i32 %9, 1}-> N1763
N1763 -{store i32 %inc, i32* %j, align 4}-> N1742
N1742 -{%2 = load i32, i32* %j, align 4}-> N1743
N1743 -{%cmp2 = icmp slt i32 %2, 6}-> N1744
N1744 -{[%cmp2 = icmp slt i32 %2, 6]}-> N1774
N1744 -{[!(%cmp2 = icmp slt i32 %2, 6)]}-> N1775
N1774 -{%3 = load i32, i32* %j, align 4}-> N1746
N1746 -{%idxprom = sext i32 %3 to i64}-> N1747
N1747 -{%4 = load i32, i32* %i, align 4}-> N1748
N1748 -{%idxprom4 = sext i32 %4 to i64}-> N1749
N1749 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1750
N1750 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1751
N1751 -{%5 = load i32, i32* %arrayidx5, align 4}-> N1752
N1752 -{%6 = load i32, i32* %j, align 4}-> N1753
N1753 -{%idxprom6 = sext i32 %6 to i64}-> N1754
N1754 -{%7 = load i32, i32* %i, align 4}-> N1755
N1755 -{%idxprom7 = sext i32 %7 to i64}-> N1756
N1756 -{%8 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1757
N1757 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %8, i64 %idxprom7}-> N1758
N1758 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1759
N1759 -{store i32 %5, i32* %arrayidx9, align 4}-> N1761
N1761 -{%9 = load i32, i32* %j, align 4}-> N1762
N1762 -{%inc = add i32 %9, 1}-> N1763
N1763 -{store i32 %inc, i32* %j, align 4}-> N1742
N1742 -{%2 = load i32, i32* %j, align 4}-> N1743
N1743 -{%cmp2 = icmp slt i32 %2, 6}-> N1744
N1744 -{[%cmp2 = icmp slt i32 %2, 6]}-> N1774
N1744 -{[!(%cmp2 = icmp slt i32 %2, 6)]}-> N1775
N1774 -{%3 = load i32, i32* %j, align 4}-> N1746
N1746 -{%idxprom = sext i32 %3 to i64}-> N1747
N1747 -{%4 = load i32, i32* %i, align 4}-> N1748
N1748 -{%idxprom4 = sext i32 %4 to i64}-> N1749
N1749 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1750
N1750 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1751
N1751 -{%5 = load i32, i32* %arrayidx5, align 4}-> N1752
N1752 -{%6 = load i32, i32* %j, align 4}-> N1753
N1753 -{%idxprom6 = sext i32 %6 to i64}-> N1754
N1754 -{%7 = load i32, i32* %i, align 4}-> N1755
N1755 -{%idxprom7 = sext i32 %7 to i64}-> N1756
N1756 -{%8 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1757
N1757 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %8, i64 %idxprom7}-> N1758
N1758 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1759
N1759 -{store i32 %5, i32* %arrayidx9, align 4}-> N1761
N1761 -{%9 = load i32, i32* %j, align 4}-> N1762
N1762 -{%inc = add i32 %9, 1}-> N1763
N1763 -{store i32 %inc, i32* %j, align 4}-> N1742
N1742 -{%2 = load i32, i32* %j, align 4}-> N1743
N1743 -{%cmp2 = icmp slt i32 %2, 6}-> N1744
N1744 -{[%cmp2 = icmp slt i32 %2, 6]}-> N1774
N1744 -{[!(%cmp2 = icmp slt i32 %2, 6)]}-> N1775
N1774 -{%3 = load i32, i32* %j, align 4}-> N1746
N1746 -{%idxprom = sext i32 %3 to i64}-> N1747
N1747 -{%4 = load i32, i32* %i, align 4}-> N1748
N1748 -{%idxprom4 = sext i32 %4 to i64}-> N1749
N1749 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1750
N1750 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1751
N1751 -{%5 = load i32, i32* %arrayidx5, align 4}-> N1752
N1752 -{%6 = load i32, i32* %j, align 4}-> N1753
N1753 -{%idxprom6 = sext i32 %6 to i64}-> N1754
N1754 -{%7 = load i32, i32* %i, align 4}-> N1755
N1755 -{%idxprom7 = sext i32 %7 to i64}-> N1756
N1756 -{%8 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1757
N1757 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %8, i64 %idxprom7}-> N1758
N1758 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1759
N1759 -{store i32 %5, i32* %arrayidx9, align 4}-> N1761
N1761 -{%9 = load i32, i32* %j, align 4}-> N1762
N1762 -{%inc = add i32 %9, 1}-> N1763
N1763 -{store i32 %inc, i32* %j, align 4}-> N1742
N1742 -{%2 = load i32, i32* %j, align 4}-> N1743
N1743 -{%cmp2 = icmp slt i32 %2, 6}-> N1744
N1744 -{[%cmp2 = icmp slt i32 %2, 6]}-> N1774
N1744 -{[!(%cmp2 = icmp slt i32 %2, 6)]}-> N1775
N1775 -{%10 = load i32, i32* %i, align 4}-> N1767
N1767 -{%inc11 = add i32 %10, 1}-> N1768
N1768 -{store i32 %inc11, i32* %i, align 4}-> N1737
N1737 -{%1 = load i32, i32* %i, align 4}-> N1738
N1738 -{%cmp = icmp slt i32 %1, 2}-> N1739
N1739 -{[%cmp = icmp slt i32 %1, 2]}-> N1772
N1739 -{[!(%cmp = icmp slt i32 %1, 2)]}-> N1773
N1773 -{ret void}-> N1722
N1722 -{Return edge from uninit_var_010_func_001_good to uninit_var_010_good}-> N1782
N1782 -{ret void}-> N1776
N1776 -{Return edge from uninit_var_010_good to main}-> N1659
N1659 -{call uninit_var_010_bad}-> N1663
N1663 -{%buf = alloca [2 x [6 x i32]], align 16}-> N1666
N1666 -{%arraydecay = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %buf, i32 0, i32 0}-> N1667
N1667 -{call uninit_var_010_func_001_bad}-> N1671
N1671 -{%buf.addr = alloca [6 x i32]*, align 8}-> N1673
N1673 -{%ret = alloca [2 x [6 x i32]], align 16}-> N1674
N1674 -{%i = alloca i32, align 4}-> N1675
N1675 -{%j = alloca i32, align 4}-> N1676
N1676 -{store [6 x i32]* %buf, [6 x i32]** %buf.addr, align 8}-> N1681
N1681 -{store i32 0, i32* %i, align 4}-> N1683
N1683 -{%0 = load i32, i32* %i, align 4}-> N1684
N1683 -{@}-> N1683
N1683 -{@}-> N1685
N1684 -{%cmp = icmp slt i32 %0, 2}-> N1685
N1685 -{[%cmp = icmp slt i32 %0, 2]}-> N1718
N1685 -{[!(%cmp = icmp slt i32 %0, 2)]}-> N1719
N1718 -{store i32 0, i32* %j, align 4}-> N1688
N1688 -{%1 = load i32, i32* %j, align 4}-> N1689
N1689 -{%cmp2 = icmp slt i32 %1, 6}-> N1690
N1690 -{[%cmp2 = icmp slt i32 %1, 6]}-> N1720
N1690 -{[!(%cmp2 = icmp slt i32 %1, 6)]}-> N1721
N1720 -{%2 = load i32, i32* %j, align 4}-> N1692
N1692 -{%idxprom = sext i32 %2 to i64}-> N1693
N1693 -{%3 = load i32, i32* %i, align 4}-> N1694
N1694 -{%idxprom4 = sext i32 %3 to i64}-> N1695
N1695 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1696
N1696 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1697
N1697 -{%4 = load i32, i32* %arrayidx5, align 4}-> N1698
N1698 -{%5 = load i32, i32* %j, align 4}-> N1699
N1699 -{%idxprom6 = sext i32 %5 to i64}-> N1700
N1700 -{%6 = load i32, i32* %i, align 4}-> N1701
N1701 -{%idxprom7 = sext i32 %6 to i64}-> N1702
N1702 -{%7 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1703
N1703 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %7, i64 %idxprom7}-> N1704
N1704 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1705
N1705 -{store i32 %4, i32* %arrayidx9, align 4}-> N1707
N1707 -{%8 = load i32, i32* %j, align 4}-> N1708
N1708 -{%inc = add i32 %8, 1}-> N1709
N1709 -{store i32 %inc, i32* %j, align 4}-> N1688
N1688 -{%1 = load i32, i32* %j, align 4}-> N1689
N1689 -{%cmp2 = icmp slt i32 %1, 6}-> N1690
N1690 -{[%cmp2 = icmp slt i32 %1, 6]}-> N1720
N1690 -{[!(%cmp2 = icmp slt i32 %1, 6)]}-> N1721
N1720 -{%2 = load i32, i32* %j, align 4}-> N1692
N1692 -{%idxprom = sext i32 %2 to i64}-> N1693
N1693 -{%3 = load i32, i32* %i, align 4}-> N1694
N1694 -{%idxprom4 = sext i32 %3 to i64}-> N1695
N1695 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1696
N1696 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1697
N1697 -{%4 = load i32, i32* %arrayidx5, align 4}-> N1698
N1698 -{%5 = load i32, i32* %j, align 4}-> N1699
N1699 -{%idxprom6 = sext i32 %5 to i64}-> N1700
N1700 -{%6 = load i32, i32* %i, align 4}-> N1701
N1701 -{%idxprom7 = sext i32 %6 to i64}-> N1702
N1702 -{%7 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1703
N1703 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %7, i64 %idxprom7}-> N1704
N1704 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1705
N1705 -{store i32 %4, i32* %arrayidx9, align 4}-> N1707
N1707 -{%8 = load i32, i32* %j, align 4}-> N1708
N1708 -{%inc = add i32 %8, 1}-> N1709
N1709 -{store i32 %inc, i32* %j, align 4}-> N1688
N1688 -{%1 = load i32, i32* %j, align 4}-> N1689
N1689 -{%cmp2 = icmp slt i32 %1, 6}-> N1690
N1690 -{[%cmp2 = icmp slt i32 %1, 6]}-> N1720
N1690 -{[!(%cmp2 = icmp slt i32 %1, 6)]}-> N1721
N1720 -{%2 = load i32, i32* %j, align 4}-> N1692
N1692 -{%idxprom = sext i32 %2 to i64}-> N1693
N1693 -{%3 = load i32, i32* %i, align 4}-> N1694
N1694 -{%idxprom4 = sext i32 %3 to i64}-> N1695
N1695 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1696
N1696 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1697
N1697 -{%4 = load i32, i32* %arrayidx5, align 4}-> N1698
N1698 -{%5 = load i32, i32* %j, align 4}-> N1699
N1699 -{%idxprom6 = sext i32 %5 to i64}-> N1700
N1700 -{%6 = load i32, i32* %i, align 4}-> N1701
N1701 -{%idxprom7 = sext i32 %6 to i64}-> N1702
N1702 -{%7 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1703
N1703 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %7, i64 %idxprom7}-> N1704
N1704 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1705
N1705 -{store i32 %4, i32* %arrayidx9, align 4}-> N1707
N1707 -{%8 = load i32, i32* %j, align 4}-> N1708
N1708 -{%inc = add i32 %8, 1}-> N1709
N1709 -{store i32 %inc, i32* %j, align 4}-> N1688
N1688 -{%1 = load i32, i32* %j, align 4}-> N1689
N1689 -{%cmp2 = icmp slt i32 %1, 6}-> N1690
N1690 -{[%cmp2 = icmp slt i32 %1, 6]}-> N1720
N1690 -{[!(%cmp2 = icmp slt i32 %1, 6)]}-> N1721
N1720 -{%2 = load i32, i32* %j, align 4}-> N1692
N1692 -{%idxprom = sext i32 %2 to i64}-> N1693
N1693 -{%3 = load i32, i32* %i, align 4}-> N1694
N1694 -{%idxprom4 = sext i32 %3 to i64}-> N1695
N1695 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1696
N1696 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1697
N1697 -{%4 = load i32, i32* %arrayidx5, align 4}-> N1698
N1698 -{%5 = load i32, i32* %j, align 4}-> N1699
N1699 -{%idxprom6 = sext i32 %5 to i64}-> N1700
N1700 -{%6 = load i32, i32* %i, align 4}-> N1701
N1701 -{%idxprom7 = sext i32 %6 to i64}-> N1702
N1702 -{%7 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1703
N1703 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %7, i64 %idxprom7}-> N1704
N1704 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1705
N1705 -{store i32 %4, i32* %arrayidx9, align 4}-> N1707
N1707 -{%8 = load i32, i32* %j, align 4}-> N1708
N1708 -{%inc = add i32 %8, 1}-> N1709
N1709 -{store i32 %inc, i32* %j, align 4}-> N1688
N1688 -{%1 = load i32, i32* %j, align 4}-> N1689
N1689 -{%cmp2 = icmp slt i32 %1, 6}-> N1690
N1690 -{[%cmp2 = icmp slt i32 %1, 6]}-> N1720
N1690 -{[!(%cmp2 = icmp slt i32 %1, 6)]}-> N1721
N1720 -{%2 = load i32, i32* %j, align 4}-> N1692
N1692 -{%idxprom = sext i32 %2 to i64}-> N1693
N1693 -{%3 = load i32, i32* %i, align 4}-> N1694
N1694 -{%idxprom4 = sext i32 %3 to i64}-> N1695
N1695 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1696
N1696 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1697
N1697 -{%4 = load i32, i32* %arrayidx5, align 4}-> N1698
N1698 -{%5 = load i32, i32* %j, align 4}-> N1699
N1699 -{%idxprom6 = sext i32 %5 to i64}-> N1700
N1700 -{%6 = load i32, i32* %i, align 4}-> N1701
N1701 -{%idxprom7 = sext i32 %6 to i64}-> N1702
N1702 -{%7 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1703
N1703 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %7, i64 %idxprom7}-> N1704
N1704 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1705
N1705 -{store i32 %4, i32* %arrayidx9, align 4}-> N1707
N1707 -{%8 = load i32, i32* %j, align 4}-> N1708
N1708 -{%inc = add i32 %8, 1}-> N1709
N1709 -{store i32 %inc, i32* %j, align 4}-> N1688
N1688 -{%1 = load i32, i32* %j, align 4}-> N1689
N1689 -{%cmp2 = icmp slt i32 %1, 6}-> N1690
N1690 -{[%cmp2 = icmp slt i32 %1, 6]}-> N1720
N1690 -{[!(%cmp2 = icmp slt i32 %1, 6)]}-> N1721
N1720 -{%2 = load i32, i32* %j, align 4}-> N1692
N1692 -{%idxprom = sext i32 %2 to i64}-> N1693
N1693 -{%3 = load i32, i32* %i, align 4}-> N1694
N1694 -{%idxprom4 = sext i32 %3 to i64}-> N1695
N1695 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1696
N1696 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1697
N1697 -{%4 = load i32, i32* %arrayidx5, align 4}-> N1698
N1698 -{%5 = load i32, i32* %j, align 4}-> N1699
N1699 -{%idxprom6 = sext i32 %5 to i64}-> N1700
N1700 -{%6 = load i32, i32* %i, align 4}-> N1701
N1701 -{%idxprom7 = sext i32 %6 to i64}-> N1702
N1702 -{%7 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1703
N1703 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %7, i64 %idxprom7}-> N1704
N1704 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1705
N1705 -{store i32 %4, i32* %arrayidx9, align 4}-> N1707
N1707 -{%8 = load i32, i32* %j, align 4}-> N1708
N1708 -{%inc = add i32 %8, 1}-> N1709
N1709 -{store i32 %inc, i32* %j, align 4}-> N1688
N1688 -{%1 = load i32, i32* %j, align 4}-> N1689
N1689 -{%cmp2 = icmp slt i32 %1, 6}-> N1690
N1690 -{[%cmp2 = icmp slt i32 %1, 6]}-> N1720
N1690 -{[!(%cmp2 = icmp slt i32 %1, 6)]}-> N1721
N1721 -{%9 = load i32, i32* %i, align 4}-> N1713
N1713 -{%inc11 = add i32 %9, 1}-> N1714
N1714 -{store i32 %inc11, i32* %i, align 4}-> N1683
N1683 -{%0 = load i32, i32* %i, align 4}-> N1684
N1684 -{%cmp = icmp slt i32 %0, 2}-> N1685
N1685 -{[%cmp = icmp slt i32 %0, 2]}-> N1718
N1685 -{[!(%cmp = icmp slt i32 %0, 2)]}-> N1719
N1718 -{store i32 0, i32* %j, align 4}-> N1688
N1688 -{%1 = load i32, i32* %j, align 4}-> N1689
N1689 -{%cmp2 = icmp slt i32 %1, 6}-> N1690
N1690 -{[%cmp2 = icmp slt i32 %1, 6]}-> N1720
N1690 -{[!(%cmp2 = icmp slt i32 %1, 6)]}-> N1721
N1720 -{%2 = load i32, i32* %j, align 4}-> N1692
N1692 -{%idxprom = sext i32 %2 to i64}-> N1693
N1693 -{%3 = load i32, i32* %i, align 4}-> N1694
N1694 -{%idxprom4 = sext i32 %3 to i64}-> N1695
N1695 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1696
N1696 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1697
N1697 -{%4 = load i32, i32* %arrayidx5, align 4}-> N1698
N1698 -{%5 = load i32, i32* %j, align 4}-> N1699
N1699 -{%idxprom6 = sext i32 %5 to i64}-> N1700
N1700 -{%6 = load i32, i32* %i, align 4}-> N1701
N1701 -{%idxprom7 = sext i32 %6 to i64}-> N1702
N1702 -{%7 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1703
N1703 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %7, i64 %idxprom7}-> N1704
N1704 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1705
N1705 -{store i32 %4, i32* %arrayidx9, align 4}-> N1707
N1707 -{%8 = load i32, i32* %j, align 4}-> N1708
N1708 -{%inc = add i32 %8, 1}-> N1709
N1709 -{store i32 %inc, i32* %j, align 4}-> N1688
N1688 -{%1 = load i32, i32* %j, align 4}-> N1689
N1689 -{%cmp2 = icmp slt i32 %1, 6}-> N1690
N1690 -{[%cmp2 = icmp slt i32 %1, 6]}-> N1720
N1690 -{[!(%cmp2 = icmp slt i32 %1, 6)]}-> N1721
N1720 -{%2 = load i32, i32* %j, align 4}-> N1692
N1692 -{%idxprom = sext i32 %2 to i64}-> N1693
N1693 -{%3 = load i32, i32* %i, align 4}-> N1694
N1694 -{%idxprom4 = sext i32 %3 to i64}-> N1695
N1695 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1696
N1696 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1697
N1697 -{%4 = load i32, i32* %arrayidx5, align 4}-> N1698
N1698 -{%5 = load i32, i32* %j, align 4}-> N1699
N1699 -{%idxprom6 = sext i32 %5 to i64}-> N1700
N1700 -{%6 = load i32, i32* %i, align 4}-> N1701
N1701 -{%idxprom7 = sext i32 %6 to i64}-> N1702
N1702 -{%7 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1703
N1703 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %7, i64 %idxprom7}-> N1704
N1704 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1705
N1705 -{store i32 %4, i32* %arrayidx9, align 4}-> N1707
N1707 -{%8 = load i32, i32* %j, align 4}-> N1708
N1708 -{%inc = add i32 %8, 1}-> N1709
N1709 -{store i32 %inc, i32* %j, align 4}-> N1688
N1688 -{%1 = load i32, i32* %j, align 4}-> N1689
N1689 -{%cmp2 = icmp slt i32 %1, 6}-> N1690
N1690 -{[%cmp2 = icmp slt i32 %1, 6]}-> N1720
N1690 -{[!(%cmp2 = icmp slt i32 %1, 6)]}-> N1721
N1720 -{%2 = load i32, i32* %j, align 4}-> N1692
N1692 -{%idxprom = sext i32 %2 to i64}-> N1693
N1693 -{%3 = load i32, i32* %i, align 4}-> N1694
N1694 -{%idxprom4 = sext i32 %3 to i64}-> N1695
N1695 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1696
N1696 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1697
N1697 -{%4 = load i32, i32* %arrayidx5, align 4}-> N1698
N1698 -{%5 = load i32, i32* %j, align 4}-> N1699
N1699 -{%idxprom6 = sext i32 %5 to i64}-> N1700
N1700 -{%6 = load i32, i32* %i, align 4}-> N1701
N1701 -{%idxprom7 = sext i32 %6 to i64}-> N1702
N1702 -{%7 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1703
N1703 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %7, i64 %idxprom7}-> N1704
N1704 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1705
N1705 -{store i32 %4, i32* %arrayidx9, align 4}-> N1707
N1707 -{%8 = load i32, i32* %j, align 4}-> N1708
N1708 -{%inc = add i32 %8, 1}-> N1709
N1709 -{store i32 %inc, i32* %j, align 4}-> N1688
N1688 -{%1 = load i32, i32* %j, align 4}-> N1689
N1689 -{%cmp2 = icmp slt i32 %1, 6}-> N1690
N1690 -{[%cmp2 = icmp slt i32 %1, 6]}-> N1720
N1690 -{[!(%cmp2 = icmp slt i32 %1, 6)]}-> N1721
N1720 -{%2 = load i32, i32* %j, align 4}-> N1692
N1692 -{%idxprom = sext i32 %2 to i64}-> N1693
N1693 -{%3 = load i32, i32* %i, align 4}-> N1694
N1694 -{%idxprom4 = sext i32 %3 to i64}-> N1695
N1695 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1696
N1696 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1697
N1697 -{%4 = load i32, i32* %arrayidx5, align 4}-> N1698
N1698 -{%5 = load i32, i32* %j, align 4}-> N1699
N1699 -{%idxprom6 = sext i32 %5 to i64}-> N1700
N1700 -{%6 = load i32, i32* %i, align 4}-> N1701
N1701 -{%idxprom7 = sext i32 %6 to i64}-> N1702
N1702 -{%7 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1703
N1703 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %7, i64 %idxprom7}-> N1704
N1704 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1705
N1705 -{store i32 %4, i32* %arrayidx9, align 4}-> N1707
N1707 -{%8 = load i32, i32* %j, align 4}-> N1708
N1708 -{%inc = add i32 %8, 1}-> N1709
N1709 -{store i32 %inc, i32* %j, align 4}-> N1688
N1688 -{%1 = load i32, i32* %j, align 4}-> N1689
N1689 -{%cmp2 = icmp slt i32 %1, 6}-> N1690
N1690 -{[%cmp2 = icmp slt i32 %1, 6]}-> N1720
N1690 -{[!(%cmp2 = icmp slt i32 %1, 6)]}-> N1721
N1720 -{%2 = load i32, i32* %j, align 4}-> N1692
N1692 -{%idxprom = sext i32 %2 to i64}-> N1693
N1693 -{%3 = load i32, i32* %i, align 4}-> N1694
N1694 -{%idxprom4 = sext i32 %3 to i64}-> N1695
N1695 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1696
N1696 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1697
N1697 -{%4 = load i32, i32* %arrayidx5, align 4}-> N1698
N1698 -{%5 = load i32, i32* %j, align 4}-> N1699
N1699 -{%idxprom6 = sext i32 %5 to i64}-> N1700
N1700 -{%6 = load i32, i32* %i, align 4}-> N1701
N1701 -{%idxprom7 = sext i32 %6 to i64}-> N1702
N1702 -{%7 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1703
N1703 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %7, i64 %idxprom7}-> N1704
N1704 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1705
N1705 -{store i32 %4, i32* %arrayidx9, align 4}-> N1707
N1707 -{%8 = load i32, i32* %j, align 4}-> N1708
N1708 -{%inc = add i32 %8, 1}-> N1709
N1709 -{store i32 %inc, i32* %j, align 4}-> N1688
N1688 -{%1 = load i32, i32* %j, align 4}-> N1689
N1689 -{%cmp2 = icmp slt i32 %1, 6}-> N1690
N1690 -{[%cmp2 = icmp slt i32 %1, 6]}-> N1720
N1690 -{[!(%cmp2 = icmp slt i32 %1, 6)]}-> N1721
N1720 -{%2 = load i32, i32* %j, align 4}-> N1692
N1692 -{%idxprom = sext i32 %2 to i64}-> N1693
N1693 -{%3 = load i32, i32* %i, align 4}-> N1694
N1694 -{%idxprom4 = sext i32 %3 to i64}-> N1695
N1695 -{%arrayidx = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* %ret, i64 0, i64 %idxprom4}-> N1696
N1696 -{%arrayidx5 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx, i64 0, i64 %idxprom}-> N1697
N1697 -{%4 = load i32, i32* %arrayidx5, align 4}-> N1698
N1698 -{%5 = load i32, i32* %j, align 4}-> N1699
N1699 -{%idxprom6 = sext i32 %5 to i64}-> N1700
N1700 -{%6 = load i32, i32* %i, align 4}-> N1701
N1701 -{%idxprom7 = sext i32 %6 to i64}-> N1702
N1702 -{%7 = load [6 x i32]*, [6 x i32]** %buf.addr, align 8}-> N1703
N1703 -{%arrayidx8 = getelementptr inbounds [6 x i32], [6 x i32]* %7, i64 %idxprom7}-> N1704
N1704 -{%arrayidx9 = getelementptr inbounds [6 x i32], [6 x i32]* %arrayidx8, i64 0, i64 %idxprom6}-> N1705
N1705 -{store i32 %4, i32* %arrayidx9, align 4}-> N1707
N1707 -{%8 = load i32, i32* %j, align 4}-> N1708
N1708 -{%inc = add i32 %8, 1}-> N1709
N1709 -{store i32 %inc, i32* %j, align 4}-> N1688
N1688 -{%1 = load i32, i32* %j, align 4}-> N1689
N1689 -{%cmp2 = icmp slt i32 %1, 6}-> N1690
N1690 -{[%cmp2 = icmp slt i32 %1, 6]}-> N1720
N1690 -{[!(%cmp2 = icmp slt i32 %1, 6)]}-> N1721
N1721 -{%9 = load i32, i32* %i, align 4}-> N1713
N1713 -{%inc11 = add i32 %9, 1}-> N1714
N1714 -{store i32 %inc11, i32* %i, align 4}-> N1683
N1683 -{%0 = load i32, i32* %i, align 4}-> N1684
N1684 -{%cmp = icmp slt i32 %0, 2}-> N1685
N1685 -{[%cmp = icmp slt i32 %0, 2]}-> N1718
N1685 -{[!(%cmp = icmp slt i32 %0, 2)]}-> N1719
N1719 -{ret void}-> N1670
N1670 -{Return edge from uninit_var_010_func_001_bad to uninit_var_010_bad}-> N1668
N1668 -{ret void}-> N1662
N1662 -{Return edge from uninit_var_010_bad to main}-> N1660
N1660 -{ret i32 0}-> N1654
finish entry: main
Phase status: SUCCESS

<< Starting AnalyzingResultPhase(result) Phase >>
== Reports ==
-- start of trace --
Weakness : Use of Uninitialized Variable
At node  : N1697
On edge  : N1697 -{%4 = load i32, i32* %arrayidx5, align 4}-> N1698
Message  : use of uninitialized variable
> Start from entry function: main, At N1655 of Function main
> Entering function: uninit_var_010_good, On N1658 -> N1777 (call uninit_var_010_good)
> Entering function: uninit_var_010_func_001_good, On N1781 -> N1723 (call uninit_var_010_func_001_good)
> takes the true branch, At N1739 of Function uninit_var_010_func_001_good
> takes the true branch, At N1744 of Function uninit_var_010_func_001_good
> takes the true branch, At N1744 of Function uninit_var_010_func_001_good
> takes the true branch, At N1744 of Function uninit_var_010_func_001_good
> takes the true branch, At N1744 of Function uninit_var_010_func_001_good
> takes the true branch, At N1744 of Function uninit_var_010_func_001_good
> takes the true branch, At N1744 of Function uninit_var_010_func_001_good
> takes the false branch, At N1744 of Function uninit_var_010_func_001_good
> takes the true branch, At N1739 of Function uninit_var_010_func_001_good
> takes the true branch, At N1744 of Function uninit_var_010_func_001_good
> takes the true branch, At N1744 of Function uninit_var_010_func_001_good
> takes the true branch, At N1744 of Function uninit_var_010_func_001_good
> takes the true branch, At N1744 of Function uninit_var_010_func_001_good
> takes the true branch, At N1744 of Function uninit_var_010_func_001_good
> takes the true branch, At N1744 of Function uninit_var_010_func_001_good
> takes the false branch, At N1744 of Function uninit_var_010_func_001_good
> takes the false branch, At N1739 of Function uninit_var_010_func_001_good
> Leaving function: uninit_var_010_func_001_good, On N1722 -> N1782 (Return edge from uninit_var_010_func_001_good to uninit_var_010_good)
> Leaving function: uninit_var_010_good, On N1776 -> N1659 (Return edge from uninit_var_010_good to main)
> Entering function: uninit_var_010_bad, On N1659 -> N1663 (call uninit_var_010_bad)
> Entering function: uninit_var_010_func_001_bad, On N1667 -> N1671 (call uninit_var_010_func_001_bad)
> takes the true branch, At N1685 of Function uninit_var_010_func_001_bad
> takes the true branch, At N1690 of Function uninit_var_010_func_001_bad
<Defect> : N1697 -> N1698: [%4 = load i32, i32* %arrayidx5, align 4]
N1697 -> N1698: [%4 = load i32, i32* %arrayidx5, align 4] <--
-- end of trace --
=====================================================
CWE_457(Use of Uninitialized Variable): 1
	[457_uninit_var_9.c 10] uninit_var_010_func_001_bad 		[N1697 -{%4 = load i32, i32* %arrayidx5, align 4}-> N1698]	(use of uninitialized variable)

Found 1 defects in all (11 duplicates ignored).
=====================================================
Phase status: SUCCESS


Process finished with exit code 255
